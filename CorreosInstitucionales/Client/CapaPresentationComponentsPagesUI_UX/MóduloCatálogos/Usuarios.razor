@page "/catalogo/usuarios"

@attribute [Authorize(Policy = "[Rol] Ambos")]

<PageTitle>@Title</PageTitle>

<div class="p-4 rounded-1 bg-white shadow">
        
    <div class="row mb-4">
        <div class="col-10">
            <h1>@Title</h1>
        </div>

    @if (cargado)
    {
        <div class="col-2">
            <button type="button" class="btn btn-primary form-control" @onclick="Agregar">
                Agregar...
            </button>
        </div>
    }
    </div>

    @if(!cargado)
    {
        <Carga/>
    }

    <RadzenDataGrid @ref="oUsuariosRef" Data="@items" @bind-Value="@selectedItems" TItem="RequestDTO_Usuario" Density="@Density"
                    AllowFiltering="true" AllowColumnResize="true" AllowColumnReorder="true" AllowAlternatingRows="true" AllowSorting="true"
                    AllowColumnPicking="true" ColumnsPickerAllowFiltering="true"
                    AllowPaging="true" PageSize="10" PagerPosition="PagerPosition.TopAndBottom" PagerHorizontalAlign="HorizontalAlign.Center" PagerAlwaysVisible="true"
                    PageSizeOptions="@(new int[] { 10, 25, 50, 100 })" PageSizeText="registros por página" ShowPagingSummary="true" PagingSummaryFormat="Mostrando página {0} de {1} <b>(Total {2} registros)</b>" Page="@OnPage"
                    AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true" AllowVirtualization="true" GridLines="DataGridGridLines.Both"
                    FilterMode="FilterMode.Advanced" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                    FilterText="Filtrar" EqualsText="Igual a..." NotEqualsText="Distinto de..." ContainsText="Contiene..." StartsWithText="Comienza con..." EndsWithText="Termina con..." DoesNotContainText="No contiene..."
                    IsNullText="Es nulo" IsEmptyText="Es vacío" IsNotNullText="No es nulo" IsNotEmptyText="No es vacío" AndOperatorText="Y" OrOperatorText="O"
                    GreaterThanText="Mayor que" GreaterThanOrEqualsText="Mayor o igual que" LessThanText="Menor que" LessThanOrEqualsText="Menor o igual que"
                    ClearFilterText="Quitar Filtro" ApplyFilterText="Aplicar"
                    ColumnsShowingText="columnas visibles" AllColumnsText="Todas las columnas" ColumnsText="Mostrar columnas"
                    ColumnWidth="500px" SelectionMode="DataGridSelectionMode.Single"
                    ExpandMode="DataGridExpandMode.Single" Visible=@cargado>
        <HeaderTemplate>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch" JustifyContent="JustifyContent.SpaceBetween" Gap="10px" class="">
                <RadzenSelectBar @bind-Value="@Density" TextProperty="Text" ValueProperty="Value" Visible="false"
                                 Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small">
                    @* <Items>
                    <RadzenSelectBarItem Value="true" Text="Sí" Icon="check_circle" IconColor="@Colors.SuccessDarker" />
                    <RadzenSelectBarItem Value="false" Text="No" Icon="cancel" IconColor="@Colors.DangerDarker" />
                    </Items> *@
                </RadzenSelectBar>
            </RadzenStack>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="ID" Property="IdUsuario"
                                  Filterable="true" Frozen="true" Reorderable="true" Resizable="false" Sortable="true" TextAlign="TextAlign.Center" Width="80px">
                <Template Context="item">
                    <h5 class="text-wrap">@item.IdUsuario</h5>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Nombre Completo" Property="UsuNombre"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Start" Width="200px">
                <HeaderTemplate>
                    <span data-bs-toggle="popover" data-bs-trigger="hover" data-bs-placement="top" data-bs-custom-class="popover-dark" class="d-block"
                          title="<b>Datos del Usuario</b>" data-bs-content="Filtro y búsqueda sólo por el Nombre de pila.">
                        Nombre Completo (filtro y búsqueda por el Nombre)
                    </span>
                </HeaderTemplate>
                <Template Context="item">
                    @if (item.UsuStatus)
                    {
                        <div class="text-wrap">
                            <text>
                                <strong>@item.UsuNombre @item.UsuPrimerApellido @item.UsuSegundoApellido</strong>
                            </text>
                            <br />
                            <small>
                                @item.UsuIdTipoPersonalNavigation?.TipoperNombre&ensp;(@item.UsuFechaHoraAlta?.ToString("dd/MMM/yyyy HH:mm 'hrs.'"))
                            </small>
                        </div>
                    }
                    else
                    {
                        <div class="text-wrap">
                            <del>
                                <strong>@item.UsuNombre @item.UsuPrimerApellido @item.UsuSegundoApellido</strong>
                            </del>
                            <br />
                            <small>
                                @item.UsuIdTipoPersonalNavigation?.TipoperNombre&ensp;(@item.UsuFechaHoraAlta?.ToString("dd/MMM/yyyy HH:mm 'hrs.'"))
                            </small>
                        </div>
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="CURP" Property="UsuCurp"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="120px" />

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="BOLETA" Property="UsuBoletaAlumno"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="100px" />

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="No. DE CELULAR" Property="UsuNoCelularNuevo"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Visible="true" Width="110px" />

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Correo Personal" Property="UsuCorreoPersonalCuentaNueva"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.End" Width="150px" />

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Correo Institucional" Property="UsuCorreoInstitucionalCuenta"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.End" Width="150px">
                <Template Context="item">
                    @if (!string.IsNullOrEmpty(item.UsuCorreoInstitucionalCuenta))
                    {
                        <text>
                            <strong>@item.UsuCorreoInstitucionalCuenta</strong>
                            <br />
                            @item.UsuCorreoInstitucionalContrasenia
                        </text>
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Acciones" Context="item"
                                  Filterable="false" Frozen="true" Reorderable="false" Resizable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px"
                                  Visible=@puede_editar>
                <Template Context="item">
                    <RadzenButton title="Editar..."
                                  Icon="edit"
                                  ButtonStyle="ButtonStyle.Info"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Click="@(async ()=> await Editar(item))" @onclick:stopPropagation="true">
                    </RadzenButton>

                    <RadzenButton title="Deshabilitar"
                                  Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Visible="item.UsuStatus.Equals(true)"
                                  Click="@(async ()=> await CambiarStatus(item, false))" @onclick:stopPropagation="true">
                    </RadzenButton>

                    <RadzenButton title="Habilitar"
                                  ButtonStyle="ButtonStyle.Success"
                                  Icon="autorenew"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Visible="item.UsuStatus.Equals(false)"
                                  Click="@(async ()=> await CambiarStatus(item, true))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No hay registros encontrados para mostrar.</p>
        </EmptyTemplate>
    </RadzenDataGrid>
</div>

@code
{
    private string Title = "Usuarios";
    private bool cargado { get; set; } = false;

    private List<RequestDTO_Usuario> items = new();
    private RadzenDataGrid<RequestDTO_Usuario>? oUsuariosRef = new();
    private IList<RequestDTO_Usuario> selectedItems = new List<RequestDTO_Usuario>();

    private bool puede_editar { get; set; } = true;
    private bool puede_agregar { get; set; } = false;

    public List<RequestViewModel_AreaDepto> cat_UsuIdAreaDepto { get; private set; } = new List<RequestViewModel_AreaDepto>();
    public List<RequestViewModel_Carrera> cat_UsuIdCarrera { get; private set; } = new List<RequestViewModel_Carrera>();
    public List<RequestViewModel_Rol> cat_UsuIdRol { get; private set; } = new List<RequestViewModel_Rol>();
    public List<RequestViewModel_TipoPersonal> cat_UsuIdTipoPersonal { get; private set; } = new List<RequestViewModel_TipoPersonal>();

    string debug = string.Empty;
    Density Density = Density.Default;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JSRuntime.InvokeVoidAsync("blazorInit");

        if (firstRender)
        {
            items = await WebUtils.ListByStatusAsync(servicioUsuario, false);
            cat_UsuIdAreaDepto = await WebUtils.ListByStatusAsync(servicioAreaDepto);
            cat_UsuIdCarrera = await WebUtils.ListByStatusAsync(servicioCarrera);
            cat_UsuIdRol = await WebUtils.ListByStatusAsync(servicioRol);
            cat_UsuIdTipoPersonal = await WebUtils.ListByStatusAsync(servicioTipoPersonal);

            cargado = true;
            StateHasChanged();
        }
    }

    private async Task CargarLista(int? selecccionar_id = null)
    {
        items = await WebUtils.ListByStatusAsync(servicioUsuario, false);

        if (selecccionar_id is not null)
        {
            selectedItems = items.Where(i => (i.IdUsuario == selecccionar_id)).ToList();
        }
    }

    private async Task<DocumentoAdjunto<RequestDTO_Usuario>?> MostrarFormulario(RequestDTO_Usuario registro, string titulo_ventana)
    {
        return await DialogModalService.OpenAsync<UsuarioEditor>
                (
                    titulo_ventana,
                    new Dictionary<string, object>()
                    {
                        {"registro", registro},
                        {"cat_UsuIdAreaDepto", cat_UsuIdAreaDepto},
                        {"cat_UsuIdCarrera", cat_UsuIdCarrera},
                        {"cat_UsuIdRol", cat_UsuIdRol},
                        {"cat_UsuIdTipoPersonal", cat_UsuIdTipoPersonal}
                    },
                    new DialogOptions()
                    {
                        ShowClose = false,
                        Width = "75%"
                    }
                );
    }

    private void MensajeCarga()
    {
        DialogModalService.OpenAsync<Carga>
        (
            "Cargando...",
            new Dictionary<string, object>(),
            new DialogOptions() { ShowClose = false, Width = "64px" }
        );
    }

    private async Task Agregar()
    {
        RequestDTO_Usuario registro = TemplateEntity.CreateUsuario();

        DocumentoAdjunto<RequestDTO_Usuario>? result = await MostrarFormulario(registro, "Agregar Usuario");

        if (result is not null)
        {
            MensajeCarga();

            result.Value.UsuCurp = result.Value.UsuCurp.ToUpper();
            result.Value.UsuNombre = result.Value.UsuNombre.ToUpper();
            result.Value.UsuPrimerApellido = result.Value.UsuPrimerApellido.ToUpper();
            result.Value.UsuSegundoApellido = result.Value.UsuSegundoApellido ?? "".ToUpper();
            result.Value.UsuCorreoPersonalCuentaNueva = result.Value.UsuCorreoPersonalCuentaNueva.ToLower();
            result.Value.UsuContrasenia = Encrypt.GetSHA256(result.Value.UsuContrasenia);

            HttpResponseMessage response = await servicioUsuario.AddDataAsync(result.Value);
            if (response.IsSuccessStatusCode)
            {
                await CargarLista(result.Value.IdUsuario);
            }

            DialogModalService.Close();
        }
    } // AGREGAR

    private async Task Editar(RequestDTO_Usuario item)
    {
        string json = JsonSerializer.Serialize(item);
        RequestDTO_Usuario? registro = JsonSerializer.Deserialize<RequestDTO_Usuario>(json);

        List<string> mensajes = new List<string>();
        string? error = null;

        if (registro is not null)
        {
            DocumentoAdjunto<RequestDTO_Usuario>? result = await MostrarFormulario(registro, $"Editar registro de {registro.UsuNombre}");

            if (result is not null)
            {
                HttpResponseMessage response = await servicioUsuario.EditDataAsync(result.Value);
                if (response.IsSuccessStatusCode)
                {
                    foreach (KeyValuePair < TipoDocumento,IBrowserFile?> documento in result.Files)
                    {
                        if (documento.Value is null) continue;

                        error = await servicioArchivos.SubirDocumento(documento.Key, documento.Value);

                        if(error is not null)
                        {
                            mensajes.Add(error);
                        }
                    }

                    await CargarLista(result.Value.IdUsuario);

                    debug += Environment.NewLine + string.Join(Environment.NewLine, mensajes);
                }
            }
        }
    } //EDITAR

    private async Task CambiarStatus(RequestDTO_Usuario item, bool status)
    {
        string des = status ? "" : "des";

        bool result = await DialogModalService.OpenAsync<ConfirmarDlg>
            (
                "Confirmar",
                new Dictionary<string, object>()
                                            {
                    {"mensaje" , $"¿Desea {des}habilitar el registro de {item.UsuNombre} {item.UsuPrimerApellido} {item.UsuSegundoApellido}?" }
                                            },
                new DialogOptions() { ShowClose = false }
            );

        if (result)
        {
            HttpResponseMessage response = await servicioUsuario.EnableDisableDataByIdAsync(item.IdUsuario, status);
            if (response.IsSuccessStatusCode)
            {
                await CargarLista(item.IdUsuario);
            }
        }
    } //CAMBIAR STATUS

    async Task OnPage(PagerEventArgs args)
    {
        //
    }
}

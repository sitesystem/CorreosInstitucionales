@page "/catalogo/usuarios"

@attribute [Authorize(Policy = "[Rol] Ambos")]

<PageTitle>@Title</PageTitle>

<div class="p-4 rounded-1 bg-white shadow">
        
    <div class="row mb-4">
        <div class="col-10">
            <h1>@Title</h1>
        </div>

        @if (cargado)
        {
            <div class="col-2">
                <button type="button" class="btn btn-primary form-control" @onclick="Agregar">
                    Agregar...
                </button>
            </div>
        }
    </div>

    @if(!cargado)
    {
        <Carga/>
    }

    <RadzenDataGrid @ref="oUsuariosRef" Data="@items" @bind-Value="@selectedItems" TItem="RequestDTO_Usuario" Density="@Density"
                    IsLoading="@isLoading" Page="@OnPage" Sort="@ShowLoading" Group="@ShowLoading" Filter="@ShowLoading"
                    AllowFiltering="true" AllowColumnResize="true" AllowColumnReorder="true" AllowAlternatingRows="true" AllowSorting="true"
                    AllowColumnPicking="true" ColumnsPickerAllowFiltering="true" AllowPickAllColumns="true"
                    AllowPaging="true" PageSize="10" PagerPosition="PagerPosition.TopAndBottom" PagerHorizontalAlign="HorizontalAlign.Center" PagerAlwaysVisible="true"
                    PageSizeOptions="@(new int[] { 10, 25, 50, 100, 500 })" PageSizeText="registros por página" ShowPagingSummary="true" PagingSummaryFormat="Mostrando página {0} de {1} <b>(Total {2} registros)</b>"
                    AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true" AllowVirtualization="true" GridLines="DataGridGridLines.Both"
                    FilterMode="FilterMode.Advanced" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And"
                    FilterText="Filtrar" EqualsText="Igual a..." NotEqualsText="Distinto de..." ContainsText="Contiene..." StartsWithText="Comienza con..." EndsWithText="Termina con..." DoesNotContainText="No contiene..."
                    IsNullText="Es nulo" IsEmptyText="Es vacío" IsNotNullText="No es nulo" IsNotEmptyText="No es vacío" AndOperatorText="Y" OrOperatorText="O"
                    GreaterThanText="Mayor que" GreaterThanOrEqualsText="Mayor o igual que" LessThanText="Menor que" LessThanOrEqualsText="Menor o igual que"
                    ClearFilterText="Quitar Filtro" ApplyFilterText="Aplicar"
                    ColumnsShowingText="columnas visibles" AllColumnsText="Todas las columnas" ColumnsText="Mostrar columnas"
                    ColumnWidth="500px" SelectionMode="DataGridSelectionMode.Single"
                    RowRender="@RowRender" ExpandMode="DataGridExpandMode.Single" RowExpand="RowExpand"
                    AllowGrouping="true" Render="@OnRender" GroupRowRender="OnGroupRowRender" HideGroupedColumn="true" ShowGroupExpandColumn="true"
                    GroupPanelText="Arrastra y suelta aquí un encabezado de una columna para agrupar sus datos."
                    Visible="@cargado">
        <HeaderTemplate>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch" JustifyContent="JustifyContent.SpaceBetween" Gap="10px" Wrap="FlexWrap.Wrap" class="">
                <button class="btn btn-secondary" @onclick="LoadList">
                    @* <RadzenIcon Icon="refresh" IconColor="@Colors.White" IconStyle="IconStyle.Warning" Style="font-size:20px;" /> *@
                    Recargar Listado
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z" />
                        <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466" />
                    </svg>
                </button>
                <RadzenSplitButton Icon="ios_share" Text="Exportar a Excel" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Variant="Variant.Flat" BusyText="Exportando a Excel..." IsBusy="@busy_export_excel" class="rz-shadow-4"
                                   Click="@(async (args) => await Export(args, "excel"))">
                    <ChildContent>
                        <RadzenSplitButtonItem Icon="grid_on" Text="Todos los registros" Value="Todos los registros" Style="cursor:pointer;" />
                    </ChildContent>
                </RadzenSplitButton>
                @* <RadzenButton Text="Export CSV" Icon="wrap_text" Click="@(async () => await Export("csv"))" /> *@
                <RadzenSelectBar @bind-Value="@Density" TextProperty="Text" ValueProperty="Value" Visible="false"
                                 Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small">
                </RadzenSelectBar>
            </RadzenStack>
        </HeaderTemplate>
        <Template Context="data">
            <RadzenTabs>
                <Tabs>
                    <RadzenTabsItem Text="Solicitudes">
                        @if (!cargadoSolicitudes)
                        {
                            <Carga />
                        }
                        else
                        {
                            <RadzenDataGrid @ref="oSolicitudesRef" Data="@oSolicitud?.Data" @bind-Value="@selectedItemsSolicitudes" TItem="RequestDTO_Solicitud" Density="@Density"
                                            IsLoading="@isLoading" Page="@OnPage" Sort="@ShowLoading" Group="@ShowLoading" Filter="@ShowLoading"
                                            AllowFiltering="true" AllowColumnResize="true" AllowColumnReorder="true" AllowAlternatingRows="true" AllowSorting="true"
                                            AllowColumnPicking="true" ColumnsPickerAllowFiltering="true"
                                            AllowPaging="true" PageSize="10" PagerPosition="PagerPosition.TopAndBottom" PagerHorizontalAlign="HorizontalAlign.Center" PagerAlwaysVisible="true"
                                            PageSizeOptions="@(new int[] { 10, 25, 50, 100 })" PageSizeText="registros por página" ShowPagingSummary="true" PagingSummaryFormat="Mostrando página {0} de {1} <b>(Total {2} registros)</b>"
                                            AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true" AllowVirtualization="true" GridLines="DataGridGridLines.Both"
                                            FilterMode="FilterMode.Advanced" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And"
                                            FilterText="Filtrar" EqualsText="Igual a..." NotEqualsText="Distinto de..." ContainsText="Contiene..." StartsWithText="Comienza con..." EndsWithText="Termina con..." DoesNotContainText="No contiene..."
                                            IsNullText="Es nulo" IsEmptyText="Es vacío" IsNotNullText="No es nulo" IsNotEmptyText="No es vacío" AndOperatorText="Y" OrOperatorText="O"
                                            GreaterThanText="Mayor que" GreaterThanOrEqualsText="Mayor o igual que" LessThanText="Menor que" LessThanOrEqualsText="Menor o igual que"
                                            ClearFilterText="Quitar Filtro" ApplyFilterText="Aplicar"
                                            ColumnsShowingText="columnas visibles" AllColumnsText="Todas las columnas" ColumnsText="Mostrar columnas"
                                            ColumnWidth="300px" SelectionMode="DataGridSelectionMode.Single"
                                            AllowGrouping="true" GroupRowRender="OnGroupRowRender" HideGroupedColumn="true" ShowGroupExpandColumn="true"
                                            GroupPanelText="Arrastra y suelta aquí un encabezado de una columna para agrupar sus datos.">
                                <HeaderTemplate>
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch" JustifyContent="JustifyContent.SpaceBetween" Gap="10px" class="">
                                        <RadzenSelectBar @bind-Value="@Density" TextProperty="Text" ValueProperty="Value" Visible="false"
                                                         Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small">
                                        </RadzenSelectBar>
                                    </RadzenStack>
                                </HeaderTemplate>
                                <Columns>
                                    <RadzenDataGridColumn Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px" Pickable="false">
                                        <Template Context="dataSolicitud">
                                            <RadzenBadge Variant="Variant.Flat" Text="@($"{oSolicitud?.Data?.IndexOf(dataSolicitud) + 1}")" BadgeStyle="@(BadgeStyle.Dark)" Shade="@(Shade.Darker)" IsPill="false" class="" />
                                        </Template>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="# Ticket" Property="IdSolicitudTicket" Pickable="false"
                                      Filterable="true" FilterMode="FilterMode.CheckBoxList" Frozen="true" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="150px">
                                        <Template Context="dataSolicitud">
                                            <h4 class="text-wrap">@dataSolicitud.IdSolicitudTicket</h4>
                                        </Template>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Tipo / Motivo de Solicitud" Property="SolIdTipoSolicitudNavigation.TiposolDescripcion" Pickable="false"
                                                          Filterable="true" FilterMode="FilterMode.CheckBoxList" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="300px">
                                        <HeaderTemplate>
                                            <RadzenButton Text="SOLICITUD" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                                          MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                                        Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                                        Text = "<b>Tipo / Motivo de Solicitud</b><br>Filtro y búsqueda por el tipo o motivo de Solicitud.",
                                                                        Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                                        </HeaderTemplate>
                                        <Template Context="dataSolicitud">
                                            <div class="text-start text-wrap">
                                                <strong>@dataSolicitud.SolIdTipoSolicitudNavigation!.TiposolDescripcion</strong>
                                                <p style="white-space: pre-wrap; text-align: justify;" class="my-3">@dataSolicitud.SolObservacionesSolicitud</p>
                                                <div class="text-end">@dataSolicitud.SolFechaHoraCreacion.ToString("dddd',' dd/MMMM/yyyy HH:mm:ss 'hrs.'")</div>
                                            </div>
                                        </Template>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Estado" Property="SolIdEstadoSolicitudNavigation.EdosolNombreEstado" Pickable="false"
                                                          Filterable="true" FilterMode="@(FilterMode.CheckBoxList)" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="300px">
                                        <HeaderTemplate>
                                            @{
                                                string content = $@"
                                                                    - Solicitudes Pendientes: <b>{oSolicitud?.Data?.Where(st => st.SolIdEstadoSolicitud == 2).Count()}</b><br />
                                                                    - Solicitudes en Proceso: <b>{oSolicitud?.Data?.Where(st => st.SolIdEstadoSolicitud == 3).Count()}</b><br />
                                                                    - Solicitudes Finalizadas: <b>{oSolicitud?.Data?.Where(st => st.SolIdEstadoSolicitud == 4).Count()}</b><br />
                                                                    - Solicitudes con Encuestas Contestadas: <b>{oSolicitud?.Data?.Where(st => st.SolIdEstadoSolicitud == 5).Count()}</b><br />
                                                                    - Solicitudes Canceladas: <b>{oSolicitud?.Data?.Where(st => st.SolIdEstadoSolicitud == 6).Count()}</b>";
                                            }
                                            @* <span data-bs-toggle="popover" data-bs-trigger="hover" data-bs-placement="top" data-bs-custom-class="popover-dark" class="d-block"
                                                    title="@($@"<b>{items.Count()}</b> Solicitudes <strong>Atendidas</strong>")" data-bs-content="@(content)">
                                                    Estado
                                                </span> *@
                                            <RadzenButton Text="ESTADO" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                                          MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                                        Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                                        Text = $@"<b>{oSolicitud?.Data?.Count()}</b> Solicitudes <strong>Totales</strong><br/>{content}",
                                                                        Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                                        </HeaderTemplate>
                                        <Template Context="dataSolicitud">
                                            <div class="text-start text-wrap">
                                                @{
                                                    BadgeStyle style = new();
                                                    Shade shade = new();
                                                    string icon = "";
                                                    
                                                    if (dataSolicitud.SolIdEstadoSolicitud == 2)        // PENDIENTE
                                                    {
                                                        style = BadgeStyle.Warning;
                                                        shade = Shade.Default;
                                                        icon = "hourglass_top";
                                                    }
                                                    else if (dataSolicitud.SolIdEstadoSolicitud == 3)   // EN PROCESO
                                                    {
                                                        style = BadgeStyle.Info;
                                                        shade = Shade.Light;
                                                        icon = "settings";
                                                    }
                                                    else if (dataSolicitud.SolIdEstadoSolicitud == 4)   // ATENDIDO / FINALIZADO
                                                    {
                                                        style = BadgeStyle.Success;
                                                        shade = Shade.Light;
                                                        icon = "check";
                                                    }
                                                    else if (dataSolicitud.SolIdEstadoSolicitud == 5)   // ENCUESTA DE CALIDAD RESPONDIDA
                                                    {
                                                        style = BadgeStyle.Warning;
                                                        shade = Shade.Light;
                                                        icon = "star_rate";
                                                    }
                                                    else if (dataSolicitud.SolIdEstadoSolicitud == 6)   // CANCELADA
                                                    {
                                                        style = BadgeStyle.Danger;
                                                        shade = Shade.Light;
                                                        icon = "close";
                                                    }
                                                }
                                                <div class="text-center">
                                                    <RadzenBadge Variant="Variant.Flat" Shade="@(shade)" BadgeStyle="@(style)" Text="" IsPill="true" class="rz-display-block rz-ms-2">
                                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.NoWrap" Gap="0.25rem" Style="padding: 0 0.25rem 0 0; text-transform: none;">
                                                            <RadzenIcon Icon="@(icon)" />
                                                            @dataSolicitud.SolIdEstadoSolicitudNavigation!.EdosolNombreEstado
                                                        </RadzenStack>
                                                    </RadzenBadge>
                                                </div>
                                                @* <strong>@item.SolIdEstadoSolicitudNavigation!.EdosolNombreEstado</strong> *@
                                                <p style="white-space: pre-wrap; text-align: justify;" class="mt-3">@dataSolicitud.SolRespuestaDcyC</p>
                                                <div class="text-end">
                                                    @(!string.IsNullOrEmpty(dataSolicitud.SolFechaHoraActualizacion.ToString()) && dataSolicitud.SolIdEstadoSolicitud != 5 ? dataSolicitud.SolFechaHoraActualizacion?.ToString("dddd',' dd/MMMM/yyyy HH:mm:ss 'hrs.'") : "")
                                                </div>
                                            </div>
                                        </Template>
                                        <FooterTemplate>
                                            <div class="text-start">
                                                <small>- Solicitudes Pendientes: <b>@oSolicitud?.Data?.Where(st => st.SolIdEstadoSolicitud == 2).Count()</b></small><br />
                                                <small>- Solicitudes en Proceso: <b>@oSolicitud?.Data?.Where(st => st.SolIdEstadoSolicitud == 3).Count()</b></small><br />
                                                <small>- Solicitudes Finalizadas: <b>@oSolicitud?.Data?.Where(st => st.SolIdEstadoSolicitud == 4).Count()</b></small><br />
                                                <small>- Solicitudes con Encuestas Contestadas: <b>@oSolicitud?.Data?.Where(st => st.SolIdEstadoSolicitud == 5).Count()</b></small><br />
                                                <small>- Solicitudes Canceladas: <b>@oSolicitud?.Data?.Where(st => st.SolIdEstadoSolicitud == 6).Count()</b></small><br />
                                                <small>de <b>@oSolicitud?.Data?.Count()</b> Solicitudes <strong>Totales.</strong></small>
                                            </div>
                                        </FooterTemplate>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Encuesta de Calidad" Property="SolEncuestaCalidadComentarios" Pickable="false"
                                                          Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="250px">
                                        <Template Context="dataSolicitud">
                                            <div class="text-center text-wrap">
                                                @if (dataSolicitud.SolEncuestaCalidadCalificacion is null)
                                                {
                                                    <text>(Sin contestar)</text>
                                                }
                                                else
                                                {
                                                    <img class="d-inline mb-2" src="img/calidad/@(dataSolicitud.SolEncuestaCalidadCalificacion).png" />
                                                    <p style="white-space: pre-wrap;" class="mt-2">@dataSolicitud.SolEncuestaCalidadComentarios</p>
                                                    <div>@dataSolicitud.SolFechaHoraEncuesta?.ToString("dddd',' dd/MMMM/yyyy HH:mm:ss 'hrs.'")</div>
                                                }
                                            </div>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                                <EmptyTemplate>
                                    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No hay registros encontrados para mostrar.</p>
                                </EmptyTemplate>
                            </RadzenDataGrid>
                        }
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </Template>
        <Columns>
            <RadzenDataGridColumn Title="#" Filterable="false" Frozen="true" Sortable="false" TextAlign="TextAlign.Center" Width="50px" Pickable="false">
                <Template Context="item">
                    <RadzenBadge Variant="Variant.Flat" Text="@($"{items.IndexOf(item) + 1}")" BadgeStyle="@(BadgeStyle.Danger)" Shade="@(Shade.Dark)" IsPill="false" class="" />
                </Template>
                <FooterTemplate>
                    <RadzenButton Text="#" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>#</b><br>Número consecutivo.",
                                                Position = TooltipPosition.Bottom }))" />
                </FooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="ID" Property="@nameof(RequestDTO_Usuario.IdUsuario)" Pickable="false"
                                  Filterable="true" FilterMode="FilterMode.CheckBoxList" Frozen="true" Reorderable="true" Resizable="false" Sortable="true" TextAlign="TextAlign.Center" Width="80px">
                <Template Context="item">
                    <h5 class="text-wrap">@item.IdUsuario</h5>
                </Template>
                <FooterTemplate>
                    <RadzenButton Text="ID" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>ID</b><br>Llave Primaria / Identificador Único.",
                                                Position = TooltipPosition.Bottom }))" />
                </FooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Nombre Completo" Property="@(nameof(RequestDTO_Usuario.UsuNombres))" Pickable="false"
                                  Filterable="true" Frozen="true" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Start" Width="200px">
                <HeaderTemplate>
                    @* <span data-bs-toggle="popover" data-bs-trigger="hover" data-bs-placement="top" data-bs-custom-class="popover-dark" class="d-block"
                          title="<b>Datos del Solicitante</b>" data-bs-content="Filtro y búsqueda por el CURP.">
                        Solicitante (filtro y búsqueda por el CURP)
                    </span> *@
                    <RadzenButton Text="NOMBRE COMPLETO (Filtro y búsqueda por el Nombre de pila)" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Nombre Completo</b><br>Filtro y búsqueda por el Nombre de pila.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    @if (item.UsuStatus)
                    {
                        <div class="text-wrap">
                            <text>
                                <strong>@item.UsuNombres @item.UsuPrimerApellido @item.UsuSegundoApellido</strong>
                            </text>
                            <br />
                            <small>
                                @item.UsuIdTipoPersonalNavigation?.TipoperNombre
                                @(item.UsuIdTipoPersonal == 2 ? $@" en {item.UsuAnioEgreso} " : "")
                                <div class="text-end">
                                    <b>Alta:</b> @item.UsuFechaHoraAlta.ToString("dd/MMM/yyyy HH:mm 'hrs.'")
                                </div>
                            </small>
                        </div>
                    }
                    else
                    {
                        <div class="text-wrap">
                            <del>
                                <strong>@item.UsuNombres @item.UsuPrimerApellido @item.UsuSegundoApellido</strong>
                            </del>
                            <br />
                            <small>
                                @item.UsuIdTipoPersonalNavigation?.TipoperNombre
                                @(item.UsuIdTipoPersonal == 2 ? $@" en {item.UsuAnioEgreso} " : "")
                                <div class="text-end">
                                    <b>Alta:</b> @item.UsuFechaHoraAlta.ToString("dd/MMM/yyyy HH:mm 'hrs.'")
                                </div>
                            </small>
                        </div>
                    }
                </Template>
                <FooterTemplate>
                    <RadzenButton Text="NOMBRE COMPLETO (Filtro y búsqueda por el Nombre de pila)" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Nombre Completo</b><br>Filtro y búsqueda por el Nombre de pila.",
                                                Position = TooltipPosition.Bottom }))" />
                </FooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="CURP" Property="@nameof(RequestDTO_Usuario.UsuCurp)" Pickable="false"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="120px">
                <HeaderTemplate>
                    <RadzenButton Text="CURP" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>CURP</b><br>Filtro y búsqueda por el CURP.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <FooterTemplate>
                    <RadzenButton Text="CURP" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>CURP</b><br>Filtro y búsqueda por el CURP.",
                                                Position = TooltipPosition.Bottom }))" />
                </FooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Boleta de Licenciatura" Property="@nameof(RequestDTO_Usuario.UsuBoletaAlumnoEgresado)" Pickable="false"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="100px">
                <HeaderTemplate>
                    <RadzenButton Text="BOLETA LICENCIATURA" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Boleta Licenciatura</b><br>Filtro y búsqueda por la Boleta de Licenciatura.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-wrap">
                        @((item.UsuIdTipoPersonal == 1 || item.UsuIdTipoPersonal == 2) ? $"{item.UsuBoletaAlumnoEgresado}" : "sin asignar")
                    </div>
                </Template>
                <FooterTemplate>
                    <RadzenButton Text="BOLETA LICENCIATURA" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Boleta Licenciatura</b><br>Filtro y búsqueda por la Boleta de Licenciatura.",
                                                Position = TooltipPosition.Bottom }))" />
                </FooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="No. de Celular" Property="UsuNoCelularActual" Pickable="false"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Visible="true" Width="110px">
                <HeaderTemplate>
                    <RadzenButton Text="NO. CELULAR (Filtro y búsqueda por el No. Celular Actual)" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>No. de Celular</b><br>Filtro y búsqueda por el No. Celular Actual",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-end text-wrap">
                        <strong>Actual:</strong> @(!string.IsNullOrEmpty(item.UsuNoCelularActual) ? @$"{@item.UsuNoCelularActual}" : "no asignado")
                        <br />
                        <strong>Anterior:</strong> @(!string.IsNullOrEmpty(item.UsuNoCelularAnterior) ? $"{@item.UsuNoCelularAnterior}" : "no asignado")
                    </div>
                </Template>
                <FooterTemplate>
                    <RadzenButton Text="NO. CELULAR (Filtro y búsqueda por el No. Celular Actual)" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>No. de Celular</b><br>Filtro y búsqueda por el No. Celular Actual",
                                                Position = TooltipPosition.Bottom }))" />
                </FooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Correo Electrónico Personal" Property="UsuCorreoPersonalCuentaActual" Pickable="false"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="150px">
                <HeaderTemplate>
                    <RadzenButton Text="CORREO PERSONAL (Filtro y búsqueda por el Correo Electrónico Personal Actual)" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Correo Electrónico Personal</b><br>Filtro y búsqueda por el Correo Electrónico Personal Actual",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-start text-wrap">
                        <strong>Actual:</strong> @(!string.IsNullOrEmpty(item.UsuCorreoPersonalCuentaActual) ? @$"{@item.UsuCorreoPersonalCuentaActual}" : "no asignado")
                        <br />
                        <strong>Anterior:</strong> @(!string.IsNullOrEmpty(item.UsuCorreoPersonalCuentaAnterior) ? $"{@item.UsuCorreoPersonalCuentaAnterior}" : "no asignado")
                    </div>
                </Template>
                <FooterTemplate>
                    <RadzenButton Text="CORREO PERSONAL (Filtro y búsqueda por el Correo Electrónico Personal Actual)" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Correo Electrónico Personal</b><br>Filtro y búsqueda por el Correo Electrónico Personal Actual",
                                                Position = TooltipPosition.Bottom }))" />
                </FooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Correo Institucional" Property="UsuCorreoInstitucionalCuenta" Pickable="false"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="150px">
                <HeaderTemplate>
                    <RadzenButton Text="CORREO INSTITUCIONAL" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Correo Institucional</b><br>Filtro y búsqueda por el Correo Institucional",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-end">
                        <text>
                            <strong>@(!string.IsNullOrEmpty(item.UsuCorreoInstitucionalCuenta) ? $"{item.UsuCorreoInstitucionalCuenta}" : "sin correo institucional")</strong>
                            <br />
                            @(!string.IsNullOrEmpty(item.UsuCorreoInstitucionalContrasenia) ? $"{item.UsuCorreoInstitucionalContrasenia}" : "sin contraseña")
                        </text>
                    </div>
                </Template>
                <FooterTemplate>
                    <RadzenButton Text="CORREO INSTITUCIONAL" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Correo Institucional</b><br>Filtro y búsqueda por el Correo Institucional",
                                                Position = TooltipPosition.Bottom }))" />
                </FooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Carrera / Licenciatura" Property="UsuIdCarreraNavigation.CarrNombre"
                                  Filterable="true" FilterMode="FilterMode.CheckBoxList" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="100px" Visible="false">
                <HeaderTemplate>
                    <RadzenButton Text="CARRERA / LICENCIATURA" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Carrera / Licenciatura</b><br>Filtro y búsqueda por la Carrera / Licenciatura.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-wrap">
                        @((item.UsuIdTipoPersonal == 1 || item.UsuIdTipoPersonal == 2) ? $"{item.UsuIdCarreraNavigation?.CarrNombre}" : "sin asignar")
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Semestre" Property="UsuSemestre"
                                  Filterable="true" FilterMode="FilterMode.CheckBoxList" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="100px" Visible="false">
                <HeaderTemplate>
                    <RadzenButton Text="SEMESTRE" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Semestre</b><br>Filtro y búsqueda por el Semestre.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-wrap">
                        @((item.UsuIdTipoPersonal == 1 || item.UsuIdTipoPersonal == 2 || item.UsuIdTipoPersonal == 3) ? $"{item.UsuSemestre}" : "-")
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Boleta Posgrado" Property="UsuBoletaPosgrado"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="100px" Visible="false">
                <HeaderTemplate>
                    <RadzenButton Text="BOLETA POSGRADO" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Boleta Posgrado</b><br>Filtro y búsqueda por la Boleta de Posgrado.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-wrap">
                        @((item.UsuIdTipoPersonal == 3) ? $"{item.UsuBoletaPosgrado}" : "sin asignar")
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="No. de Empleado / Contrato" Property="UsuNumeroEmpleadoContrato"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="100px" Visible="false">
                <HeaderTemplate>
                    <RadzenButton Text="NO. EMPLEADO / CONTRATO" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>No. de Empleado / Contrato</b><br>Filtro y búsqueda por el No. de Empleado / Contrato.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-wrap">
                        @((item.UsuIdTipoPersonal == 4 || item.UsuIdTipoPersonal == 5 || item.UsuIdTipoPersonal == 6) ? $"{item.UsuNumeroEmpleadoContrato}" : "-")
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Área / Departamento" Property="UsuIdAreaDeptoNavigation.AreNombreAreaDepto"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="100px" Visible="false">
                <HeaderTemplate>
                    <RadzenButton Text="ÁREA / DEPARTAMENTO" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>Área / Departamento</b><br>Filtro y búsqueda por el Área / Departamento.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-wrap">
                        @((item.UsuIdTipoPersonal == 4 || item.UsuIdTipoPersonal == 5 || item.UsuIdTipoPersonal == 6) ? $"{item.UsuIdAreaDeptoNavigation?.AreNombreAreaDepto}" : "sin asignar")
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="No. Extensión" Property="@(nameof(RequestDTO_Usuario.UsuNoExtensionActual))"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="100px" Visible="false">
                <HeaderTemplate>
                    <RadzenButton Text="NO. EXTENSIÓN" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>No. de Extensión</b><br>Filtro y búsqueda por el<br>Número de Extensión.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Title="Acciones" Pickable="false"
                                  Filterable="false" Frozen="true" Reorderable="false" Resizable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px"
                                  Visible=@puede_editar>
                <Template Context="item">
                    <RadzenButton title="Editar..."
                                  Icon="edit"
                                  ButtonStyle="ButtonStyle.Info"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Click="@(async ()=> await Editar(item))" @onclick:stopPropagation="true">
                    </RadzenButton>

                    <RadzenButton title="Deshabilitar"
                                  Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Visible="item.UsuStatus.Equals(true)"
                                  Click="@(async ()=> await CambiarStatus(item, false))" @onclick:stopPropagation="true">
                    </RadzenButton>

                    <RadzenButton title="Habilitar"
                                  ButtonStyle="ButtonStyle.Success"
                                  Icon="autorenew"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Visible="item.UsuStatus.Equals(false)"
                                  Click="@(async ()=> await CambiarStatus(item, true))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No hay registros encontrados para mostrar.</p>
        </EmptyTemplate>
    </RadzenDataGrid>
</div>

@code
{
    private string Title = "Usuarios";
    private bool cargado { get; set; } = false;
    private bool cargadoSolicitudes { get; set; } = false;
    private bool isLoading = false;

    private List<RequestDTO_Usuario> items = new();
    private RadzenDataGrid<RequestDTO_Usuario>? oUsuariosRef = new();
    private IList<RequestDTO_Usuario> selectedItems = new List<RequestDTO_Usuario>();

    private Response<List<RequestDTO_Solicitud>>? oSolicitud = new();
    private RadzenDataGrid<RequestDTO_Solicitud>? oSolicitudesRef = new();
    private IList<RequestDTO_Solicitud> selectedItemsSolicitudes = new List<RequestDTO_Solicitud>();

    private bool puede_editar { get; set; } = true;
    private bool puede_agregar { get; set; } = false;

    public List<RequestViewModel_AreaDepto> cat_UsuIdAreaDepto { get; private set; } = new List<RequestViewModel_AreaDepto>();
    public List<RequestViewModel_Carrera> cat_UsuIdCarrera { get; private set; } = new List<RequestViewModel_Carrera>();
    public List<RequestViewModel_Rol> cat_UsuIdRol { get; private set; } = new List<RequestViewModel_Rol>();
    public List<RequestViewModel_TipoPersonal> cat_UsuIdTipoPersonal { get; private set; } = new List<RequestViewModel_TipoPersonal>();

    string debug = string.Empty;
    Density Density = Density.Default;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JSRuntime.InvokeVoidAsync("blazorInit");

        if (firstRender)
        {
            items = await WebUtils.ListByStatusAsync(servicioUsuario, false);
            cat_UsuIdAreaDepto = await WebUtils.ListByStatusAsync(servicioAreaDepto);
            cat_UsuIdCarrera = await WebUtils.ListByStatusAsync(servicioCarrera);
            cat_UsuIdRol = await WebUtils.ListByStatusAsync(servicioRol);
            cat_UsuIdTipoPersonal = await WebUtils.ListByStatusAsync(servicioTipoPersonal);

            cargado = true;

            StateHasChanged();
        }
    }

    private async Task CargarLista(int? selecccionar_id = null)
    {
        items = await WebUtils.ListByStatusAsync(servicioUsuario, false);

        if (selecccionar_id is not null)
            selectedItems = items.Where(i => (i.IdUsuario == selecccionar_id)).ToList();
    }

    private async Task LoadList()
    {
        cargado = false;
        StateHasChanged();

        items = await WebUtils.ListByStatusAsync(servicioUsuario, false);

        cargado = true;
        StateHasChanged();
    }

    private async Task<DocumentoAdjunto<RequestDTO_Usuario>?> MostrarFormulario(RequestDTO_Usuario registro, string titulo_ventana)
    {
        return await DialogModalService.OpenAsync<UsuarioEditor>
                (
                    titulo_ventana,
                    new Dictionary<string, object>()
                    {
                        {"registro", registro},
                        {"cat_UsuIdAreaDepto", cat_UsuIdAreaDepto},
                        {"cat_UsuIdCarrera", cat_UsuIdCarrera},
                        {"cat_UsuIdRol", cat_UsuIdRol},
                        {"cat_UsuIdTipoPersonal", cat_UsuIdTipoPersonal}
                    },
                    new DialogOptions()
                    {
                        ShowClose = false,
                        Width = "75%"
                    }
                );
    }

    private void MensajeCarga()
    {
        DialogModalService.OpenAsync<Carga>
        (
            "Cargando...",
            new Dictionary<string, object>(),
            new DialogOptions() { ShowClose = false, Width = "64px" }
        );
    }

    private async Task Agregar()
    {
        RequestDTO_Usuario registro = EntityUtils.DefaultUsuario();

        DocumentoAdjunto<RequestDTO_Usuario>? result = await MostrarFormulario(registro, "Agregar Usuario");

        if (result is not null)
        {
            MensajeCarga();

            result.Value.UsuCurp = result.Value.UsuCurp.ToUpper();
            result.Value.UsuNombres = result.Value.UsuNombres.ToUpper();
            result.Value.UsuPrimerApellido = result.Value.UsuPrimerApellido.ToUpper();
            result.Value.UsuSegundoApellido = result.Value.UsuSegundoApellido?.ToUpper();
            result.Value.UsuCorreoPersonalCuentaActual = result.Value.UsuCorreoPersonalCuentaActual.ToLower();
            result.Value.UsuContrasenia = Encrypt.GetSHA256(result.Value.UsuContrasenia);

            HttpResponseMessage response = await servicioUsuario.AddDataAsync(result.Value);
            if (response.IsSuccessStatusCode)
            {
                await CargarLista(result.Value.IdUsuario);
            }

            DialogModalService.Close();
        }
    } // AGREGAR

    private async Task Editar(RequestDTO_Usuario item)
    {
        item.UsuIdRolNavigation = null;
        item.UsuIdTipoPersonalNavigation = null;
        item.UsuIdCarreraNavigation = null;
        item.UsuIdAreaDeptoNavigation = null;

        string json = JsonSerializer.Serialize(item);
        RequestDTO_Usuario? registro = JsonSerializer.Deserialize<RequestDTO_Usuario>(json);

        List<string> mensajes = new();
        string? error = null;

        if (registro is not null)
        {
            DocumentoAdjunto<RequestDTO_Usuario>? result = await MostrarFormulario(registro, $"Editar registro de {registro.UsuNombres}");

            if (result is not null)
            {
                HttpResponseMessage response = await servicioUsuario.EditDataAsync(result.Value);
                if (response.IsSuccessStatusCode)
                {
                    foreach (KeyValuePair < TipoDocumento,IBrowserFile?> documento in result.Files)
                    {
                        if (documento.Value is null) continue;

                        error = await servicioArchivos.SubirDocumento(documento.Key, documento.Value);

                        if(error is not null)
                        {
                            mensajes.Add(error);
                        }
                    }

                    await CargarLista(result.Value.IdUsuario);

                    debug += Environment.NewLine + string.Join(Environment.NewLine, mensajes);
                }
            }
        }
    } //EDITAR

    private async Task CambiarStatus(RequestDTO_Usuario item, bool status)
    {
        string des = status ? "" : "des";

        bool result = await DialogModalService.OpenAsync<ConfirmarDlg>
            (
                "Confirmar",
                new Dictionary<string, object>()
                {
                    { "mensaje" , $"¿Desea {des}habilitar el registro de {item.UsuNombres} {item.UsuPrimerApellido} {item.UsuSegundoApellido}?" }
                },
                new DialogOptions() { ShowClose = false }
            );

        if (result)
        {
            HttpResponseMessage response = await servicioUsuario.EnableDisableDataByIdAsync(item.IdUsuario, status);
            if (response.IsSuccessStatusCode)
            {
                await CargarLista(item.IdUsuario);
            }
        }
    } //CAMBIAR STATUS

    async Task OnPage(PagerEventArgs args)
    {
        isLoading = true;
        await Task.Yield();
        isLoading = false;
    }

    async Task ShowLoading()
    {
        isLoading = true;
        await Task.Yield();
        isLoading = false;
    }

    async Task ToggleRowsExpand(bool? value)
    {
        if (value == true)
            await oUsuariosRef!.ExpandRows(oUsuariosRef.PagedView);
        else if (value == false)
            await oUsuariosRef!.CollapseRows(oUsuariosRef.PagedView);
    }

    void RowRender(RowRenderEventArgs<RequestDTO_Usuario> args)
    {
        args.Expandable = true;
        // args.Expandable = args.Data.ShipCountry == "France" || args.Data.ShipCountry == "Brazil";
    }

    async Task RowExpand(RequestDTO_Usuario oUsuario)
    {
        if (oUsuario is not null)
        {
            cargadoSolicitudes = false;
            StateHasChanged();
            oSolicitud = await servicioSolicitud.GetAllDataByIdUsuarioAsync(oUsuario.IdUsuario);
            cargadoSolicitudes = true;
            StateHasChanged();
        }
    }

    void OnRender(DataGridRenderEventArgs<RequestDTO_Usuario> args)
    {
        if (args.FirstRender)
        {
            // args.Grid.Groups.Add(new GroupDescriptor() { Title = "Customer", Property = "Customer.CompanyName", SortOrder = SortOrder.Descending });
            StateHasChanged();
        }
    }

    void OnGroupRowRender(GroupRowRenderEventArgs args) => args.Expanded = true;

    void ShowTooltipWithHtml(ElementReference elementReference, TooltipOptions options = null!) => TooltipService.Open(elementReference, ds => null!, options);

    bool busy_export_excel;
    public async Task Export(RadzenSplitButtonItem item, string type)
    {
        busy_export_excel = true;
        var query = new Radzen.Query();

        if (item == null)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Registros exportados a Excel", Detail = $"Usuarios" });

            query = new Radzen.Query()
            {
                OrderBy = oUsuariosRef?.Query.OrderBy,
                Filter = oUsuariosRef?.Query.Filter,
                Select = string.Join(",", oUsuariosRef!.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property))
                                .Select(c => c.Property.Contains(".") ? $"{c.Property} as {c.Property.Replace(".", "_")}" : c.Property))
            };
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Registros exportados a Excel", Detail = $"{item.Value}" });
            query = null;
        }

        navigationManager.NavigateTo(query != null ? query.ToUrl($"/api/RExportExcelCSV/export/usuarios/{type}") : $"/api/RExportExcelCSV/export/usuarios/{type}", true);

        await Task.Delay(2000);
        busy_export_excel = false;
    }
}

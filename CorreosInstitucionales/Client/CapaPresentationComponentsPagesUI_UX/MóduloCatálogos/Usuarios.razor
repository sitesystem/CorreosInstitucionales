@page "/catalogo/usuarios"
@using CorreosInstitucionales.Shared
@using CorreosInstitucionales.Shared.CapaTools

@attribute [Authorize(Policy = "[Rol] Ambos")]

@inject DialogService DialogService

<PageTitle>@Title</PageTitle>

    <div class="p-4 rounded-1 bg-white shadow">
        
        <div class="row mb-4">
            <div class="col-10">
                <h1>@Title</h1>
            </div>

        @if (cargado)
        {
            <div class="col-2">
                <button type="button" class="btn btn-primary form-control" @onclick="Agregar">
                    Agregar...
                </button>
            </div>
        }
        </div>

    @if(!cargado)
    {
        <Carga/>
    }

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@items" TItem="RequestDTO_Usuario" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedItems
                    ExpandMode="DataGridExpandMode.Single"
                    Visible=@cargado>
        <Columns>
            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Property="IdUsuario" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Frozen="false" Title="Nombre" Filterable="true" Sortable="true" TextAlign="TextAlign.Start">
                <Template Context="item">
                    @if (item.UsuStatus)
                    {
                        <text>
                            <strong>
                                @item.UsuNombre
                                @item.UsuPrimerApellido
                                @item.UsuSegundoApellido
                            </strong>
                            <br />
                            @item.UsuCurp
                        </text>
                    }
                    else
                    {
                        <del>
                            <strong>
                                @item.UsuNombre
                                @item.UsuPrimerApellido
                                @item.UsuSegundoApellido
                            </strong>
                            <br />
                            @item.UsuCurp
                        </del>
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Property="UsuCorreoPersonalCuentaNueva" Filterable="false" Title="Correo Personal" TextAlign="TextAlign.End" />

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Property="UsuCorreoInstitucionalCuenta" Filterable="false" Title="Correo Institucional" TextAlign="TextAlign.End" />

            <RadzenDataGridColumn TItem="RequestDTO_Usuario" Context="item"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Frozen="true" Width="80px"
                                  Visible=@puede_editar>
                <Template Context="item">
                    <RadzenButton title="Editar..."
                                  Icon="edit"
                                  ButtonStyle="ButtonStyle.Info"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Click="@(async ()=> await Editar(item))" @onclick:stopPropagation="true">
                    </RadzenButton>

                    <RadzenButton title="Deshabilitar"
                                  Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Visible="item.UsuStatus.Equals(true)"
                                  Click="@(async ()=> await CambiarStatus(item, false))" @onclick:stopPropagation="true">
                    </RadzenButton>

                    <RadzenButton title="Habilitar"
                                  ButtonStyle="ButtonStyle.Success"
                                  Icon="autorenew"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Visible="item.UsuStatus.Equals(false)"
                                  Click="@(async ()=> await CambiarStatus(item, true))" @onclick:stopPropagation="true">
                    </RadzenButton>

                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code
{
    private string Title = "Usuarios";
    private bool cargado { get; set; } = false;

    private List<RequestDTO_Usuario> items = new List<RequestDTO_Usuario>();
    private IList<RequestDTO_Usuario> selectedItems = new List<RequestDTO_Usuario>();

    private bool puede_editar { get; set; } = true;
    private bool puede_agregar { get; set; } = false;

    public List<RequestViewModel_AreaDepto> cat_UsuIdAreaDepto { get; private set; } = new List<RequestViewModel_AreaDepto>();
    public List<RequestViewModel_Carrera> cat_UsuIdCarrera { get; private set; } = new List<RequestViewModel_Carrera>();
    public List<RequestViewModel_Rol> cat_UsuIdRol { get; private set; } = new List<RequestViewModel_Rol>();
    public List<RequestViewModel_TipoPersonal> cat_UsuIdTipoPersonal { get; private set; } = new List<RequestViewModel_TipoPersonal>();

    string debug = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            items = await WebUtils.ListByStatusAsync(servicioUsuario, false);
            cat_UsuIdAreaDepto = await WebUtils.ListByStatusAsync(servicioAreaDepto);
            cat_UsuIdCarrera = await WebUtils.ListByStatusAsync(servicioCarrera);
            cat_UsuIdRol = await WebUtils.ListByStatusAsync(servicioRol);
            cat_UsuIdTipoPersonal = await WebUtils.ListByStatusAsync(servicioTipoPersonal);

            cargado = true;
            StateHasChanged();
        }
    }

    private async Task CargarLista(int? selecccionar_id = null)
    {
        items = await WebUtils.ListByStatusAsync(servicioUsuario, false);

        if (selecccionar_id is not null)
        {
            selectedItems = items.Where(i => (i.IdUsuario == selecccionar_id)).ToList();
        }
    }

    private async Task<DocumentoAdjunto<RequestDTO_Usuario>?> MostrarFormulario(RequestDTO_Usuario registro, string titulo_ventana)
    {
        return await DialogService.OpenAsync<UsuarioEditor>
                (
                    titulo_ventana,
                    new Dictionary<string, object>()
                    {
                        {"registro", registro},
                        {"cat_UsuIdAreaDepto",cat_UsuIdAreaDepto},
                        {"cat_UsuIdCarrera",cat_UsuIdCarrera},
                        {"cat_UsuIdRol",cat_UsuIdRol},
                        {"cat_UsuIdTipoPersonal",cat_UsuIdTipoPersonal}
                    },
                    new DialogOptions()
                        {
                            ShowClose = false,
                            Width = "75%"
                        }
                );
    }

    private void MensajeCarga()
    {
        DialogService.OpenAsync<Carga>(
                "Cargando...",
                new Dictionary<string, object>(),
                new DialogOptions() { ShowClose = false, Width = "64px" }
            );
    }

    private async Task Agregar()
    {
        RequestDTO_Usuario registro = TemplateEntity.CreateUsuario();

        DocumentoAdjunto<RequestDTO_Usuario>? result = await MostrarFormulario(registro, "Agregar Usuario");

        if (result is not null)
        {
            MensajeCarga();

            result.Value.UsuCurp = result.Value.UsuCurp.ToUpper();
            result.Value.UsuNombre = result.Value.UsuNombre.ToUpper();
            result.Value.UsuPrimerApellido = result.Value.UsuPrimerApellido.ToUpper();
            result.Value.UsuSegundoApellido = result.Value.UsuSegundoApellido ?? "".ToUpper();
            result.Value.UsuCorreoPersonalCuentaNueva = result.Value.UsuCorreoPersonalCuentaNueva.ToLower();
            result.Value.UsuContraseña = Encrypt.GetSHA256(result.Value.UsuContraseña);

            HttpResponseMessage response = await servicioUsuario.AddDataAsync(result.Value);
            if (response.IsSuccessStatusCode)
            {
                await CargarLista(result.Value.IdUsuario);
            }

            DialogService.Close();
        }
    }// AGREGAR

    private async Task Editar(RequestDTO_Usuario item)
    {
        string json = JsonSerializer.Serialize(item);
        RequestDTO_Usuario? registro = JsonSerializer.Deserialize<RequestDTO_Usuario>(json);

        List<string> mensajes = new List<string>();
        string? error = null;

        if (registro is not null)
        {
            DocumentoAdjunto<RequestDTO_Usuario>? result = await MostrarFormulario(registro, $"Editar registro de {registro.UsuNombre}");

            if (result is not null)
            {
                HttpResponseMessage response = await servicioUsuario.EditDataAsync(result.Value);
                if (response.IsSuccessStatusCode)
                {
                    foreach (KeyValuePair < TipoDocumento,IBrowserFile?> documento in result.Files)
                    {
                        if (documento.Value is null) continue;

                        error = await servicioArchivos.SubirDocumento(documento.Key, documento.Value);

                        if(error is not null)
                        {
                            mensajes.Add(error);
                        }
                    }

                    await CargarLista(result.Value.IdUsuario);

                    debug += Environment.NewLine + string.Join(Environment.NewLine, mensajes);
                }
            }
        }
    }//EDITAR

    private async Task CambiarStatus(RequestDTO_Usuario item, bool status)
    {
        string des = status ? "" : "des";

        bool result = await DialogService.OpenAsync<ConfirmarDlg>
            (
                "Confirmar",
                new Dictionary<string, object>()
                                            {
                    {"mensaje" , $"¿Desea {des}habilitar el registro de {item.UsuNombre} {item.UsuPrimerApellido} {item.UsuSegundoApellido}?" }
                                            },
                new DialogOptions() { ShowClose = false }
            );

        if (result)
        {
            HttpResponseMessage response = await servicioUsuario.EnableDisableDataByIdAsync(item.IdUsuario, status);
            if (response.IsSuccessStatusCode)
            {
                await CargarLista(item.IdUsuario);
            }
        }
    }//CAMBIAR STATUS
}

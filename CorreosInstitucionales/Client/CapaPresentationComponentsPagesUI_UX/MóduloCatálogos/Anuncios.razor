@page "/catalogo/anuncios"
@using System.Text

@attribute [Authorize(Policy = "[Rol] Ambos")]

@inject DialogService DialogService
@inject RAnuncioService servicioAnuncio;

<PageTitle>@Title</PageTitle>

<div class="p-4 rounded-1 bg-white shadow">
    <h1>@Title</h1>

    @if (trabajando)
    {
        <div class="row my-4">
            <div class="col text-center">
                <img src="logo_saci.png" class="loading_img" />
                <br />
                Cargando...
            </div>
        </div>
    }
    else
    {

        <div class="row my-3">
            <div class="offset-10 col-2">
                <button type="button" class="btn btn-primary form-control" @onclick="Agregar">
                    Agregar...
                </button>
            </div>
        </div>
    }

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@items" TItem="RequestViewModel_Anuncio" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    Visible=@(!trabajando)
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedItems>
        <Columns>
            <RadzenDataGridColumn TItem="RequestViewModel_Anuncio" Property="IdAnuncio" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />

            <RadzenDataGridColumn TItem="RequestViewModel_Anuncio" Frozen="false" Title="Anuncio" Filterable="false" TextAlign="TextAlign.Start">
                <Template Context="item">
                    @if(item.AnuArchivo != "-")
                    {
                        <img src="../banners/@item.AnuArchivo" />
                    }
                    else
                    {
                        <strong>SIN ARCHIVO</strong>
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestViewModel_Anuncio" Frozen="false" Title="Información" Filterable="false" TextAlign="TextAlign.Start">
                <Template Context="item">
                    <pre>@item.AnuDescripcion</pre>
                    @if(item.AnuVisibleDesde is not null)
                    {
                        <strong>Visible desde: </strong><br />@item.AnuVisibleDesde
                    }
                    @if(item.AnuVisibleHasta is not null)
                    {
                        <strong>Visible hasta: </strong>

                        <br />

                        @item.AnuVisibleHasta
                    }
                    </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestViewModel_Anuncio" Title="Acciones" Context="item"
                                  Filterable="false" Frozen="true" Reorderable="false" Resizable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px"
                                  Visible=@puede_editar>
                <Template Context="item">
                    <RadzenButton title="Editar..."
                                  Icon="edit"
                                  ButtonStyle="ButtonStyle.Info"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Click="@(async ()=> await Editar(item))" @onclick:stopPropagation="true">
                    </RadzenButton>

                    <RadzenButton title="Deshabilitar"
                                  Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Visible="item.AnuStatus.Equals(true)"
                                  Click="@(async ()=> await CambiarStatus(item, false))" @onclick:stopPropagation="true">
                    </RadzenButton>

                    <RadzenButton title="Habilitar"
                                  ButtonStyle="ButtonStyle.Success"
                                  Icon="autorenew"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Visible="item.AnuStatus.Equals(false)"
                                  Click="@(async ()=> await CambiarStatus(item, true))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code
{
    private string Title = "Anuncios";
    private bool trabajando { get; set; } = false;

    string debug = string.Empty;

    private bool puede_editar { get; set; } = true;
    private bool puede_agregar { get; set; } = true;

    private List<RequestViewModel_Anuncio> items = new List<RequestViewModel_Anuncio>();
    private IList<RequestViewModel_Anuncio> selectedItems = new List<RequestViewModel_Anuncio>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarLista();
        }
    }

    private async Task CargarLista()
    {
        trabajando = true;
        StateHasChanged();

        items = await WebUtils.ListByStatusAsync(servicioAnuncio, false);

        trabajando = false;
        StateHasChanged();
    }

    private async Task<FileAttachment<RequestViewModel_Anuncio>?> MostrarFormulario(RequestViewModel_Anuncio registro, string titulo_ventana)
    {
        return await DialogService.OpenAsync<AnuncioEditor>
                (
                    titulo_ventana,
                    new Dictionary<string, object>()
                                            {
                        {"registro", registro}
                                            },
                    new DialogOptions()
                        {
                            ShowClose = false,
                            Width = "50%",
                            CssClass = "dialog_simple"
                        }
                );
    }

    private void MensajeCarga()
    {
        DialogService.OpenAsync<Carga>(
                "Cargando...",
                new Dictionary<string, object>(),
                new DialogOptions() { ShowClose = false, Width = "64px" }
            );
    }

    private async Task Agregar()
    {
        RequestViewModel_Anuncio registro = TemplateEntity.CreateAnuncio();

        FileAttachment<RequestViewModel_Anuncio>? result = await MostrarFormulario(registro, "Agregar Anuncio");

        StringBuilder mensajes = new ();

        if (result is not null)
        {
            MensajeCarga();
            Response<string>? oResponse = await servicioArchivos.SubirAnuncio(result.Attachments[0]);

            mensajes.AppendLine("[SERVIDOR]");

            if (oResponse is not null)
            {
                mensajes.AppendLine(oResponse.Message);
                mensajes.AppendLine(oResponse.Data);

                if (oResponse.Success == 1)
                {
                    mensajes.AppendLine("ANUNCIO PUBLICADO");

                    result.Value.AnuArchivo = oResponse.Data ?? "ERROR";

                    HttpResponseMessage response = await servicioAnuncio.AddDataAsync(result.Value);
                    if (response.IsSuccessStatusCode)
                    {
                        mensajes.AppendLine("ANUNCIO PUBLICADO");
                    }
                    else
                    {
                        string tmp = await response.Content.ReadAsStringAsync();
                        mensajes.AppendLine(tmp);
                    }

                }
            }

            else
            {
                mensajes.AppendLine("[ERROR] NO HAY ARCHIVOS PARA SUBIR");
            }

            debug += Environment.NewLine + mensajes.ToString();

            DialogService.Close();
            await CargarLista();
        }
    }// AGREGAR

    private async Task Editar(RequestViewModel_Anuncio item)
    {
        string json = JsonSerializer.Serialize(item);
        RequestViewModel_Anuncio? registro = JsonSerializer.Deserialize<RequestViewModel_Anuncio>(json);

        if (registro is not null)
        {
            FileAttachment<RequestViewModel_Anuncio>? result = await MostrarFormulario(registro, "Editar Anuncio");

            if (result is not null)
            {
                HttpResponseMessage response = await servicioAnuncio.EditDataAsync(registro);
                if (response.IsSuccessStatusCode)
                {
                    await CargarLista();
                }
            }
        }
    }//EDITAR

    private async Task CambiarStatus(RequestViewModel_Anuncio item, bool status)
    {
        string des = status ? "" : "des";

        bool result = await DialogService.OpenAsync<ConfirmarDlg>
            (
                "Confirmar",
                new Dictionary<string, object>()
                                                {
                    {"mensaje" , $"¿Desea {des}habilitar el registro de {item.AnuDescripcion}?" }
                                                },
                new DialogOptions() { ShowClose = false }
            );

        if (result)
        {
            HttpResponseMessage response = await servicioAnuncio.EnableDisableDataByIdAsync(item.IdAnuncio, status);
            if (response.IsSuccessStatusCode)
            {
                await CargarLista();
            }
        }
    }//CAMBIAR STATUS
}

@page "/RegistroAlumnos"

@attribute [AllowAnonymous]

<style type="text/css"></style>

@if (oCarreras is not null && oCarreras.Data != null)
{
    <EditForm Model="@oUsuario" OnValidSubmit="@OnValidHandled_Registrar" OnInvalidSubmit="@OnInvalidHandled_ScrollToTop">

        <DataAnnotationsValidator />

        <!-- ******************************************************************* AVISOS ******************************************************************* -->
        <RadzenAlert Title="" AlertStyle="AlertStyle.Info" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Default" ShowIcon="true" AllowClose="false" class="rz-mt-0 rz-mb-3"
                     Visible="@(IdTipoPersonal == 1 || TipoPersonal == "alumno_inscrito" ? true : false)">
                     <b>NOTA:</b> La creación de los Correos Institucionales de los alumnos de nuevo ingreso tendrá un <strong>tiempo de espera de hasta 2 meses.</strong>
        </RadzenAlert>
        
        <RadzenAlert Title="" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.ExtraSmall" Shade="Shade.Dark" ShowIcon="true" AllowClose="false" class="rz-mb-4 rz-px-3">
            <b>NOTA:</b> Los campos subrayados de rojo son <strong>obligatorios y sin acentos.</strong>
        </RadzenAlert>

        <!-- ******************************************************************* DATOS PERSONALES ******************************************************************* -->
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Datos Personales" CollapseTitle="Datos Personales" ExpandAriaLabel="" CollapseAriaLabel="" class="rz-border-base-500 rz-border-radius-1 rz-shadow-3">
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="account_box" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Datos Personales</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <div class="row">
                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Nombre(s)" AllowFloatingLabel="false" Variant="Variant.Flat" class="w-100 mt-3" Disabled="false">
                            @* <Start><RadzenIcon Icon="person" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start> *@
                            <ChildContent>
                                <RadzenTextBox Name="@($@"names_{TipoPersonal}")" @bind-Value="@oUsuario!.UsuNombres" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="200" Placeholder="Escribe tu(s) Nombre(s)"
                                               @oninput="@((e) => oUsuario!.UsuNombres = e.Value.ToString().ToUpper())"
                                               onkeypress="return /^[a-zA-Z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                            </ChildContent>
                            <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario!.UsuNombres)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Primer Apellido" AllowFloatingLabel="false" Variant="Variant.Flat" class="w-100 mt-3">
                            @* <Start><RadzenIcon Icon="person" IconColor="@Colors.Base400" /></Start> *@
                            <ChildContent>
                                <RadzenTextBox Name="@($@"lastName1_{TipoPersonal}")" @bind-Value="@oUsuario.UsuPrimerApellido" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="150" Placeholder="Primer Apellido"
                                               @oninput="@((e) => oUsuario.UsuPrimerApellido = e.Value.ToString().ToUpper())"
                                               onkeypress="return /^[a-zA-Z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                            </ChildContent>
                            <Helper><RadzenText TextStyle="TextStyle.Caption"></RadzenText></Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuPrimerApellido)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Segundo Apellido" AllowFloatingLabel="false" Variant="Variant.Flat" class="w-100 mt-3">
                            @* <Start><RadzenIcon Icon="person" IconColor="@Colors.Base400" /></Start> *@
                            <ChildContent>
                                <RadzenTextBox Name="@($@"lastName2_{TipoPersonal}")" @bind-Value="@oUsuario.UsuSegundoApellido" MinLength="0" MaxLength="150" Placeholder="Segundo Apellido"
                                               @oninput="@((e) => oUsuario.UsuSegundoApellido = e.Value.ToString().ToUpper())"
                                               onkeypress="return /^[a-zA-Z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                            </ChildContent>
                            <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuSegundoApellido)" />
                    </div>
                    
                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="@($@"{( ActionAddEdit == "agregar" ? "Número de Celular" : "Número de Celular Actual" )}")" AllowFloatingLabel="false" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="phone_iphone" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenMask Name="@($@"phoneNumberCurrent_{TipoPersonal}")" @bind-Value="@oUsuario.UsuNoCelularActual" MinLength="0" MaxLength="20" style="border-bottom: 3px solid red;"
                                            Mask="** ** ** ** **" CharacterPattern="[0-9]" Placeholder="00 00 00 00 00" Disabled="@(ActionAddEdit == "actualizar" ? true : false)" ReadOnly="@(ActionAddEdit == "actualizar" ? true : false)" />
                            </ChildContent>
                            <Helper>
                                <RadzenText TextStyle="TextStyle.Caption" TagName="TagName.Div" TextAlign="TextAlign.Justify" class="alert alert-info my-1 p-2"
                                            Text="@($@"{( ActionAddEdit == "actualizar" ? "En caso de cambio de No. de Celular, levanta una Solicitud (Ticket)." : "No. de Celular en uso (10 dígitos)." )}")" />
                            </Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuNoCelularActual)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="CURP" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="document_scanner" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox Name="@($@"curp_{TipoPersonal}")" @bind-Value="@oUsuario.UsuCurp" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="18"
                                               @oninput="@((e) => oUsuario.UsuCurp = e.Value.ToString().ToUpper())"
                                               onkeypress="return /^[A-Za-z0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                            </ChildContent>
                            <Helper>
                                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" TextAlign="TextAlign.Justify">
                                    <a href="@oLinkCURP.Data.LinkEnlace" target="_blank" class="icon-link icon-link-hover">
                                        ¿Olvidaste tu <strong>CURP?</strong>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" class="bi bi-box-arrow-up-right" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z" />
                                            <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z" />
                                        </svg>
                                    </a>
                                </RadzenText>
                            </Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuCurp)" />
                    </div>

                    <div class="col-md-4 col-lg-4 mb-3">
                        <RadzenFormField Text="Archivo del CURP" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3">
                            <Start><RadzenIcon Icon="picture_as_pdf" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent> @* image/*, .pdf, .doc, .docx *@
                                <RadzenUpload @ref="oUploadFile_CURP" Url="@($"/api/RepositoryFiles/UploadSingleFile/{folder}/{idResponse}/{oUsuario.UsuFileNameCurp}/{oGuid}")" Accept=".pdf"
                                        Icon="upload" ChooseText="Examinar Archivo" Auto="false" Multiple="false"
                                        Change=@(args => OnChangeFiles(args, CURP))
                                        Error=@(args => OnErrorFiles(args, "FileInput"))
                                        InputAttributes="@(new Dictionary<string,object>(){{ "cursor", "pointer" }})"
                                        Progress="@(args => OnProgressFiles(args, "Manual Upload"))"
                                        Complete="@(args => OnCompleteFiles(args))" />
                            </ChildContent>
                            <End>
                                <RadzenButton Icon="visibility"
                                              Click="@(() => ShowDialogModal_iFrame(srcCURP, "Archivo PDF del CURP"))"
                                              Variant="Variant.Text"
                                              Size="ButtonSize.Small"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Shade="Shade.Dark"
                                              Visible="@(ActionAddEdit == "actualizar" ? true : false)" />
                            </End>
                            <Helper>
                                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.Div" TextAlign="TextAlign.JustifyAll">
                                    <a href="@oLinkReducirTamañoArchivo.Data.LinkEnlace" target="_blank" class="icon-link icon-link-hover">
                                        Comprimir y/o reducir el tamaño del <strong>Archivo PDF (Máx. 2MB)</strong>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" class="bi bi-box-arrow-up-right" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z" />
                                            <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z" />
                                        </svg>
                                    </a>
                                </RadzenText>
                            </Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuFileNameCurp)" />
                        <ValidationMessage For="@(() => oUsuario.UsuFileSizeCurp)" />
                    </div>
                </div>
            </ChildContent>
            <SummaryTemplate>
                <ValidationSummary />
            </SummaryTemplate>
        </RadzenFieldset>

        <!-- ******************************************************************* CARD DATOS ACADÉMICOS ******************************************************************* -->
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Datos Académicos" CollapseTitle="Datos Académicos" ExpandAriaLabel="" CollapseAriaLabel="" Class="rz-border-base-500 rz-border-radius-1 rz-shadow-3 mt-3">
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="school" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Datos Académicos</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <div class="row">
                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Boleta" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="dialpad" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                @if (IdTipoPersonal == 1)
                                {
                                    <RadzenTextBox Name="@($@"boleta_{TipoPersonal}")" @bind-Value="@oUsuario.UsuBoletaAlumnoEgresado" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="10"
                                                   Placeholder="@($@"****{oEscuela.Data.EscNoEscuela}****")" aria-label="enter password"
                                                   @oninput="(e => oUsuario.UsuBoletaAlumnoEgresado = e.Value.ToString())" @onkeyup="@ValidarBoleta" />
                                }
                                else if (IdTipoPersonal == 2)
                                {
                                    <RadzenMask Name="@($@"boleta_{TipoPersonal}")" @bind-Value="@oUsuario.UsuBoletaAlumnoEgresado" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="10"
                                                Mask="@($@"**********")" CharacterPattern="[A-Z0-9]" Placeholder="@($@"**********")" Pattern="" />
                                }
                                else if (IdTipoPersonal == 3)
                                {
                                    <RadzenMask Name="@($"boleta_{TipoPersonal}")" @bind-Value="@oUsuario.UsuBoletaPosgrado" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="10"
                                                Mask="*******" CharacterPattern="[A-Z0-9]" Placeholder="B******" Pattern="" />
                                }
                            </ChildContent>
                            <Helper>
                                <RadzenText TextStyle="TextStyle.Caption" Text="@($@"{(IdTipoPersonal == 1 ? "(Formato Válido: xxxx60xxxx)" : IdTipoPersonal == 2 ? "(Formato Válido: xxxxxxxxxx)" : "(Formato Válido: Bxxxxxxx)")}")" />
                            </Helper>
                        </RadzenFormField>
                        @if (IdTipoPersonal == 1)
                        {
                            <ValidationMessage For="@(() => oUsuario.UsuBoletaAlumnoEgresado)" />
                            <RadzenAlert Title="Ingresa tu Boleta" Text="@($@"Formato Válido: ****{oEscuela.Data.EscNoEscuela}****")" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker"
                                         ShowIcon="true" AllowClose="false" class="mb-0" @bind-Visible="flagErrorBoletaAlumno" />
                        }
                        else if (IdTipoPersonal == 2)
                        {
                            <ValidationMessage For="@(() => oUsuario.UsuBoletaAlumnoEgresado)" />
                        }
                        else if (IdTipoPersonal == 3)
                        {
                            <ValidationMessage For="@(() => oUsuario.UsuBoletaPosgrado)" />
                        }
                    </div>

                    @if (IdTipoPersonal == 1 || IdTipoPersonal == 2)
                    {
                        <div class="col-md-4 col-lg-4">
                            <RadzenFormField Text="Carrera / Licenciatura" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3">
                                <Start><RadzenIcon Icon="school" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                <ChildContent>
                                    <RadzenDropDown Name="@($@"college_career_{TipoPersonal}")"
                                                    @bind-Value="@oUsuario.UsuIdCarrera"
                                                    TValue="int?"
                                                    Data="@oCarreras.Data"
                                                    ValueProperty="IdCarrera"
                                                    TextProperty="CarrNombre"
                                                    AllowClear="true"
                                                    AllowFiltering="true"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    FilterOperator="StringFilterOperator.Contains"
                                                    AllowVirtualization="true"
                                                    Placeholder="Selecciona una opción"
                                                    FilterPlaceholder="Buscar..."
                                                    Multiple="false"
                                                    Chips="true"
                                                    InputAttributes="@(new Dictionary<string,object>(){{ "font-family", "Arial" }})"
                                                    style="border-bottom: 3px solid red;" />
                                </ChildContent>
                                <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                            </RadzenFormField>
                            <ValidationMessage For="@(() => oUsuario.UsuIdCarrera)" />
                        </div>

                        <div class="col-md-4 col-lg-4">
                            <RadzenFormField Text="Semestre" AllowFloatingLabel="false" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                                <Start><RadzenIcon Icon="tag" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                <ChildContent>
                                    <RadzenDropDown Name="@($@"semester_{TipoPersonal}")"
                                                    @bind-Value="@oUsuario.UsuSemestre"
                                                    TValue="string"
                                                    ValueProperty="Key"
                                                    TextProperty="Value"
                                                    Data="@oSemestres"
                                                    AllowClear="true"
                                                    AllowFiltering="true"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    FilterOperator="StringFilterOperator.Contains"
                                                    AllowVirtualization="true"
                                                    Placeholder="Selecciona una opción"
                                                    FilterPlaceholder="Buscar..."
                                                    Multiple="false"
                                                    Chips="true"
                                                    InputAttributes="@(new Dictionary<string,object>(){{ "font-family", "Arial" }})"
                                                    style="border-bottom: 3px solid red;" />
                                </ChildContent>
                                <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                            </RadzenFormField>
                            <ValidationMessage For="@(() => oUsuario.UsuSemestre)" />
                        </div>
                    }

                    <div class="@($@"{((IdTipoPersonal == 2 || TipoPersonal == "egresado") || (IdTipoPersonal == 1 && ActionAddEdit == "actualizar") ? "col-md-4 col-lg-4" : "col-md-4 col-lg-4 mb-3")}")">
                        <RadzenFormField Text="@($@"{( (IdTipoPersonal == 1 || IdTipoPersonal == 2) ? "Archivo PDF del Comprobante de Horario (Tira de Materias) del Periodo Escolar Actual" : "Archivo PDF del SIP-10" )}")" AllowFloatingLabel="false" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="picture_as_pdf" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent> @* image/*, .pdf, .doc, .docx *@
                                <RadzenUpload @ref="oUploadFile_ComprobanteInscripción" Url="@($"/api/RepositoryFiles/UploadSingleFile/{folder}/{idResponse}/{oUsuario.UsuFileNameComprobanteEstudios}/{oGuid}")" Accept=".pdf"
                                              Icon="upload" ChooseText="Examinar Archivo" Auto="false" Multiple="false"
                                              Change=@(args => OnChangeFiles(args, Comprobante_Inscripcion))
                                              Error=@(args => OnErrorFiles(args, "FileInput"))
                                              InputAttributes="@(new Dictionary<string,object>(){{ "cursor", "pointer" }})"
                                              Progress="@(args => OnProgressFiles(args, "Manual Upload"))"
                                              Complete="@(args => OnCompleteFiles(args))" />
                            </ChildContent>
                            <End>
                                <RadzenButton Icon="visibility"
                                              Click="@(() => ShowDialogModal_iFrame(srcComprobanteInscripcion, $@"{( (IdTipoPersonal == 1 || IdTipoPersonal == 2) ? "Archivo PDF del Comprobante de Horario (Tira de Materias) del Periodo Escolar Actual" : "Archivo PDF del SIP-10" )}"))"
                                              Variant="Variant.Text"
                                              Size="ButtonSize.Small"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Shade="Shade.Dark"
                                              Visible="@(ActionAddEdit == "actualizar" ? true : false)" />
                            </End>
                            <Helper>
                                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" TextAlign="TextAlign.JustifyAll">
                                    @if (IdTipoPersonal == 1 || IdTipoPersonal == 2)
                                    {
                                        <a href="@oLinkSAES.Data.LinkEnlace" target="_blank" class="icon-link icon-link-hover">
                                            Consulta tu <br /><strong>Comprobante de Horario (Tira de Materias)</strong>
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-up-right" viewBox="0 0 16 16">
                                                <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z" />
                                                <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z" />
                                            </svg>
                                        </a>
                                    }
                                </RadzenText>
                            </Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuFileNameComprobanteEstudios)" />
                        <ValidationMessage For="@(() => oUsuario.UsuFileSizeComprobanteEstudios)" />
                    </div>

                    @if ((IdTipoPersonal == 2 || TipoPersonal == "egresado") || (IdTipoPersonal == 1 && ActionAddEdit == "actualizar"))
                    {
                        <div class="col-md-4 col-lg-4">
                            <RadzenFormField Text="¿Eres Egresado?" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3">
                                <ChildContent>
                                    <div class="rz-text-align-center">
                                        <RadzenSelectBar @bind-Value="@flagEsEgresado" TValue="bool" ValueProperty="" TextProperty="" Size="ButtonSize.Medium" Multiple="false"
                                                         Disabled="@flagEsEgresadoDisabled" Change="@ChangeSelectBarEgresado" class="rz-m-4">
                                            <Items>
                                                <RadzenSelectBarItem Value="true" Text="Sí" Icon="check_circle" IconColor="@(!flagEsEgresado ? Colors.SuccessDarker : Colors.White)" />
                                                <RadzenSelectBarItem Value="false" Text="No" Icon="cancel" IconColor="@(flagEsEgresado ? Colors.DangerDarker : Colors.White)" />
                                            </Items>
                                        </RadzenSelectBar>
                                    </div>
                                </ChildContent>
                                <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                            </RadzenFormField>
                        </div>

                        <div class="col-md-4 col-lg-4">
                            <RadzenFormField Text="Año de Egreso" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3" Disabled="false" Visible="@flagEsEgresado">
                                <Start><RadzenIcon Icon="dialpad" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                <ChildContent>
                                    <RadzenNumeric Name="@($@"año_egreso_{TipoPersonal}")" TValue="int?" @bind-Value="@oUsuario.UsuAnioEgreso" Change=@(args => oUsuario.UsuAnioEgreso = args)
                                                   AutoComplete="true" Placeholder="@($@"1950-{year}")"
                                                   TextAlign="TextAlign.Center" Min="1950" Max="@year" ShowUpDown="true" Step="1" Format="" />
                                </ChildContent>
                                <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                            </RadzenFormField>
                            <ValidationMessage For="@(() => oUsuario.UsuAnioEgreso)" />
                        </div>
                    }

                    <div class="col-md-12">
                        <RadzenAlert Title="IMPORTANTE Egresado:" Text="" AlertStyle="AlertStyle.Info" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Light" ShowIcon="true" AllowClose="false"
                                     Visible="@(flagEsEgresado)" class="mt-3">
                            ✅ Para tener tu Correo de Egresado, levanta una nueva solicitud.<br />
                            ✅ Dejarás de contar con tu Correo de Alumno.<br />
                            ✅ Con tu Correo de Egresado no podrás tener acceso a las aplicaciones de Office 365 de manera gratuita.<br />
                        </RadzenAlert>
                    </div>
                </div>
            </ChildContent>
            <SummaryTemplate>
                <ValidationSummary />
            </SummaryTemplate>
        </RadzenFieldset>
        
        <!-- ******************************************************************* CARD DATOS DE LA CUENTA SACI ******************************************************************* -->
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Datos de la Cuenta SACI" CollapseTitle="Datos de la Cuenta SACI" ExpandAriaLabel="" CollapseAriaLabel="" Class="rz-border-base-500 rz-border-radius-1 rz-shadow-3 mt-3">
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="account_circle" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Datos de la Cuenta SACI</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <div class="row">
                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="@($@"{(ActionAddEdit == "agregar" ? "Correo Electrónico Personal" : "Correo Electrónico Personal Actual")}")" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="email" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox Name="@($@"email_personal_{TipoPersonal}")" @bind-Value="@oUsuario.UsuCorreoPersonalCuentaActual" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="100"
                                               Disabled="@(ActionAddEdit == "actualizar" ? true : false)" ReadOnly="@(ActionAddEdit == "actualizar" ? true : false)" />
                            </ChildContent>
                            <Helper>
                                <RadzenText TextStyle="TextStyle.Caption" TagName="TagName.Div" TextAlign="TextAlign.Justify" class="alert alert-info my-1 p-2"
                                            Text="@($@"{( ActionAddEdit == "actualizar" ? "En caso de cambio de Correo Electrónico Personal, levanta una Solicitud (Ticket)." : "En caso de no contar con un Correo Personal, le recomendamos crear uno con dominio válido (gmail, outlook, hotmail, yahoo, msn, live, etc)." )}")" />
                            </Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuCorreoPersonalCuentaActual)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Contraseña" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="vpn_key" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                @if (ActionAddEdit == "agregar")
                                {
                                    <RadzenTextBox Name="@($@"contraseña_{TipoPersonal}")" @bind-Value="@oUsuario.UsuContrasenia" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                                   AutoCompleteType="AutoCompleteType.Off" Visible="@(!VisibleContraseña)"
                                                   @oninput="(e => oUsuario.UsuContrasenia = e.Value.ToString())"
                                                   @onkeyup="@CompararContraseñas" />
                                    <RadzenPassword Name="@($@"contraseña_visible_{TipoPersonal}")" @bind-Value="@oUsuario.UsuContrasenia" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                                    AutoCompleteType="AutoCompleteType.NewPassword" Visible="@VisibleContraseña"
                                                    @oninput="(e => oUsuario.UsuContrasenia = e.Value.ToString())"
                                                    @onkeyup="@CompararContraseñas" />
                                }
                                else if (ActionAddEdit == "actualizar")
                                {
                                    <RadzenTextBox Name="@($@"contraseña_{TipoPersonal}")" @bind-Value="@UsuContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                                   AutoCompleteType="AutoCompleteType.Off" Visible="@(!VisibleContraseña)"
                                                   @oninput="(e => UsuContraseña = e.Value.ToString())"
                                                   @onkeyup="@CompararContraseñas" />
                                    <RadzenPassword Name="@($@"contraseña_visible_{TipoPersonal}")" @bind-Value="@UsuContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                                    AutoCompleteType="AutoCompleteType.NewPassword" Visible="@VisibleContraseña"
                                                    @oninput="(e => UsuContraseña = e.Value.ToString())"
                                                    @onkeyup="@CompararContraseñas" />
                                }
                            </ChildContent>
                            <End>
                                <RadzenButton Icon="@(VisibleContraseña ? "visibility" : "visibility_off")"
                                              Click="@ToggleContraseña"
                                              Variant="Variant.Text"
                                              Size="ButtonSize.Small"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Shade="Shade.Dark" />
                            </End>
                            <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario!.UsuContrasenia)" />
                    </div>

                    <div class="col-md-4 col-lg-4 mb-3">
                        <RadzenFormField Text="Confirmar Contraseña" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3">
                            <Start><RadzenIcon Icon="lock" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox Name="@($@"confirmar_contraseña_{TipoPersonal}")" @bind-Value="@UsuConfirmarContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20"
                                               AutoCompleteType="AutoCompleteType.Off" Visible="@(!VisibleConfirmarContraseña)"
                                               @oninput="(e => UsuConfirmarContraseña = e.Value.ToString())"
                                               @onkeyup="@CompararContraseñas" />
                                <RadzenPassword Name="@($@"confirmar_contraseña_visible_{TipoPersonal}")" @bind-Value="@UsuConfirmarContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                                AutoCompleteType="AutoCompleteType.NewPassword" Visible="@VisibleConfirmarContraseña"
                                                @oninput="(e => UsuConfirmarContraseña = e.Value.ToString())"
                                                @onkeyup="@CompararContraseñas" />
                            </ChildContent>
                            <End>
                                <RadzenButton Icon="@(VisibleConfirmarContraseña ? "visibility" : "visibility_off")"
                                              Click="ToggleConfirmarContraseña"
                                              Variant="Variant.Text"
                                              Size="ButtonSize.Small"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Shade="Shade.Dark" />
                            </End>
                            <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                        </RadzenFormField>

                        <RadzenAlert Title="Ingresa las contraseñas" Text="Verificar que coincidan." AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker"
                                     ShowIcon="true" AllowClose="false" class="mb-0" @bind-Visible="flagErrorPasswords" />
                    </div>
                </div>
            </ChildContent>
            <SummaryTemplate>
                <ValidationSummary />
            </SummaryTemplate>
        </RadzenFieldset>
        
        <!-- ******************************************************************* CARD DATOS CORREO INSTITUCIONAL ******************************************************************* -->
        <RadzenFieldset AllowCollapse="false" ExpandTitle="Credenciales del Correo E. Institucional" CollapseTitle="Credenciales del Correo E. Institucional" ExpandAriaLabel="" CollapseAriaLabel="" class="rz-border-base-500 rz-border-radius-1 rz-shadow-3 my-3">
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="email" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Credenciales del Correo E. Institucional</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <div class="row" hidden="@existenSolicitudes">
                    <div class="@($@"{( ActionAddEdit == "agregar" ? "col-md-4 col-lg-4 offset-md-4 offset-lg-4" : "col-md-6 col-lg-6" )}")">
                        <RadzenFormField Text="Correo Electrónico Institucional" AllowFloatingLabel="false" AllowClear="true" Variant="Variant.Filled" Style="" class="@($@"{( ActionAddEdit == "agregar" ? "w-100 mt-3" : "rz-shadow-3 w-100 mt-3" )}")" Disabled="false">
                            <Start><RadzenIcon Icon="mail_outline" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox Name="@($@"email_institucional_{TipoPersonal}")" @bind-Value="@oUsuario.UsuCorreoInstitucionalCuenta" MinLength="0" MaxLength="100" class="@($@"{(ActionAddEdit == "actualizar" ? "text-center" : "")}")"
                                               Disabled="@(ActionAddEdit == "actualizar" ? true : false)" ReadOnly="@(ActionAddEdit == "actualizar" ? true : false)"
                                               AutoCompleteType="AutoCompleteType.Off" Style="font-family:var(--rz-text-font-family); font-weight:bold; font-size:18px;" />
                            </ChildContent>
                            <Helper>
                                <RadzenText TextStyle="TextStyle.Caption" TagName="TagName.P" TextAlign="TextAlign.Justify" Style="font-family:var(--rz-text-font-family);">
                                    @if (ActionAddEdit == "agregar")
                                    {
                                        <div>Campo Opcional (en caso de contar con un Correo Institucional).</div>
                                    }
                                </RadzenText>
                            </Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuCorreoInstitucionalCuenta)" />
                    </div>

                    @if (ActionAddEdit == "actualizar")
                    {
                        <div class="col-md-6 col-lg-6 mb-3">
                            <RadzenFormField Text="Contraseña del Correo Electrónico Institucional" AllowFloatingLabel="false" AllowClear="true" Variant="Variant.Filled" Class="rz-shadow-3 w-100 mt-3" Disabled="false">
                                <Start><RadzenIcon Icon="password" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                <ChildContent>
                                    <RadzenTextBox Name="@($@"password_email_institucional_{TipoPersonal}")" @bind-Value="@oUsuario.UsuCorreoInstitucionalContrasenia" MinLength="0" MaxLength="100"
                                                   Disabled="true" ReadOnly="true" class="text-center" Style="font-family:var(--rz-text-font-family); font-weight:bold; font-size:18px;" />
                                </ChildContent>
                                <Helper>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.P" TextAlign="TextAlign.Justify" Style="font-family:var(--rz-text-font-family);" />
                                </Helper>
                            </RadzenFormField>
                            <ValidationMessage For="@(() => oUsuario.UsuCorreoInstitucionalContrasenia)" />
                        </div>
                    }
                </div>

                <div class="row" hidden="@(!existenSolicitudes)">
                    <div class="col-md-12 col-lg-12">
                        <RadzenAlert Title="" Text="" AlertStyle="AlertStyle.Secondary" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Default" ShowIcon="true" AllowClose="false"
                                     Visible="true" class="my-3">
                            <b>ATENCIÓN:</b> Para visualizar tus <strong>Credenciales del Correo Institucional</strong>, favor de esperar a que se generen / recuperen y después responder la encuesta de calidad.
                            <RadzenButton Text="Ir al Seguimiento de la Solicitud"
                                          BusyText=""
                                          ButtonStyle="ButtonStyle.Warning"
                                          ButtonType="ButtonType.Button"
                                          Variant="Variant.Filled"
                                          IsBusy="false"
                                          Icon="arrow_forward"
                                          class="text-white rz-ripple"
                                          Shade="Shade.Darker"
                                          Size="ButtonSize.Small"
                                          Click="@(() => navigationManager.NavigateTo("/Inicio"))" />
                        </RadzenAlert>
                    </div>
                </div>
            </ChildContent>
            <SummaryTemplate>
                <ValidationSummary />
            </SummaryTemplate>
        </RadzenFieldset>

        <!-- ******************************************************************* CARD ReCAPTCHA ******************************************************************* -->
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.Wrap" Gap="10px" class="rz-mt-5">
            <ReCAPTCHA @ref="oReCAPTCHAComponent" SiteKey="6Ld6058pAAAAACiEYq0Khine3FWbHZpfyEraTlOX" OnSuccess="OnSuccess" OnExpired="OnExpired" />
            @if (ActionAddEdit == "agregar")
            {
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.NoWrap" Gap="0px" Class="" Style="font-family:var(--rz-text-font-family);">
                    <RadzenCheckBox Name="@($@"aviso_privacidad_{TipoPersonal}")" TValue="bool" @bind-Value="@aceptar_aviso_privacidad" TriState="false" Change="@(args => aceptar_aviso_privacidad = args)" Disabled="false" ReadOnly="false" />
                    <RadzenLabel Text="He leído y acepto los términos y condiciones del" Component="@($@"aviso_privacidad_{TipoPersonal}")" Style="margin-left: 8px; vertical-align: middle;" />&ensp;
                    <a style="cursor:pointer;" @onclick="@(() => ShowDialogModal_iFrame("./documentos/saci_aviso_privacidad_integral.pdf", "Aviso de Privacidad para la Protección de Datos Personales"))" class="icon-link icon-link-hover">
                        <b>Aviso</b> de <strong>Privacidad</strong>
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" class="bi bi-box-arrow-up-right" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z" />
                            <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z" />
                        </svg>
                    </a>
                </RadzenStack>
            }
            <ValidationSummary class="rz-my-0" />
            <RadzenButton Text="@TextButton"
                          BusyText="@BusyTextButton"
                          ButtonStyle="ButtonStyle.Success"
                          ButtonType="ButtonType.Submit"
                          IsBusy="@busyLoading"
                          Icon="@IconButton"
                          class="w-100 rz-ripple"
                          Shade="Shade.Default"
                          Disabled="@DisablePostButton"
                          Size="ButtonSize.Large"
                          Variant="Variant.Filled" />
        </RadzenStack>
    </EditForm>

    <ButtonScrollToTop />
}
else
{
    <LoadingComponent />
}

@code
{
    @*///////////////////////////////////////////////  OBTENER PARÁMETROS PARA AGREGAR O ACTUALIZAR DATA  ///////////////////////////////////////////////*@
    [Parameter] public string? ActionAddEdit { get; set; }
    [Parameter] public RequestDTO_Usuario? oEditUsuario { get; set; }

    @*///////////////////////////////////////////////  OBTENER PARÁMETROS DEL TIPO DE PERSONAL  ///////////////////////////////////////////////*@
    [Parameter] public int IdTipoPersonal { get; set; }
    [Parameter] public string? TipoPersonal { get; set; }

    @*///////////////////////////////////////////////  INICIALIZAR OBJETO DEL USUARIO  ///////////////////////////////////////////////*@
    private RequestDTO_Usuario? oUsuario = new();

    @*///////////////////////////////////////////////  INICIALIZAR OBJETOS Y OBTENER DATA ASYNC  ///////////////////////////////////////////////*@
    public Response<object>? oRespuesta = new();
    public Response<RequestViewModel_Link>? oLinkCURP = new();
    public Response<RequestViewModel_Link>? oLinkSAES = new();
    public Response<RequestViewModel_Link>? oLinkReducirTamañoArchivo = new();
    private Response<RequestViewModel_Escuela>? oEscuela = new();
    public Response<List<RequestViewModel_Carrera>>? oCarreras = new();
    private string srcCURP = string.Empty;
    private string srcComprobanteInscripcion = string.Empty;

    [Parameter] public bool existenSolicitudes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        oLinkCURP = await servicioLink.GetDataByNameAsync("CURP");
        oLinkSAES = await servicioLink.GetDataByNameAsync("SAES");
        oLinkReducirTamañoArchivo = await servicioLink.GetDataByNameAsync("REDUCIR TAMAÑO ARCHIVO");
        oEscuela = await servicioEscuela.GetDataByIdAsync(1);
        oCarreras = await servicioCarrera.GetAllDataByStatusAsync(true);
        
        if (ActionAddEdit == "agregar")
        {
            @* DATOS ID DEL USUARIO *@
            oUsuario!.IdUsuario = 0;
            oUsuario.UsuIdRol = 2;                              // FK ID del Rol (1 - Administrador, 2 - Usuario Solicitante)
            oUsuario.UsuIdTipoPersonal = IdTipoPersonal;        // FK ID del Tipo de Personal ([1 - Alumno Inscrito], [2 - Alumno Egresado], [3 - Posgrado], [4 - Administrativo], [5 - Docente], [6 - Honorarios])
            @* DATOS PERSONALES *@
            oUsuario.UsuNombres = "";                           // Nombre del Usuario Solicitante o Administrador
            oUsuario.UsuPrimerApellido = "";                    // Primer Apellido del Usuario Solicitante o Administrador
            oUsuario.UsuSegundoApellido = "";                   // Segundo Apellido del Usuario Solicitante o Administrador
            oUsuario.UsuCurp = "";                              // CURP con 18 caracteres como mínimo
            oUsuario.UsuFileNameCurp = "";                      // Nombre del Archivo y extensión .pdf del CURP
            oUsuario.UsuFileSizeCurp = 0L;                      // Tamaño del Archivo .pdf del CURP
            oUsuario.UsuNoCelularAnterior = "00 00 00 00 00";   // Número de Celular Anterior si llega a cambiar por uno nuevo
            oUsuario.UsuNoCelularActual = "";                   // Número de Celular Nuevo que sería el número de celular actual
            @* DATOS ACADÉMICOS *@
            if (IdTipoPersonal == 1 || IdTipoPersonal == 2)     // Número de Boleta del Usuario (Alumno Inscrito o Egresado)
            { 
                oUsuario.UsuBoletaAlumnoEgresado = "";
                oUsuario.UsuBoletaPosgrado = "B000000";
            }
            else if (IdTipoPersonal == 3)                       // Número de Boleta del Usuario (Alumno de Posgrado)
            {
                oUsuario.UsuBoletaAlumnoEgresado = $@"0000{oEscuela?.Data?.EscNoEscuela}0000";
                oUsuario.UsuBoletaPosgrado = "";
            }
            if (IdTipoPersonal == 1 || IdTipoPersonal == 2)
            {
                // oUsuario.UsuIdCarrera = 1;                   // FK ID de la Carrera del Alumno
                oUsuario.UsuSemestre = "";                      // Semestre que cursa el Alumno Inscrito o de Posgrado
            }
            else if (IdTipoPersonal == 3)
            {
                oUsuario.UsuIdCarrera = 1;                      // FK ID de la Carrera del Alumno
                oUsuario.UsuSemestre = "0";                     // Semestre que cursa el Alumno Inscrito o de Posgrado
            }
            oUsuario.UsuAnioEgreso = 1950;                      // Año de Egreso en dado caso
            oUsuario.UsuFileNameComprobanteEstudios = "";       // Nombre del Archivo en .pdf del Comprobante de Inscripcion (Tira de Materias)
            oUsuario.UsuFileSizeComprobanteEstudios = 0L;       // Tamaño del Archivo en .pdf del Comprobante de Inscripcion (Tira de Materias)
            @* DATOS LABORALES *@
            oUsuario.UsuNumeroEmpleadoContrato = "0";                   // Número del Empleado del Usuario (Administrador o Docente)
            oUsuario.UsuIdAreaDepto = 1;                        // FK ID del Área/Departamento del Usuario Empleado
            oUsuario.UsuNoExtensionAnterior = "0";              // Número de Extensión Anterior del Empleado
            oUsuario.UsuNoExtensionActual = "0";                      // Número de Extensión del Empleado
            @* DATOS DE LAS CREDENCIALES DE LA CUENTA EN LA APP *@
            oUsuario.UsuCorreoPersonalCuentaAnterior = null;    // Correo Personal de la Cuenta Anterior
            oUsuario.UsuCorreoPersonalCuentaActual = "";        // Correo Personal de la Cuenta Nueva o Actual
            oUsuario.UsuContrasenia = "";                       // Contraseña en la PLataforma del Usuario Solicitante o Administrador
            oUsuario.UsuRecuperarContrasenia = false;           // Contraseña Temporal que se le proporciona al Usuario Solicitante
            @* DATOS DEL CORREO INSTITUCIONAL *@
            oUsuario.UsuCorreoInstitucionalCuenta = "";         // Cuenta Correo Institucional IPN generada por DCyC
            oUsuario.UsuCorreoInstitucionalContrasenia = "";    // Contraseña del Correo Institucional IPN Generada por DCyC
            @* OTROS DATOS *@
            // oUsuario.UsuFechaHoraAlta = DateTime.Parse(DateTime.Now.ToString()).Year; // Fecha y Hora de Alta del Usuario
            oUsuario.UsuStatus = true;                          // Usuario (1 - Activo / 0 - Inactivo)
            @* DATOS FK NAVIGATION *@
            oUsuario.UsuIdAreaDeptoNavigation = null;
            oUsuario.UsuIdCarreraNavigation = null;
            oUsuario.UsuIdRolNavigation = null!;
            oUsuario.UsuIdTipoPersonalNavigation = null!;

            IconButton = "send";
            TextButton = "Enviar Registro";
            BusyTextButton = "Enviando Registro ...";
        }
        else if (ActionAddEdit == "actualizar")
        {
            @* DATOS ID DEL USUARIO *@
            oUsuario!.IdUsuario = oEditUsuario!.IdUsuario;
            oUsuario.UsuIdRol = oEditUsuario.UsuIdRol;                          // FK ID del Rol (1 - Administrador, 2 - Usuario Solicitante)
            oUsuario.UsuIdTipoPersonal = oEditUsuario.UsuIdTipoPersonal;        // FK ID del Tipo de Personal ([1 - Alumno Inscrito], [2 - Alumno Egresado], [3 - Posgrado], [4 - Administrativo], [5 - Docente], [6 - Honorarios])
            @* DATOS PERSONALES *@
            oUsuario.UsuNombres = oEditUsuario.UsuNombres;                        // Nombre del Usuario Solicitante o Administrador
            oUsuario.UsuPrimerApellido = oEditUsuario.UsuPrimerApellido;        // Primer Apellido del Usuario Solicitante o Administrador
            oUsuario.UsuSegundoApellido = oEditUsuario.UsuSegundoApellido;      // Segundo Apellido del Usuario Solicitante o Administrador
            oUsuario.UsuCurp = oEditUsuario.UsuCurp;                            // CURP con 18 caracteres como mínimo
            oUsuario.UsuFileNameCurp = oEditUsuario.UsuFileNameCurp;            // Nombre del Archivo y extensión .pdf del CURP
            srcCURP = oUsuario.UsuFileNameCurp != "CURP.pdf" ? $"/repositorio/{folder}/{oUsuario.IdUsuario}/{oUsuario.IdUsuario}_{oUsuario.UsuFileNameCurp}" : $"/repositorio/CURP.pdf";
            oUsuario.UsuFileSizeCurp = oEditUsuario.UsuFileSizeCurp;            // Tamaño del Archivo .pdf del CURP
            oUsuario.UsuNoCelularAnterior = oEditUsuario.UsuNoCelularAnterior;  // Número de Celular Anterior si llega a cambiar por uno nuevo
            oUsuario.UsuNoCelularActual = oEditUsuario.UsuNoCelularActual;        // Número de Celular Nuevo que sería el número de celular actual
            @* DATOS ACADÉMICOS *@
            oUsuario.UsuBoletaAlumnoEgresado = oEditUsuario.UsuBoletaAlumnoEgresado;            // Número de Boleta del Usuario (Alumno Inscrito o Egresado)
            oUsuario.UsuBoletaPosgrado = oEditUsuario.UsuBoletaPosgrado;        // Número de Boleta del Usuario (Alumno de Posgrado)
            oUsuario.UsuIdCarrera = oEditUsuario.UsuIdCarrera;                  // FK ID de la Carrera del Alumno
            oUsuario.UsuSemestre = oEditUsuario.UsuSemestre;                    // Semestre que cursa el Alumno Inscrito o de Posgrado
            oUsuario.UsuAnioEgreso = oEditUsuario.UsuAnioEgreso;                  // Año de Egreso en dado caso
            oUsuario.UsuFileNameComprobanteEstudios = oEditUsuario.UsuFileNameComprobanteEstudios;    // Nombre del Archivo en .pdf del Comprobante de Inscripcion (Tira de Materias)
            srcComprobanteInscripcion = oUsuario.UsuFileNameComprobanteEstudios != "Comprobante-Inscripcion.pdf" ? $"/repositorio/{folder}/{oUsuario.IdUsuario}/{oUsuario.IdUsuario}_{oUsuario.UsuFileNameComprobanteEstudios}" : $"/repositorio/Comprobante-Inscripcion.pdf";
            oUsuario.UsuFileSizeComprobanteEstudios = oEditUsuario.UsuFileSizeComprobanteEstudios;    // Tamaño del Archivo en .pdf del Comprobante de Inscripcion (Tira de Materias)
            @* DATOS LABORALES *@
            oUsuario.UsuNumeroEmpleadoContrato = oEditUsuario.UsuNumeroEmpleadoContrato;        // Número del Empleado del Usuario (Administrador o Docente)
            oUsuario.UsuIdAreaDepto = oEditUsuario.UsuIdAreaDepto;              // FK ID del Área/Departamento del Usuario Empleado
            oUsuario.UsuNoExtensionAnterior = oEditUsuario.UsuNoExtensionAnterior; // Número de Extensión Anterior del Empleado
            oUsuario.UsuNoExtensionActual = oEditUsuario.UsuNoExtensionActual;              // Número de Extensión del Empleado
            @* DATOS DE LAS CREDENCIALES DE LA CUENTA EN LA APP *@
            oUsuario.UsuCorreoPersonalCuentaAnterior = oEditUsuario.UsuCorreoPersonalCuentaAnterior;        // Correo Personal de la Cuenta Anterior
            oUsuario.UsuCorreoPersonalCuentaActual = oEditUsuario.UsuCorreoPersonalCuentaActual;              // Correo Personal de la Cuenta Nueva o Actual
            oUsuario.UsuContrasenia = oEditUsuario.UsuContrasenia;                                            // Contraseña en la PLataforma del Usuario Solicitante o Administrador
            oUsuario.UsuRecuperarContrasenia = oEditUsuario.UsuRecuperarContrasenia;                          // Contraseña Temporal que se le proporciona al Usuario Solicitante
            @* DATOS DEL CORREO INSTITUCIONAL *@
            oUsuario.UsuCorreoInstitucionalCuenta = oEditUsuario.UsuCorreoInstitucionalCuenta;              // Cuenta Correo Institucional IPN generada por DCyC
            oUsuario.UsuCorreoInstitucionalContrasenia = oEditUsuario.UsuCorreoInstitucionalContrasenia;      // Contraseña del Correo Institucional IPN Generada por DCyC
            @* OTROS DATOS *@
            oUsuario.UsuFechaHoraAlta = oEditUsuario.UsuFechaHoraAlta;          // Fecha y Hora de Alta del Usuario
            oUsuario.UsuStatus = oEditUsuario.UsuStatus;                        // Usuario (1 - Activo / 0 - Inactivo)
            @* DATOS FK NAVIGATION *@
            oUsuario.UsuIdAreaDeptoNavigation = null;
            oUsuario.UsuIdCarreraNavigation = null;
            oUsuario.UsuIdRolNavigation = null!;
            oUsuario.UsuIdTipoPersonalNavigation = null!;

            IconButton = "save_as";
            TextButton = "Editar Datos";
            BusyTextButton = "Actualizando Datos ...";
        }

        if (IdTipoPersonal == 2 || TipoPersonal == "egresado")
        {
            flagEsEgresado = true;

            if (ActionAddEdit == "agregar")
                flagEsEgresadoDisabled = true;
            else if (ActionAddEdit == "actualizar")
                flagEsEgresadoDisabled = false;
        }
        else if (IdTipoPersonal == 1 && ActionAddEdit == "actualizar")
        {
            flagEsEgresado = false;
            flagEsEgresadoDisabled = false;
        }
    }

    @*///////////////////////////////////////////////  INICIALIZAR LISTA DE SEMESTRES  ///////////////////////////////////////////////*@
    public class Semestres
    {
        public string Key { get; set; } = null!;
        public string Value { get; set; } = null!;
    }

    private List<Semestres> oSemestres = new List<Semestres>
    {
        new Semestres() { Key = "1", Value = "1ro semestre" },
        new Semestres() { Key = "2", Value = "2do semestre" },
        new Semestres() { Key = "3", Value = "3ro semestre" },
        new Semestres() { Key = "4", Value = "4to semestre" },
        new Semestres() { Key = "5", Value = "5to semestre" },
        new Semestres() { Key = "6", Value = "6to semestre" },
        new Semestres() { Key = "7", Value = "7mo semestre" },
        new Semestres() { Key = "8", Value = "8vo semestre" }
    };

    @*///////////////////////////////////////////////  Egresado  //////////////////////////////////////////////////////////////////////*@
    private bool flagEsEgresado;
    private bool flagEsEgresadoDisabled;
    private bool onChangeSelectBarEgresado = false;
    public async Task ChangeSelectBarEgresado()
    {
        oUsuario!.UsuIdTipoPersonal = !flagEsEgresado ? 1 : 2;
        oUsuario.UsuAnioEgreso = 1950;
        onChangeSelectBarEgresado = true;
    }

    @*///////////////////////////////////////////////  Año Actual  //////////////////////////////////////////////////////////////////////*@
    public int year = DateTime.Parse(DateTime.Now.ToString()).Year;

    @*///////////////////////////////////////////////  VALIDAR BOLETA DEL ALUMNO  ///////////////////////////////////////////////*@
    private bool flagErrorBoletaAlumno = false;
    private async Task ValidarBoleta() => flagErrorBoletaAlumno = !System.Text.RegularExpressions.Regex.IsMatch(oUsuario?.UsuBoletaAlumnoEgresado!, @"^\d{4}" + oEscuela?.Data?.EscNoEscuela + @"\d{4}$");

    @*///////////////////////////////////////////////  VALIDAR CAMPOS CONTRASEÑA Y CONFIRMAR CONTRASEÑA  ///////////////////////////////////////////////*@
    // Hacer visible las Contraseñas con el ícono eye
    private bool VisibleContraseña = true;
    private bool VisibleConfirmarContraseña = true;
    private async Task ToggleContraseña() => VisibleContraseña = !VisibleContraseña;
    private async Task ToggleConfirmarContraseña() => VisibleConfirmarContraseña = !VisibleConfirmarContraseña;

    // Comparar las Contraseñas
    private string UsuContraseña = string.Empty;
    private string UsuConfirmarContraseña = string.Empty;
    public bool flagErrorPasswords = false;
    private async Task CompararContraseñas()
    {
        if (ActionAddEdit == "agregar")
            flagErrorPasswords = !string.Equals(oUsuario.UsuContrasenia, UsuConfirmarContraseña, StringComparison.Ordinal);
        else if (ActionAddEdit == "actualizar")
        {
            flagErrorPasswords = !string.Equals(UsuContraseña, UsuConfirmarContraseña, StringComparison.Ordinal);
            oUsuario!.UsuContrasenia = !string.IsNullOrEmpty(UsuContraseña) && !flagErrorPasswords ? CorreosInstitucionales.Shared.CapaTools.Encrypt.GetSHA256(UsuContraseña) : oEditUsuario!.UsuContrasenia;
        }
    }

    @*///////////////////////////////////////////////  VALIDAR CAMPOS DEL FORMULARIO CON DATA_NOTATIONS  ///////////////////////////////////////////////*@
    private async Task OnInvalidHandled_ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        await JSRuntime.InvokeVoidAsync("eval", $@"document.getElementById('names_{TipoPersonal}').select()");
    }

    @*///////////////////////////////////////////////  VALIDAR CAMPOS DEL FORMULARIO ARCHIVOS PARA SUBIR  ///////////////////////////////////////////////*@
    // Subida de archivo
    private RadzenUpload? oUploadFile_CURP = new();
    private RadzenUpload? oUploadFile_ComprobanteInscripción = new();
    private IEnumerable<FileInfo>? oFileInfoCURP { get; set; }
    private IEnumerable<FileInfo>? oFileInfoComprobanteInscripcion { get; set; }

    async Task OnChangeFiles(UploadChangeEventArgs args, string name)
    {
        foreach (var file in args.Files)
        {
            if (name == CURP)
            {
                oUsuario!.UsuFileNameCurp = $"{CURP}_{oGuid}{Path.GetExtension(file.Name).ToLower()}";
                oUsuario.UsuFileSizeCurp = file.Size; // bytes
                oFileInfoCURP = args.Files;
            }
            else if (name == Comprobante_Inscripcion)
            {
                oUsuario!.UsuFileNameComprobanteEstudios = $"{Comprobante_Inscripcion}_{oGuid}{Path.GetExtension(file.Name).ToLower()}";
                oUsuario.UsuFileSizeComprobanteEstudios = file.Size; // bytes
                oFileInfoComprobanteInscripcion = args.Files;
            }
        }
    }

    async Task OnErrorFiles(UploadErrorEventArgs args, string name) => Console.WriteLine($"{args.Message}");

    async Task OnProgressFiles(UploadProgressArgs args, string name)
    {
        // Console.WriteLine($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                // Console.WriteLine($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

    async Task OnCompleteFiles(UploadCompleteEventArgs args) => Console.WriteLine($"Server response: {args.RawResponse}");

    @*///////////////////////////////////////////////  VALIDAR ReCAPTCHA  ////////////////////////////////////////////////////////////////////////*@
    private ReCAPTCHA oReCAPTCHAComponent;
    // private bool ServerVerificatiing = false;
    private bool ValidReCAPTCHA = false;
    private async Task OnSuccess() => ValidReCAPTCHA = true;
    private async Task OnExpired() => ValidReCAPTCHA = false;

    @*///////////////////////////////////////////////  AVISO DE PRIVACIDAD PARA LA PROTECCIÓN DE DATOS PERSONALES  ////////////////////////////////////*@
    private bool aceptar_aviso_privacidad = false;

    @*///////////////////////////////////////////////  REGISTRAR USUARIO  //////////////////////////////////////////////////////////////////////*@
    private bool busyLoading = false;
    private bool DisablePostButton => ActionAddEdit == "agregar" ? !ValidReCAPTCHA || flagErrorBoletaAlumno || flagErrorPasswords || !aceptar_aviso_privacidad : !ValidReCAPTCHA || flagErrorBoletaAlumno || flagErrorPasswords;
    private string TextButton = string.Empty;
    private string BusyTextButton = string.Empty;
    private string IconButton = string.Empty;
    private string folder = "usuarios";
    private string CURP = "CURP";
    private string Comprobante_Inscripcion = "Comprobante-Inscripcion";
    private int idResponse = 0;
    private Guid oGuid = Guid.NewGuid();
    private Response<RequestViewModel_TipoPersonal> oTipoPersonal = new();
    private Response<RequestViewModel_Carrera> oCarrera = new();

    private RequestDTO_SendWhatsApp oSendWhatsApp = new();

    public async Task OnValidHandled_Registrar()
    {
        try
        {
            busyLoading = true;
            oTipoPersonal = await servicioTipoPersonal.GetDataByIdAsync(oUsuario.UsuIdTipoPersonal);
            oCarrera = await servicioCarrera.GetDataByIdAsync(oUsuario.UsuIdCarrera);
            string boleta = (IdTipoPersonal == 1 || IdTipoPersonal == 2 ? oUsuario.UsuBoletaAlumnoEgresado : oUsuario.UsuBoletaPosgrado);
            string carrera = (IdTipoPersonal == 1 || IdTipoPersonal == 2 ? oCarrera?.Data?.CarrNombre : "N/A");
            string semestre = (IdTipoPersonal == 1 || IdTipoPersonal == 2 ? oUsuario.UsuSemestre : "N/A");
            string correo_institucional = !string.IsNullOrEmpty(oUsuario.UsuCorreoInstitucionalCuenta.Trim()) ? oUsuario.UsuCorreoInstitucionalCuenta?.Trim() : "sin asignar";
            string isEgresado = flagEsEgresado ? "SI" : "NO";
            string añoEgreso = flagEsEgresado ? oUsuario.UsuAnioEgreso.ToString() : "N/A";
            string fecha_hora_alta = ActionAddEdit == "agregar" ? DateTime.Now.ToString("dddd',' dd 'de' MMMM 'del' yyyy 'a las' HH:mm:ss 'hrs.'") : oUsuario.UsuFechaHoraAlta.ToString("dddd',' dd 'de' MMMM 'del' yyyy 'a las' HH:mm:ss 'hrs.'");
            string password = ActionAddEdit == "agregar" ? oUsuario.UsuContrasenia : UsuContraseña;
            string agregar_actualizar = ActionAddEdit == "agregar" ? "registro" : "actualización de datos";
            string entrega_credenciales_acceso = !string.IsNullOrEmpty(UsuContraseña) ? "<br>Por este medio se le hace entrega de sus <b>credenciales de acceso:</b><br>" : "";
            string credenciales_acceso = !string.IsNullOrEmpty(UsuContraseña) || ActionAddEdit == "agregar" ?
                                        $@"
                                        <div align='center'>
                                            <article class='container-fluid' style='background-color: rgb(244,244,244); width:700px; border-radius:10px; padding:5px; text-align:justify;'>
				                                <div align='center'>
						                            <table style='padding:5px; border: 1px solid black; border-collapse:collapse;' >
							                            <thead>
								                            <tr style='background-color: #dddddd;'>
									                            <th scope='col' colspan='2' style='border: 1px solid black;'><b>Credenciales de Acceso a SACI</b></th>
								                            </tr>
							                            </thead>
							                            <tbody>
								                            <tr style='background-color: #ffffff;'>
									                            <td width='250px' style='border: 1px solid black;'><b>✉️ Usuario:</b></td>
									                            <td width='250px' style='border: 1px solid black;'><b>{oUsuario.UsuCorreoPersonalCuentaActual.Trim()}</b></td>
								                            </tr>
								                            <tr style='background-color: #dddddd;'>
									                            <td width='250px' style='border: 1px solid black;'><b>🔑 Contraseña:</b></td>
									                            <td width='250px' style='border: 1px solid black;'><b>{password}</b></td>
								                            </tr>
							                            </tbody>
						                            </table>
				                                </div>
			                                </article>
                                        </div>": "";

            string msgEmail = $@"<body>
	                                <header>
		                                <div align='center'>
			                                <p style='font-weight:bold; text-align:center; color:black;'>SACI | Sistema de Atención para Correos Institucionales</p>
		                                </div>
	                                </header>
	                                <main class='container-fluid'>
		                                <section>
			                                <article style='background-color: rgb(255, 255, 255); border-radius:10px; padding:5px;'>
				                                <p style='text-align:justify; color:black;'>
                                                    ℹ️ <b>POR FAVOR NO RESPONDER A ESTE CORREO.</b><br><br>
                                                    Estimad@: <br><b>{oUsuario.UsuNombres.Trim()} {oUsuario.UsuPrimerApellido.Trim()} {oUsuario.UsuSegundoApellido?.Trim()}</b><br><br>
				                                    Se le informa que su {agregar_actualizar} fué exitoso en la <b>Plataforma SACI</b>
				                                    de la Unidad Académica <b>{oEscuela?.Data?.EscNombreCorto} ({oEscuela?.Data?.EscNombreLargo})</b>.
                                                    {entrega_credenciales_acceso}
				                                </p>
			                                </article>
                                            {credenciales_acceso}
			                                <div align='center'>
				                                <article style='background-color: rgb(255, 255, 255); width:700px; border-radius:10px; padding:5px;'>
					                                <p style='color:black;'>
						                                Sus datos son los siguientes:<br>
						                                <table style='text-align:justify;'>
							                                <thead>
								                                <tr>
									                                <th scope='col' colspan='2' style='border: 1px solid black;'>Datos del Registro</th>
								                                </tr>
							                                </thead>
							                                <tbody>
								                                <tr style='background-color: #dddddd;'>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Rol</b></td>
									                                <td width='300px' style='border: 1px solid black;'>Usuario</td>
								                                </tr>
								                                <tr>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Tipo de Personal</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{oTipoPersonal?.Data?.TipoperNombre}</td>
								                                </tr>
								                                <tr style='background-color: #dddddd;'>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Nombre</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{oUsuario.UsuNombres}</td>
								                                </tr>
								                                <tr>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Primer Apellido</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{oUsuario.UsuPrimerApellido}</td>
								                                </tr>
								                                <tr style='background-color: #dddddd;'>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Segundo Apellido</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{oUsuario.UsuSegundoApellido}</td>
								                                </tr>
								                                <tr>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ CURP</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{oUsuario.UsuCurp}</td>
								                                </tr>
								                                <tr style='background-color: #dddddd;'>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ No. de Celular</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{oUsuario.UsuNoCelularActual}</td>
								                                </tr>
								                                <tr>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Boleta</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{boleta}</td>
								                                </tr>
								                                <tr style='background-color: #dddddd;'>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Carrera</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{carrera}</td>
								                                </tr>
								                                <tr>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Semestre</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{semestre}</td>
								                                </tr>
                                                                <tr>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Correo Institucional</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{correo_institucional}</td>
								                                </tr>
								                                <tr style='background-color: #dddddd;'>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Egresado</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{isEgresado}</td>
								                                </tr>
								                                <tr>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Año de Egreso</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{añoEgreso}</td>
								                                </tr>
                                                                <tr style='background-color: #dddddd;'>
									                                <td width='200px' style='border: 1px solid black;'><b>✅ Fecha / Hora de Alta</b></td>
									                                <td width='300px' style='border: 1px solid black;'>{fecha_hora_alta}</td>
								                                </tr>
							                                </tbody>
						                                </table>
					                                </p>
				                                </article>
			                                </div>
			                                <footer>
                                                <p style='color:black;'>
                                                    Que tenga un excelente día.<br>
                                                    NUESTRO MAYOR COMPROMISO ES BRINDARLE CON EFICIENCIA Y CALIDAD EL SERVICIO.
                                                </p>
                                            </footer>
		                                </section>
	                                </main>
	                                <footer>
		                                <div align='center'>
			                                
		                                </div>
	                                </footer>
                                </body>";

            string credenciales_acceso_WA = !string.IsNullOrEmpty(UsuContraseña) || ActionAddEdit == "agregar" ?
                                            "Por este medio se le hace entrega de sus _Credenciales de Acceso_ *a la Plataforma SACI*:\n\n" +
                                            "   ✉ Usuario:\n               *" + oUsuario.UsuCorreoPersonalCuentaActual + "*\n" +
                                            "   🔑 Contraseña:\n               *" + password + "*\n\n" : "";

            oSendWhatsApp.Number = oUsuario.UsuNoCelularActual.Replace(" ", string.Empty);
            oSendWhatsApp.Message = "*SACI (Sistema de Atención para Correos Institucionales)*\n" +
                                    "ℹ *POR FAVOR NO RESPONDER A ESTE MENSAJE*\n\n" +
                                    "Se le informa que su " + agregar_actualizar + " fué exitoso en la *Plataforma SACI* " + 
                                    "de la Unidad Académica *" + oEscuela?.Data?.EscNombreCorto + " (" + oEscuela?.Data?.EscNombreLargo + ")*.\n\n" +
                                    credenciales_acceso_WA +
                                    "✅ Rol: *Usuario*\n" +
                                    "✅ Tipo de Personal: *" + oTipoPersonal?.Data?.TipoperNombre + "*\n" +
                                    "✅ Nombre: *" + oUsuario.UsuNombres.Trim() + " " + oUsuario.UsuPrimerApellido.Trim() + " " + oUsuario.UsuSegundoApellido?.Trim() + "*\n" +
                                    "✅ CURP: *" + oUsuario.UsuCurp + "*\n" +
                                    "✅ No. de Celular: *" + oUsuario.UsuNoCelularActual + "*\n" +
                                    "✅ Boleta: *" + boleta + "*\n" +
                                    "✅ Carrera: *" + carrera + "*\n" +
                                    "✅ Semestre: *" + semestre + "*\n" +
                                    "✅ Correo Institucional: *" + correo_institucional + "*\n" +
                                    "✅ Egresado: *" + isEgresado + "*\n" +
                                    "✅ Año de Egreso: *" + añoEgreso + "*\n" +
                                    "✅ Fecha / Hora de Alta: *" + fecha_hora_alta + "*\n\n" +
                                    "Que tenga un excelente día.\n" +
                                    "> *NUESTRO MAYOR COMPROMISO ES BRINDARLE CON EFICIENCIA Y CALIDAD EL SERVICIO.*";

            if (ActionAddEdit == "agregar")
            {
                var verification = await servicioUsuario.ValidateByEmailCURP(oUsuario.UsuCorreoPersonalCuentaActual.Trim(), oUsuario.UsuCurp);

                if (ValidReCAPTCHA && verification?.Success == 1)
                {
                    var respuesta = await servicioUsuario.AddDataAsync(oUsuario);
                    oRespuesta = respuesta.Content.ReadFromJsonAsync<Response<object>>().Result;

                    if (respuesta.IsSuccessStatusCode && oRespuesta!.Success == 1)
                    {
                        idResponse = int.Parse(oRespuesta!.Message);

                        @*//  UPLOAD FILES  //*@
                        oUsuario.UsuFileNameCurp = $"{CURP}{Path.GetExtension(oUsuario.UsuFileNameCurp).ToLower()}";
                        oUploadFile_CURP.Url = $"/api/RepositoryFiles/UploadSingleFile/{folder}/{idResponse}/{oUsuario.UsuFileNameCurp}/{oGuid}";
                        await oUploadFile_CURP.Upload();

                        oUsuario.UsuFileNameComprobanteEstudios = $"{Comprobante_Inscripcion}{Path.GetExtension(oUsuario.UsuFileNameComprobanteEstudios).ToLower()}";
                        oUploadFile_ComprobanteInscripción.Url = $"/api/RepositoryFiles/UploadSingleFile/{folder}/{idResponse}/{oUsuario.UsuFileNameComprobanteEstudios}/{oGuid}";
                        await oUploadFile_ComprobanteInscripción.Upload();

                        @*//  ENVÍO DE WHATSAPP PARA AVISO DE REGISTRO EXITOSO  //*@
                        await servicioSendWhatsApp.SendWhatsAppAsync(oSendWhatsApp);

                        @*//  ENVÍO DE CORREO ELECTRÓNICO PARA AVISO DE REGISTRO EXITOSO  //*@
                        servicioSendEmail.SendEmailAsync(
                            new RequestDTO_SendEmail()
                            {
                                EmailTo = oUsuario.UsuCorreoPersonalCuentaActual.Trim(),
                                Subject = "SACI | REGISTRO DE USUARI@",
                                Body = msgEmail
                            });

                        @*//  NOTIFICATION TOAST REGISTRO EXITOSO  //*@
                        NotificationService.Notify(
                            new NotificationMessage
                            {
                                Severity = NotificationSeverity.Success,
                                Duration = 3000,
                                Summary = "¡Registro Exitoso!",
                                Detail = "Se guardaron sus datos y se notificará por las vías de comunicación."
                                // SummaryContent = ns => @<RadzenText TextStyle="TextStyle.H6">Custom summary: <br /> @DateTime.Now</RadzenText>,
                                // DetailContent = ns => @<RadzenButton Text="Clear" Click="@(args => ns.Messages.Clear())" />
                            });

                        @*//  DIALOG MESSAGE REGISTRO EXITOSO  //*@
                        await DialogModalService.OpenAsync($@"<span style='font-variant: small-caps; font-size:18px;'>Mensaje<span>", ds =>
                            @<div>
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Gap="5px" Class="">
                                    <span class="circle-border">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-check-lg" viewBox="0 0 16 16" style="color: green; font-weight: bold;">
                                            <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z" />
                                        </svg>
                                    </span>
                                    <RadzenText TextStyle="TextStyle.Body1" class="text-success"><b>¡Registro Exitoso de Usuari@@!</b></RadzenText>
                                </RadzenStack>
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.NoWrap" Gap="5px" Class="">
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">@(oUsuario.UsuIdRol == 2 ? "Usuario" : "Administrador"):</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@oTipoPersonal.Data.TipoperNombre</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Nombre Completo:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@oUsuario.UsuNombres.Trim() @oUsuario.UsuPrimerApellido.Trim() @oUsuario.UsuSegundoApellido?.Trim()</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">CURP:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@oUsuario.UsuCurp</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Boleta:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@(IdTipoPersonal == 1 || IdTipoPersonal == 2 ? oUsuario.UsuBoletaAlumnoEgresado : oUsuario.UsuBoletaPosgrado)</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Carrera:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@(IdTipoPersonal == 1 || IdTipoPersonal == 2 ? oCarrera?.Data?.CarrNombre : "N/A")</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Semestre:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@(IdTipoPersonal == 1 || IdTipoPersonal == 2 ? oUsuario.UsuSemestre : "N/A")</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Correo Electrónico Personal:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@oUsuario.UsuCorreoPersonalCuentaActual</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">¿Egresado?:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@(flagEsEgresado ? "SI" : "NO")</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Año de Egreso:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@(flagEsEgresado ? oUsuario.UsuAnioEgreso : "N/A")</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenButton Text="Cerrar"
                                                  BusyText=""
                                                  ButtonStyle="ButtonStyle.Warning"
                                                  ButtonType="ButtonType.Button"
                                                  IsBusy="false"
                                                  Icon="cancel"
                                                  class="rz-color-white rz-ripple rz-my-0 w-100"
                                                  Shade="Shade.Darker"
                                                  Click="@(() => navigationManager.NavigateTo("/"))" />
                                </RadzenStack>
                            </div>,
                            new DialogOptions()
                            {
                                CloseDialogOnOverlayClick = false,
                                CloseDialogOnEsc = false,
                                Width = "Auto",
                                Height = "Auto",
                                Resizable = true,
                                ShowTitle = true,
                                ShowClose = true,
                                Draggable = true,
                                CssClass = "custom-dialog-class",
                                WrapperCssClass = "custom-dialog-wrapper-class"
                            });

                        navigationManager.NavigateTo("/login");
                    }
                    else
                    {
                        await servicioSendEmail.SendEmailAsync(
                            new RequestDTO_SendEmail()
                            {
                                EmailTo = oUsuario.UsuCorreoPersonalCuentaActual.Trim(),
                                Subject = "SACI | ERROR DE REGISTRO",
                                Body = "Estimad@: " + oUsuario.UsuNombres + " " + oUsuario.UsuPrimerApellido + " " + oUsuario.UsuSegundoApellido + "<br><br>" +
                                       "Registro NO exitoso en el <b>Sistema de Atención para Correos Institucionales (SACI)</b><br>" +
                                       "Por favor no responder a este correo, acuda a la unidad de informática de tu escuela<br>"
                            });
                    }
                }
                else
                {
                    await DialogModalService.OpenAsync($@"<span style='font-variant: small-caps; font-size:18px;'>Validación de Datos<span>", ds =>
                        @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="">
                            <RadzenAlert Title="Error" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker" ShowIcon="true" AllowClose="false"
                                         Visible="true" Class="rz-border-radius-1">
                                         El <strong>Correo Electrónico Personal y/o CURP</strong> ya están registrados por lo que <b>NO</b> puede volverse a registrar con estos datos.
                            </RadzenAlert>
                        </RadzenStack>,
                        new DialogOptions()
                        {
                            CloseDialogOnOverlayClick = true,
                            CloseDialogOnEsc = true,
                            Width = "500px",
                            Height = "Auto",
                            Resizable = true,
                            ShowTitle = true,
                            ShowClose = true,
                            Draggable = true,
                            CssClass = "custom-dialog-class",
                            WrapperCssClass = "custom-dialog-wrapper-class"
                        });
                }
            }
            else if (ActionAddEdit == "actualizar")
            {
                // var verification = await servicioUsuario.ValidateByEmailCURP(oUsuario.UsuCorreoPersonalCuentaActual, oUsuario.UsuCurp);

                if (ValidReCAPTCHA)
                {
                    var respuesta = await servicioUsuario.EditDataAsync(oUsuario);
                    oRespuesta = respuesta.Content.ReadFromJsonAsync<Response<object>>().Result;

                    if (respuesta.IsSuccessStatusCode && oRespuesta!.Success == 1)
                    {
                        @*//  UPLOAD FILES  //*@
                        idResponse = oUsuario.IdUsuario;

                        if (!string.IsNullOrEmpty(oUsuario.UsuFileNameCurp))
                        {
                            oUsuario.UsuFileNameCurp = $"{CURP}{Path.GetExtension(oUsuario.UsuFileNameCurp).ToLower()}";
                            oUploadFile_CURP.Url = $"/api/RepositoryFiles/UploadSingleFile/{folder}/{idResponse}/{oUsuario.UsuFileNameCurp}/{oGuid}";
                            await oUploadFile_CURP.Upload();
                        }

                        if (!string.IsNullOrEmpty(oUsuario.UsuFileNameComprobanteEstudios))
                        {
                            oUsuario.UsuFileNameComprobanteEstudios = $"{Comprobante_Inscripcion}{Path.GetExtension(oUsuario.UsuFileNameComprobanteEstudios).ToLower()}";
                            oUploadFile_ComprobanteInscripción.Url = $"/api/RepositoryFiles/UploadSingleFile/{folder}/{idResponse}/{oUsuario.UsuFileNameComprobanteEstudios}/{oGuid}";
                            await oUploadFile_ComprobanteInscripción.Upload();
                        }

                        // var responseUsuario = await servicioUsuario.GetDataByIdAsync(oUsuario.IdUsuario);
                        // oUsuario = responseUsuario.Data;
                        // srcCURP = $@"/Repositorio/{folder}/{oUsuario.IdUsuario}/{oUsuario.IdUsuario}_{oUsuario.UsuFileNameCurp}";
                        // srcComprobanteInscripcion = $@"/Repositorio/{folder}/{oUsuario.IdUsuario}/{oUsuario.IdUsuario}_{oUsuario.UsuFileNameComprobanteEstudios}";
                        
                        @*//  NOTIFICATION TOAST ACTUALIZACIÓN DE DATOS EXITOSO  //*@
                        NotificationService.Notify(
                            new NotificationMessage
                            {
                                Severity = NotificationSeverity.Success,
                                Duration = 3000,
                                Summary = "¡Actualización Correcta!",
                                Detail = "Se guardaron los cambios."
                                // SummaryContent = ns => @<RadzenText TextStyle="TextStyle.H6">Custom summary: <br /> @DateTime.Now</RadzenText>,
                                // DetailContent = ns => @<RadzenButton Text="Clear" Click="@(args => ns.Messages.Clear())" />
                            });

                        @*//  DIALOG MESSAGE ACTUALIZACIÓN DE DATOS EXITOSA  //*@
                        await DialogModalService.OpenAsync($@"<span style='font-variant: small-caps; font-size:18px;'>Mensaje<span>", ds =>
                            @<div>
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Gap="5px" Class="">
                                    <span class="circle-border">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-check-lg" viewBox="0 0 16 16" style="color: green; font-weight: bold;">
                                            <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z" />
                                        </svg>
                                    </span>
                                    <RadzenText TextStyle="TextStyle.Body1" class="text-success"><b>Se actualizaron correctamente los datos.</b></RadzenText>
                                </RadzenStack>
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.NoWrap" Gap="5px" Class="">
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">@(oUsuario.UsuIdRol == 2 ? "Usuario" : "Administrador"):</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@oTipoPersonal.Data.TipoperNombre</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Nombre Completo:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@oUsuario.UsuNombres @oUsuario.UsuPrimerApellido @oUsuario.UsuSegundoApellido</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">CURP:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@oUsuario.UsuCurp</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Boleta:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@(IdTipoPersonal == 1 || IdTipoPersonal == 2 ? oUsuario.UsuBoletaAlumnoEgresado : oUsuario.UsuBoletaPosgrado)</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Carrera:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@oCarrera.Data.CarrNombre</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Semestre:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@oUsuario.UsuSemestre</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Correo Electrónico Personal:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@oUsuario.UsuCorreoPersonalCuentaActual</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">¿Egresado?:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@(flagEsEgresado ? "SI" : "NO")</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Año de Egreso:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@(flagEsEgresado ? oUsuario.UsuAnioEgreso : "N/A")</b></RadzenText>
                                    </RadzenStack>
                                    <RadzenAlert Title="Atención:" Text="" AlertStyle="AlertStyle.Info" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Light"
                                                 ShowIcon="true" AllowClose="false" class="mb-0" Visible="@(!string.IsNullOrEmpty(UsuContraseña) || onChangeSelectBarEgresado)">
                                                 <ul>
                                                     @if (!string.IsNullOrEmpty(UsuContraseña))
                                                     {
                                                        <li>Se le notificará por las vías de comunicación con la nueva contraseña y actualización de sus datos.</li>
                                                     }
                                                     @if (onChangeSelectBarEgresado)
                                                     {
                                                        <li>Se le notificará por las vías de comunicación como usuario @oTipoPersonal.Data.TipoperNombre y actualización de sus datos.</li>
                                                     }
                                                     <li>Se cerrará la sesión.</li>
                                                 </ul>
                                    </RadzenAlert>
                                    <RadzenButton Text="Cerrar"
                                                  BusyText=""
                                                  ButtonStyle="ButtonStyle.Warning"
                                                  ButtonType="ButtonType.Button"
                                                  IsBusy="false"
                                                  Icon="cancel"
                                                  class="rz-color-white rz-ripple rz-my-0 w-100"
                                                  Shade="Shade.Darker"
                                                  Click="@(() => ds.Close(false))" />
                                </RadzenStack>
                            </div>,
                            new DialogOptions()
                            {
                                CloseDialogOnOverlayClick = false,
                                CloseDialogOnEsc = false,
                                Width = "Auto",
                                Height = "Auto",
                                Resizable = true,
                                ShowTitle = true,
                                ShowClose = true,
                                Draggable = true,
                                CssClass = "custom-dialog-class",
                                WrapperCssClass = "custom-dialog-wrapper-class"
                            });

                        if (!string.IsNullOrEmpty(UsuContraseña) || onChangeSelectBarEgresado)
                        {
                            @*//  NOTIFICATION TOAST ACTUALIZACIÓN EXITOSA  //*@
                            NotificationService.Notify(
                                new NotificationMessage
                                {
                                    Severity = NotificationSeverity.Success,
                                    Duration = 3000,
                                    Summary = "¡Actualización Correcta!",
                                    Detail = "Se guardaron los cambios y se cerrará la sesión."
                                    // SummaryContent = ns => @<RadzenText TextStyle="TextStyle.H6">Custom summary: <br /> @DateTime.Now</RadzenText>,
                                    // DetailContent = ns => @<RadzenButton Text="Clear" Click="@(args => ns.Messages.Clear())" />
                                });

                            @*//  DIALOG MODAL MESSAGE ACTUALIZACIÓN EXITOSA  //*@
                            DialogModalService.Open($@"<span style='font-variant: small-caps; font-size:18px;'>Enviando notificaciones y cerrando sesión...<span>", ds =>
                                @<div>
                                    <LoadingComponent />
                                </div>,
                                new DialogOptions()
                                {
                                    CloseDialogOnOverlayClick = false,
                                    CloseDialogOnEsc = false,
                                    Width = "Auto",
                                    Height = "Auto",
                                    Resizable = true,
                                    ShowTitle = true,
                                    ShowClose = true,
                                    Draggable = true,
                                    CssClass = "custom-dialog-class",
                                    WrapperCssClass = "custom-dialog-wrapper-class"
                                });

                            @*//  ENVÍO DE WHATSAPP PARA ACTUALIZACIÓN DE DATOS EXITOSO  //*@
                            await servicioSendWhatsApp.SendWhatsAppAsync(oSendWhatsApp);

                            @*//  ENVÍO DE EMAIL PARA ACTUALIZACIÓN DE DATOS EXITOSO  //*@
                            servicioSendEmail.SendEmailAsync(
                                new RequestDTO_SendEmail()
                                {
                                    EmailTo = oUsuario.UsuCorreoPersonalCuentaActual.Trim(),
                                    Subject = "SACI | Actualización de Datos",
                                    Body = msgEmail
                                });

                            await loginService.Logout();
                        }

                        navigationManager.Refresh(true);
                    }
                    else
                    {
                        await servicioSendEmail.SendEmailAsync(new RequestDTO_SendEmail()
                            {
                                EmailTo = oUsuario.UsuCorreoPersonalCuentaActual.Trim(),
                                Subject = "SACI | ERROR EN ACTUALIZACIÓN DE DATOS",
                                Body = "Estimad@: " + oUsuario.UsuNombres.Trim() + " " + oUsuario.UsuPrimerApellido.Trim() + " " + oUsuario.UsuSegundoApellido?.Trim() + "<br><br>" +
                                       "Actualización de datos NO exitosa en el <b>Sistema de Atención de Correos Institucionales IPN (SACI)</b><br>"
                            });
                    }
                }
                else
                {
                    await DialogModalService.OpenAsync($@"<span style='font-variant: small-caps; font-size:18px;'>Validación de Datos<span>", ds =>
                        @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="">
                            <RadzenAlert Title="Error" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker" ShowIcon="true" AllowClose="true"
                                         Visible="true" Class="rz-border-radius-1">
                                         El <strong>Correo Electrónico Personal y/o CURP</strong> ya están registrados por lo que <b>NO</b> puede volverse a registrar con estos datos.
                            </RadzenAlert>
                        </RadzenStack>,
                        new DialogOptions()
                        {
                            CloseDialogOnOverlayClick = true,
                            CloseDialogOnEsc = true,
                            Width = "500px",
                            Height = "Auto",
                            Resizable = true,
                            ShowTitle = true,
                            ShowClose = true,
                            Draggable = true,
                            CssClass = "custom-dialog-class",
                            WrapperCssClass = "custom-dialog-wrapper-class"
                        });
                }
            }
        }
        catch (HttpRequestException e)
        {
            await JSRuntime.InvokeAsync<object>("alert", e.Message);
        }
        finally
        {
            busyLoading = false;
            // if (ActionAddEdit == "actualizar" && (oFileInfoCURP is not null || oFileInfoComprobanteInscripcion is not null || !string.IsNullOrEmpty(UsuContraseña) || onChangeSelectBarEgresado))
            //     navigationManager.Refresh(true);
        }
    }

    @*///////////////////////////////////////////////  SHOW DIALOG MODAL iFRAME  //////////////////////////////////////////////////////////////////////*@
    private async Task ShowDialogModal_iFrame(string srciFrame, string title)
    {
        await DialogModalService.OpenAsync($@"<span style='font-variant: small-caps; font-size:18px;'>{title}<span>", ds =>
            @<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="5px" class="w-100">
                <RadzenCard class="rz-shadow-0 rz-border-radius-0 rz-m-0 rz-p-0 w-100">
                    <iframe src="@srciFrame" frameborder="1" scrolling="yes" class="w-100" style="height:500px;" />
                </RadzenCard>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.NoWrap" Gap="5px" class="w-100">
                    <RadzenButton Text="Cerrar"
                                  BusyText=""
                                  ButtonStyle="ButtonStyle.Warning"
                                  ButtonType="ButtonType.Button"
                                  IsBusy="false"
                                  Icon="cancel"
                                  class="rz-color-white rz-ripple rz-my-0 w-100"
                                  Shade="Shade.Darker"
                                  Click="@(() => ds.Close(false))" />
                    <a href="@srciFrame" target="_blank" class="w-100">
                        <RadzenButton Text="Descargar"
                                      BusyText=""
                                      ButtonStyle="ButtonStyle.Secondary"
                                      ButtonType="ButtonType.Button"
                                      IsBusy="false"
                                      Icon="download"
                                      class="rz-ripple rz-my-0 w-100"
                                      Shade="Shade.Dark" />
                    </a>
                </RadzenStack>
            </RadzenStack>,
            new DialogOptions()
            {
                CloseDialogOnOverlayClick = true,
                CloseDialogOnEsc = true,
                Width = "600px",
                Height = "Auto",
                Resizable = true,
                ShowTitle = true,
                ShowClose = true,
                Draggable = true,
                CssClass = "custom-dialog-class",
                WrapperCssClass = "custom-dialog-wrapper-class"
            });
    }
}

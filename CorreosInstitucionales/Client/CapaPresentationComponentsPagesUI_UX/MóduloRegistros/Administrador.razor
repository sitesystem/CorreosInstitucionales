@page "/Administradores"

@attribute [AllowAnonymous]

<style type="text/css"></style>
<EditForm Model="@oUsuario" OnValidSubmit="@OnValidHandled_Editar" OnInvalidSubmit="@OnInvalidHandled_ScrollToTop">

    <DataAnnotationsValidator />

    <!-- ******************************************************************* DATOS PERSONALES ******************************************************************* -->
    <RadzenFieldset AllowCollapse="true" ExpandTitle="Datos Personales" CollapseTitle="Datos Personales" ExpandAriaLabel="" CollapseAriaLabel="" Class="rz-border-base-500 rz-border-radius-1 rz-shadow-3">
        <HeaderTemplate>
            <span class="d-inline-flex align-items-center align-middle">
                <RadzenIcon Icon="account_box" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Datos Personales</b>
            </span>
        </HeaderTemplate>
        <ChildContent>
            <div class="row">
                 <div class="col-md-4 col-lg-4">
                    <RadzenFormField Text="Nombre(s)" AllowFloatingLabel="false" Placeholder="Nombre(s)" AllowClear="true" Variant="Variant.Flat" Class="w-100 mt-3" Disabled="false">
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@oUsuario.UsuNombre" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="200"
                                           @oninput="@((e) => oUsuario.UsuNombre = e.Value.ToString().ToUpper())"
                                           onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                        </ChildContent>
                        <Helper><RadzenText TextStyle="TextStyle.Caption"></RadzenText></Helper>
                    </RadzenFormField>
                    <ValidationMessage For="@(() => oUsuario.UsuNombre)" />
                 </div>
                <div class="col-md-4 col-lg-4">
                    <RadzenFormField Text="Primer Apellido" AllowFloatingLabel="false" Placeholder="Primer Apellido" AllowClear="true" Variant="Variant.Flat" Class="w-100 mt-3" Disabled="false">
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@oUsuario.UsuPrimerApellido" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="150"
                                           @oninput="@((e) => oUsuario.UsuPrimerApellido = e.Value.ToString().ToUpper())"
                                           onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                        </ChildContent>
                        <Helper><RadzenText TextStyle="TextStyle.Caption"></RadzenText></Helper>
                    </RadzenFormField>
                    <ValidationMessage For="@(() => oUsuario.UsuPrimerApellido)" />
                </div>
                <div class="col-md-4 col-lg-4">
                    <RadzenFormField Text="Segundo Apellido" AllowFloatingLabel="false" AllowClear="true" Variant="Variant.Flat" Class="w-100 mt-3" Disabled="false">
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@oUsuario.UsuSegundoApellido" MinLength="0" MaxLength="150" Placeholder="Segundo Apellido"
                                           @oninput="@((e) => oUsuario.UsuSegundoApellido = e.Value.ToString().ToUpper())"
                                           onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                        </ChildContent>
                        <Helper><RadzenText TextStyle="TextStyle.Caption"></RadzenText></Helper>
                    </RadzenFormField>
                    <ValidationMessage For="@(() => oUsuario.UsuSegundoApellido)" />
                </div>
            </div>
        </ChildContent>
        <SummaryTemplate>
            <ValidationSummary />
        </SummaryTemplate>
    </RadzenFieldset>

    <!-- ******************************************************************* CARD DATOS DE LA CUENTA ******************************************************************* -->
    <RadzenFieldset AllowCollapse="true" ExpandTitle="Datos de la Cuenta SACI" CollapseTitle="Datos de la Cuenta SACI" ExpandAriaLabel="" CollapseAriaLabel="" class="rz-border-base-500 rz-border-radius-1 rz-shadow-3 mt-3">
        <HeaderTemplate>
            <span class="d-inline-flex align-items-center align-middle">
                <RadzenIcon Icon="account_circle" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Datos de la Cuenta SACI</b>
            </span>
        </HeaderTemplate>
        <ChildContent>
            <div class="row">
                <div class="col-md-4 col-lg-4">
                    <RadzenFormField Text="Correo Electronico" AllowFloatingLabel="false" Placeholder="Correo Electronico" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                        <Start><RadzenIcon Icon="email" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@oUsuario.UsuCorreoPersonalCuentaNueva" style="border-bottom: 3px solid red;" />
                        </ChildContent>
                    </RadzenFormField>
                    <ValidationMessage For="@(() => oUsuario.UsuCorreoPersonalCuentaNueva)" />
                </div>
                <div class="col-md-4 col-lg-4">
                    <RadzenFormField Text="Contraseña" AllowFloatingLabel="false" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                        <Start><RadzenIcon Icon="vpn_key" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@oUsuario.UsuContraseña" style="border-bottom: 3px solid red;" />
                        </ChildContent>
                    </RadzenFormField>
                    <ValidationMessage For="@(() => oUsuario.UsuContraseña)" />
                </div>
                <div class="col-md-4 col-lg-4">
                    <RadzenFormField Text="Confirmar Contraseña" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                        <Start><RadzenIcon Icon="lock" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@UsuConfirmarContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20"
                                           @oninput="(e => UsuConfirmarContraseña = e.Value.ToString())"
                                           @onkeyup="@CompararContraseñas"
                                           Visible="@(!VisibleConfirmarContraseña)" />
                            <RadzenPassword Name="@($@"confirmar_contraseña_visible_{TipoPersonal}")" @bind-Value="@UsuConfirmarContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                            @oninput="(e => UsuConfirmarContraseña = e.Value.ToString())"
                                            @onkeyup="@CompararContraseñas"
                                            Visible="@VisibleConfirmarContraseña" />
                        </ChildContent>
                        <End>
                            <RadzenButton Icon="@(VisibleConfirmarContraseña ? "visibility" : "visibility_off")"
                                          Click="ToggleConfirmarContraseña"
                                          Variant="Variant.Text"
                                          Size="ButtonSize.Small"
                                          ButtonStyle="ButtonStyle.Secondary"
                                          Shade="Shade.Dark" />
                        </End>
                        <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                    </RadzenFormField>
                    <RadzenAlert Title="Ingresa las contraseñas" Text="Verificar que coincidan." AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker"
                                 ShowIcon="true" AllowClose="false" class="mb-0" @bind-Visible="flagErrorPasswords" />
                </div>
            </div>
        </ChildContent>
        <SummaryTemplate>
            <ValidationSummary />
        </SummaryTemplate>
    </RadzenFieldset>

    <!-- ******************************************************************* CARD ReCAPTCHA ******************************************************************* -->
    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.Wrap" Gap="10px" Class="rz-mt-5">
        <ReCAPTCHA @ref="oReCAPTCHAComponent" SiteKey="6Ld6058pAAAAACiEYq0Khine3FWbHZpfyEraTlOX" OnSuccess="OnSuccess" OnExpired="OnExpired" />
        <ValidationSummary class="rz-my-0" />
        <RadzenButton Text="@TextButton"
                      BusyText="@BusyTextButton"
                      ButtonStyle="ButtonStyle.Success"
                      ButtonType="ButtonType.Submit"
                      IsBusy="@busyLoading"
                      Icon="@IconButton"
                      Class="w-100 rz-ripple"
                      Shade="Shade.Default"
                      Disabled="false"
                      Size="ButtonSize.Large"
                      Variant="Variant.Filled" />
    </RadzenStack>
</EditForm>
    

@code {
    @*///////////////////////////////////////////////  OBTENER PARÁMETROS PARA AGREGAR O ACTUALIZAR DATA  ///////////////////////////////////////////////*@
    [Parameter] public RequestDTO_Usuario? oEditUsuario { get; set; }

    @*///////////////////////////////////////////////  OBTENER PARÁMETROS DEL TIPO DE PERSONAL  ///////////////////////////////////////////////*@
    [Parameter] public int IdTipoPersonal { get; set; }
    [Parameter] public string? TipoPersonal { get; set; }

    @*///////////////////////////////////////////////  INICIALIZAR OBJETO DEL USUARIO  ///////////////////////////////////////////////*@
    private RequestDTO_Usuario? oUsuario = new();

    @*///////////////////////////////////////////////  INICIALIZAR OBJETOS Y OBTENER DATA ASYNC  ///////////////////////////////////////////////*@
    public Response<object>? oRespuesta = new();

    protected override async Task OnInitializedAsync()
    {


        IconButton = "save_as";
        TextButton = "Editar Datos";
        BusyTextButton = "Actualizando Datos ...";
    }

    @*///////////////////////////////////////////////  VALIDAR CAMPOS CONTRASEÑA Y CONFIRMAR CONTRASEÑA  ///////////////////////////////////////////////*@
    // Hacer visible las Contraseñas con el ícono eye
    private bool VisibleContraseña = true;
    private bool VisibleConfirmarContraseña = true;
    private async Task ToggleContraseña() => VisibleContraseña = !VisibleContraseña;
    private async Task ToggleConfirmarContraseña() => VisibleConfirmarContraseña = !VisibleConfirmarContraseña;

    // Comparar las Contraseñas
    private string UsuContraseña = string.Empty;
    private string UsuConfirmarContraseña = string.Empty;
    public bool flagErrorPasswords = false;
    private async Task CompararContraseñas()
    {
        flagErrorPasswords = !string.Equals(UsuContraseña, UsuConfirmarContraseña, StringComparison.Ordinal);
        oUsuario.UsuContraseña = !string.IsNullOrEmpty(UsuContraseña) && !flagErrorPasswords ? CorreosInstitucionales.Shared.CapaTools.Encrypt.GetSHA256(UsuContraseña) : oEditUsuario.UsuContraseña;
    }

    @*///////////////////////////////////////////////  VALIDAR ReCAPTCHA  ////////////////////////////////////////////////////////////////////////*@
    private ReCAPTCHA oReCAPTCHAComponent;
    // private bool ServerVerificatiing = false;
    private bool ValidReCAPTCHA = false;
    private async Task OnSuccess() => ValidReCAPTCHA = true;
    private async Task OnExpired() => ValidReCAPTCHA = false;

    @*///////////////////////////////////////////////  VALIDAR CAMPOS DEL FORMULARIO CON DATA_NOTATIONS  ///////////////////////////////////////////////*@
    private async Task OnInvalidHandled_ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('names_{TipoPersonal}').select()");
    }

    @*///////////////////////////////////////////////  REGISTRAR USUARIO  //////////////////////////////////////////////////////////////////////*@
    private bool busyLoading = false;
    private string TextButton = string.Empty;
    private string BusyTextButton = string.Empty;
    private string IconButton = string.Empty;


    public async Task OnValidHandled_Editar()
    {
        try
        {
            if(ValidReCAPTCHA){
                var respuesta = await servicioUsuario.EditDataAsync(oUsuario);
                oRespuesta = respuesta.Content.ReadFromJsonAsync<Response<object>>().Result;
                if (oRespuesta.Success == 1)
                {
                    var responseUsuario = await servicioUsuario.GetDataByIdAsync(oUsuario.IdUsuario);
                    oUsuario = responseUsuario.Data;
                }
            }
        }
        catch (HttpRequestException e)
        {
            await JSRuntime.InvokeAsync<object>("alert", e.Message);
        }
        finally
        {
            busyLoading = false;
            navigationManager.Refresh(true);
        }
    }
}

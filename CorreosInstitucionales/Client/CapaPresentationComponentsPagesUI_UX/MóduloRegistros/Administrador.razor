@page "/Administradores"

@attribute [AllowAnonymous]

<style type="text/css"></style>
@if (oAreasDeptos is not null && oAreasDeptos != null)
{
    <EditForm Model="@oUsuario" OnValidSubmit="@OnValidHandled_Editar" OnInvalidSubmit="@OnInvalidHandled_ScrollToTop">

        <DataAnnotationsValidator />

        <!-- ******************************************************************* DATOS PERSONALES ******************************************************************* -->
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Datos Personales" CollapseTitle="Datos Personales" ExpandAriaLabel="" CollapseAriaLabel="" Class="rz-border-base-500 rz-border-radius-1 rz-shadow-3">
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="account_box" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Datos Personales</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <div class="row">
                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Nombre(s)" AllowFloatingLabel="false" Placeholder="Nombre(s)" AllowClear="true" Variant="Variant.Flat" Class="w-100 mt-3" Disabled="false">
                            <ChildContent>
                                <RadzenTextBox id="@($@"names_{TipoPersonal}")" @bind-Value="@oUsuario!.UsuNombres" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="200"
                                               @oninput="@((e) => oUsuario!.UsuNombres = e.Value.ToString().ToUpper())"
                                               onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                            </ChildContent>
                            <Helper><RadzenText TextStyle="TextStyle.Caption"></RadzenText></Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario!.UsuNombres)" />
                    </div>
                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Primer Apellido" AllowFloatingLabel="false" Placeholder="Primer Apellido" AllowClear="true" Variant="Variant.Flat" Class="w-100 mt-3" Disabled="false">
                            <ChildContent>
                                <RadzenTextBox Name="@($@"lastName1_{TipoPersonal}")" @bind-Value="@oUsuario!.UsuPrimerApellido" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="150"
                                               @oninput="@((e) => oUsuario!.UsuPrimerApellido = e.Value.ToString().ToUpper())"
                                               onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                            </ChildContent>
                            <Helper><RadzenText TextStyle="TextStyle.Caption"></RadzenText></Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario!.UsuPrimerApellido)" />
                    </div>
                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Segundo Apellido" AllowFloatingLabel="false" AllowClear="true" Variant="Variant.Flat" Class="w-100 mt-3" Disabled="false">
                            <ChildContent>
                                <RadzenTextBox Name="@($@"lastName2_{TipoPersonal}")" @bind-Value="@oUsuario!.UsuSegundoApellido" MinLength="0" MaxLength="150" Placeholder="Segundo Apellido"
                                               @oninput="@((e) => oUsuario!.UsuSegundoApellido = e.Value.ToString().ToUpper())"
                                               onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                            </ChildContent>
                            <Helper><RadzenText TextStyle="TextStyle.Caption"></RadzenText></Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario!.UsuSegundoApellido)" />
                    </div>
                </div>
            </ChildContent>
            <SummaryTemplate>
                <ValidationSummary />
            </SummaryTemplate>
        </RadzenFieldset>

        <!-- ******************************************************************* CARD DATOS DE LA CUENTA ******************************************************************* -->
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Datos de la Cuenta SACI" CollapseTitle="Datos de la Cuenta SACI" ExpandAriaLabel="" CollapseAriaLabel="" class="rz-border-base-500 rz-border-radius-1 rz-shadow-3 mt-3">
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="account_circle" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Datos de la Cuenta SACI</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <div class="row">
                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Correo Electronico" AllowFloatingLabel="false" Placeholder="Correo Electronico" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="email" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox @bind-Value="@oUsuario!.UsuCorreoPersonalCuentaActual" style="border-bottom: 3px solid red;" />
                            </ChildContent>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario!.UsuCorreoPersonalCuentaActual)" />
                    </div>
                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Contraseña" AllowFloatingLabel="false" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="vpn_key" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox Name="@($@"contraseña_{TipoPersonal}")" @bind-Value="@UsuContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                               Visible="@(!VisibleContraseña)"
                                               @oninput="(e => UsuContraseña = e.Value.ToString())"
                                               @onkeyup="@CompararContraseñas" />
                                <RadzenPassword Name="@($@"contraseña_visible_{TipoPersonal}")" @bind-Value="@UsuContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                                Visible="@VisibleContraseña"
                                                @oninput="(e => UsuContraseña = e.Value.ToString())"
                                                @onkeyup="@CompararContraseñas" />
                            </ChildContent>
                            <End>
                                <RadzenButton Icon="@(VisibleContraseña ? "visibility" : "visibility_off")"
                                              Click="@ToggleContraseña"
                                              Variant="Variant.Text"
                                              Size="ButtonSize.Small"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Shade="Shade.Dark" />
                            </End>
                            <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuContrasenia)" />
                    </div>
                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Confirmar Contraseña" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="lock" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox @bind-Value="@UsuConfirmarContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20"
                                               @oninput="(e => UsuConfirmarContraseña = e.Value.ToString())"
                                               @onkeyup="@CompararContraseñas"
                                               Visible="@(!VisibleConfirmarContraseña)" />
                                <RadzenPassword Name="@($@"confirmar_contraseña_visible_{TipoPersonal}")" @bind-Value="@UsuConfirmarContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                                @oninput="(e => UsuConfirmarContraseña = e.Value.ToString())"
                                                @onkeyup="@CompararContraseñas"
                                                Visible="@VisibleConfirmarContraseña" />
                            </ChildContent>
                            <End>
                                <RadzenButton Icon="@(VisibleConfirmarContraseña ? "visibility" : "visibility_off")"
                                              Click="ToggleConfirmarContraseña"
                                              Variant="Variant.Text"
                                              Size="ButtonSize.Small"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Shade="Shade.Dark" />
                            </End>
                            <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                        </RadzenFormField>
                        <RadzenAlert Title="Ingresa las contraseñas" Text="Verificar que coincidan." AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker"
                                     ShowIcon="true" AllowClose="false" class="mb-0" @bind-Visible="flagErrorPasswords" />
                    </div>
                </div>
            </ChildContent>
            <SummaryTemplate>
                <ValidationSummary />
            </SummaryTemplate>
        </RadzenFieldset>

        <!-- ******************************************************************* CARD ReCAPTCHA ******************************************************************* -->
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.Wrap" Gap="10px" Class="rz-mt-5">
            <ReCAPTCHA @ref="oReCAPTCHAComponent" SiteKey="6Ld6058pAAAAACiEYq0Khine3FWbHZpfyEraTlOX" OnSuccess="OnSuccess" OnExpired="OnExpired" />
            <ValidationSummary class="rz-my-0" />
            <RadzenButton Text="@TextButton"
                          BusyText="@BusyTextButton"
                          ButtonStyle="ButtonStyle.Success"
                          ButtonType="ButtonType.Submit"
                          IsBusy="@busyLoading"
                          Icon="@IconButton"
                          class="w-100 rz-ripple"
                          Shade="Shade.Default"
                          Disabled="false"
                          Size="ButtonSize.Large"
                          Variant="Variant.Filled" />
        </RadzenStack>
    </EditForm>
}
else
{
    <LoadingComponent />
}

@code {
    @*///////////////////////////////////////////////  OBTENER PARÁMETROS PARA AGREGAR O ACTUALIZAR DATA  ///////////////////////////////////////////////*@
    [Parameter] public RequestDTO_Usuario? oEditUsuario { get; set; }

    @*///////////////////////////////////////////////  OBTENER PARÁMETROS DEL TIPO DE PERSONAL  ///////////////////////////////////////////////*@
    [Parameter] public int IdTipoPersonal { get; set; }
    [Parameter] public string? TipoPersonal { get; set; }

    @*///////////////////////////////////////////////  INICIALIZAR OBJETO DEL USUARIO  ///////////////////////////////////////////////*@
    private RequestDTO_Usuario? oUsuario = new();

    @*///////////////////////////////////////////////  INICIALIZAR OBJETOS Y OBTENER DATA ASYNC  ///////////////////////////////////////////////*@
    public Response<object>? oRespuesta = new();
    public Response<List<RequestViewModel_AreaDepto>>? oAreasDeptos = new();
    private Response<RequestViewModel_Escuela>? oEscuela = new();

    protected override async Task OnInitializedAsync()
    {
        @* DATOS ID DEL USUARIO *@
        oUsuario!.IdUsuario = oEditUsuario!.IdUsuario;
        oUsuario.UsuIdRol = oEditUsuario.UsuIdRol;                          // FK ID del Rol (1 - Administrador, 2 - Usuario Solicitante)
        oUsuario.UsuIdTipoPersonal = oEditUsuario.UsuIdTipoPersonal;        // FK ID del Tipo de Personal ([1 - Alumno Inscrito], [2 - Alumno Egresado], [3 - Maestria], [4 - Administrativo], [5 - Docente], [6 - Honorarios], [7 - Personal de la UDI])
        @* DATOS PERSONALES *@
        oUsuario.UsuNombres = oEditUsuario.UsuNombres;                      // Nombre del Usuario Solicitante o Administrador
        oUsuario.UsuPrimerApellido = oEditUsuario.UsuPrimerApellido;        // Primer Apellido del Usuario Solicitante o Administrador
        oUsuario.UsuSegundoApellido = oEditUsuario.UsuSegundoApellido;      // Segundo Apellido del Usuario Solicitante o Administrador
        oUsuario.UsuCurp = "XXXXXXXXXXXXXXXXXX";                            // CURP con 18 caracteres como mínimo
        oUsuario.UsuFileNameCurp = "-";                                     // Nombre del Archivo y extensión .pdf del CURP
        
        oUsuario.UsuFileSizeCurp = 2L;                                      // Tamaño del Archivo .pdf del CURP
        oUsuario.UsuNoCelularAnterior = "00 00 00 00 00";                   // Número de Celular Anterior si llega a cambiar por uno nuevo
        oUsuario.UsuNoCelularActual = "00 00 00 00 00";                     // Número de Celular Nuevo que sería el número de celular actual
        @* DATOS ACADÉMICOS *@
        oUsuario.UsuBoletaAlumnoEgresado = "0000600000";                    // Número de Boleta del Usuario (Alumno Inscrito o Egresado)
        oUsuario.UsuBoletaPosgrado = "B000000";                             // Número de Boleta del Usuario (Alumno de Maestria)
        oUsuario.UsuIdCarrera = 8;                                          // FK ID de la Carrera del Alumno
        oUsuario.UsuSemestre = "0";                                         // Semestre que cursa el Alumno Inscrito o de Maestria
        oUsuario.UsuAnioEgreso = 1950;                                      // Año de Egreso en dado caso
        oUsuario.UsuFileNameComprobanteEstudios = "-";                      // Nombre del Archivo en .pdf del Comprobante de Inscripcion (Tira de Materias)
        oUsuario.UsuFileSizeComprobanteEstudios = 1L;                       // Tamaño del Archivo en .pdf del Comprobante de Inscripcion (Tira de Materias)
        @* DATOS LABORALES *@
        oUsuario.UsuNumeroEmpleadoContrato = "000";                         // Número del Empleado del Usuario (Administrador o Docente)
        oUsuario.UsuIdAreaDepto = 1;                                        // FK ID del Área/Departamento del Usuario Empleado
        oUsuario.UsuNoExtensionAnterior = "0";                        // Número de Extensión del Empleado
        oUsuario.UsuNoExtensionActual = "1";                                // Número de Extensión del Empleado
        @* DATOS DE LAS CREDENCIALES DE LA CUENTA EN LA APP *@
        oUsuario.UsuCorreoPersonalCuentaAnterior = null;                    // Correo Personal de la Cuenta Anterior
        oUsuario.UsuCorreoPersonalCuentaActual = oEditUsuario.UsuCorreoPersonalCuentaActual;              // Correo Personal de la Cuenta Nueva o Actual
        oUsuario.UsuContrasenia = oEditUsuario.UsuContrasenia;                                            // Contraseña en la PLataforma del Usuario Solicitante o Administrador
        oUsuario.UsuRecuperarContrasenia = false;                          // Contraseña Temporal que se le proporciona al Usuario Solicitante
        @* DATOS DEL CORREO INSTITUCIONAL *@
        oUsuario.UsuCorreoInstitucionalCuenta = "";                         // Cuenta Correo Institucional IPN generada por DCyC
        oUsuario.UsuCorreoInstitucionalContrasenia = "";                    // Contraseña del Correo Institucional IPN Generada por DCyC
        @* OTROS DATOS *@
        oUsuario.UsuFechaHoraAlta = oEditUsuario.UsuFechaHoraAlta;          // Fecha y Hora de Alta del Usuario
        oUsuario.UsuStatus = true;                                          // Usuario (1 - Activo / 0 - Inactivo)
        @* DATOS FK NAVIGATION *@
        oUsuario.UsuIdAreaDeptoNavigation = null;
        oUsuario.UsuIdCarreraNavigation = null;
        oUsuario.UsuIdRolNavigation = null!;
        oUsuario.UsuIdTipoPersonalNavigation = null!;

        IconButton = "save_as";
        TextButton = "Editar Datos";
        BusyTextButton = "Actualizando Datos ...";
    }

    @*///////////////////////////////////////////////  VALIDAR CAMPOS CONTRASEÑA Y CONFIRMAR CONTRASEÑA  ///////////////////////////////////////////////*@
    // Hacer visible las Contraseñas con el ícono eye
    private bool VisibleContraseña = true;
    private bool VisibleConfirmarContraseña = true;
    private async Task ToggleContraseña() => VisibleContraseña = !VisibleContraseña;
    private async Task ToggleConfirmarContraseña() => VisibleConfirmarContraseña = !VisibleConfirmarContraseña;

    // Comparar las Contraseñas
    private string UsuContraseña = string.Empty;
    private string UsuConfirmarContraseña = string.Empty;
    public bool flagErrorPasswords = false;
    private async Task CompararContraseñas()
    {
        flagErrorPasswords = !string.Equals(UsuContraseña, UsuConfirmarContraseña, StringComparison.Ordinal);
        oUsuario!.UsuContrasenia = !string.IsNullOrEmpty(UsuContraseña) && !flagErrorPasswords ? CorreosInstitucionales.Shared.CapaTools.Encrypt.GetSHA256(UsuContraseña) : oEditUsuario.UsuContrasenia;
    }

    @*///////////////////////////////////////////////  VALIDAR ReCAPTCHA  ////////////////////////////////////////////////////////////////////////*@
    private ReCAPTCHA oReCAPTCHAComponent;
    // private bool ServerVerificatiing = false;
    private bool ValidReCAPTCHA = false;
    private async Task OnSuccess() => ValidReCAPTCHA = true;
    private async Task OnExpired() => ValidReCAPTCHA = false;

    @*///////////////////////////////////////////////  VALIDAR CAMPOS DEL FORMULARIO CON DATA_NOTATIONS  ///////////////////////////////////////////////*@
    private async Task OnInvalidHandled_ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('names_{TipoPersonal}').select()");
    }

    @*///////////////////////////////////////////////  MODIFICAR USUARIO  //////////////////////////////////////////////////////////////////////*@
    private bool busyLoading = false;
    private string TextButton = string.Empty;
    private string BusyTextButton = string.Empty;
    private string IconButton = string.Empty;
    private int idResponse;
    private Response<RequestViewModel_TipoPersonal> oTipoPersonal = new();


    public async Task OnValidHandled_Editar()
    {
        try
        {
            busyLoading = true;
            string fecha_actual = DateTime.Now.ToString("dddd',' dd 'de' MMMM 'del' yyyy 'a las' HH:mm:ss 'hrs.'");
            oTipoPersonal = await servicioTipoPersonal.GetDataByIdAsync(oUsuario.UsuIdTipoPersonal);
            
            if(ValidReCAPTCHA){
                var respuesta = await servicioUsuario.EditDataAsync(oUsuario);
                oRespuesta = respuesta.Content.ReadFromJsonAsync<Response<object>>().Result;

                if (respuesta.IsSuccessStatusCode)
                {
                    idResponse = oUsuario.IdUsuario;

                    var responseUsuario = await servicioUsuario.GetDataByIdAsync(oUsuario.IdUsuario);
                    oUsuario = responseUsuario.Data;

                    @*//  NOTIFICATION TOAST ACTUALIZACIÓN DE DATOS EXITOSO  //*@
                    NotificationService.Notify(
                        new NotificationMessage
                            {
                                Severity = NotificationSeverity.Success,
                                Duration = 3000,
                                Summary = "¡Actualización Correcta!",
                                Detail = "Se guardaron los cambios."
                            });

                    @*//  DIALOG MESSAGE ACTUALIZACIÓN DE DATOS EXITOSA  //*@
                    await DialogModalService.OpenAsync($@"<span style='font-variant: small-caps; font-size:18px;'>Mensaje<span>", ds =>
                    @<div>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Gap="5px" Class="">
                            <span class="circle-border">
                                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-check-lg" viewBox="0 0 16 16" style="color: green; font-weight: bold;">
                                    <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z" />
                                </svg>
                            </span>
                            <RadzenText TextStyle="TextStyle.Body1" class="text-success"><b>Se actualizaron correctamente los datos.</b></RadzenText>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.NoWrap" Gap="5px" Class="">
                            <RadzenStack Gap="0px">
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">@(oUsuario.UsuIdRol == 2 ? "Usuario" : "Administrador"):</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@oTipoPersonal?.Data?.TipoperNombre</b></RadzenText>
                            </RadzenStack>
                            <RadzenStack Gap="0px">
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Nombre Completo:</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@oUsuario!.UsuNombres @oUsuario.UsuPrimerApellido @oUsuario.UsuSegundoApellido</b></RadzenText>
                            </RadzenStack>
                            <RadzenStack Gap="0px">
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Correo Electrónico Personal:</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@oUsuario!.UsuCorreoPersonalCuentaActual</b></RadzenText>
                            </RadzenStack>
                            <RadzenAlert Title="Atención:" Text=""
                                         AlertStyle="AlertStyle.Info" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Light"
                                         ShowIcon="true" AllowClose="false" class="mb-0" Visible="@(!string.IsNullOrEmpty(UsuContraseña))">
                                <ul>
                                    @if (!string.IsNullOrEmpty(UsuContraseña))
                                    {
                                        <li>Se le notificará por los medios / vías de comunicación con la nueva contraseña y actualización de sus datos.</li>
                                    }
                                    <li>Se cerrará la sesión, tendrá que acceder con su nueva contraseña.</li>
                                </ul>
                            </RadzenAlert>
                            <RadzenButton Text="Cerrar"
                                          BusyText=""
                                          ButtonStyle="ButtonStyle.Warning"
                                          ButtonType="ButtonType.Button"
                                          IsBusy="false"
                                          Icon="cancel"
                                          class="rz-color-white rz-ripple rz-my-0 w-100"
                                          Shade="Shade.Darker"
                                          Click="@(() => ds.Close(false))" />
                        </RadzenStack>
                    </div>,
                    new DialogOptions()
                    {
                        CloseDialogOnOverlayClick = false,
                        CloseDialogOnEsc = false,
                        Width = "Auto",
                        Height = "Auto",
                        Resizable = true,
                        ShowTitle = true,
                        ShowClose = true,
                        Draggable = true,
                        CssClass = "custom-dialog-class",
                        WrapperCssClass = "custom-dialog-wrapper-class"
                    });
                    if (!string.IsNullOrEmpty(UsuContraseña))
                    {
                        @*//  NOTIFICATION TOAST ACTUALIZACIÓN EXITOSA  //*@
                        NotificationService.Notify(
                            new NotificationMessage
                                {
                                    Severity = NotificationSeverity.Success,
                                    Duration = 3000,
                                    Summary = "¡Actualización Correcta!",
                                    Detail = "Se guardaron los cambios y se cerrará la sesión."
                                });

                        @*//  DIALOG MODAL MESSAGE ACTUALIZACIÓN EXITOSA  //*@
                        await DialogModalService.OpenAsync($@"<span style='font-variant: small-caps; font-size:18px;'>Cerrando Sesión...<span>", ds =>
                            @<div>
                                <LoadingComponent />
                            </div>
    ,
                            new DialogOptions()
                            {
                                CloseDialogOnOverlayClick = false,
                                CloseDialogOnEsc = false,
                                Width = "Auto",
                                Height = "Auto",
                                Resizable = true,
                                ShowTitle = true,
                                ShowClose = true,
                                Draggable = true,
                                CssClass = "custom-dialog-class",
                                WrapperCssClass = "custom-dialog-wrapper-class"
                            });

                        await loginService.Logout();
                        navigationManager.NavigateTo("/");
                    }
                }
                else
                {
                    @*//  NOTIFICATION TOAST ACTUALIZACIÓN ERRONEA  //*@
                    NotificationService.Notify(
                        new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Duration = 3000,
                            Summary = "¡No se llevo acabo la actualización!",
                            Detail = "Intentelo más tarde."
                        });
                }
            }
            else
            {
                await DialogModalService.OpenAsync($@"<span style='font-variant: small-caps; font-size:18px;'>Validación de Datos<span>", ds =>
                    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="">
                        <RadzenAlert Title="Error" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker" ShowIcon="true" AllowClose="true"
                                     Visible="true" Class="rz-border-radius-1">
                            El <strong>Correo Electrónico Personal </strong> ya está registrado por lo que <b>NO</b> puede volverse a registrar con estos datos.
                        </RadzenAlert>
                    </RadzenStack>,
                    new DialogOptions()
                    {
                        CloseDialogOnOverlayClick = true,
                        CloseDialogOnEsc = true,
                        Width = "500px",
                        Height = "Auto",
                        Resizable = true,
                        ShowTitle = true,
                        ShowClose = true,
                        Draggable = true,
                        CssClass = "custom-dialog-class",
                        WrapperCssClass = "custom-dialog-wrapper-class"
                    });
            }
        }
        catch (HttpRequestException e)
        {
            await JSRuntime.InvokeAsync<object>("alert", e.Message);
        }
        finally
        {
            busyLoading = false;
            navigationManager.Refresh(true);
        }
    }
    @*///////////////////////////////////////////////  SHOW DIALOG MODAL iFRAME  //////////////////////////////////////////////////////////////////////*@
    private async Task ShowDialogModal_iFrame(string srciFrame, string title)
    {
        await DialogModalService.OpenAsync($@"<span style='font-variant: small-caps; font-size:18px;'>{title}<span>", ds =>
            @<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="5px" class="w-100">
                <RadzenCard class="rz-shadow-0 rz-border-radius-0 rz-m-0 rz-p-0 w-100">
                    <iframe src="@srciFrame" frameborder="1" scrolling="yes" class="w-100" style="height:500px;" />
                </RadzenCard>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.NoWrap" Gap="5px" class="w-100">
                    <RadzenButton Text="Cerrar"
                                  BusyText=""
                                  ButtonStyle="ButtonStyle.Warning"
                                  ButtonType="ButtonType.Button"
                                  IsBusy="false"
                                  Icon="cancel"
                                  class="rz-color-white rz-ripple rz-my-0 w-100"
                                  Shade="Shade.Darker"
                                  Click="@(() => ds.Close(false))" />
                    <a href="@srciFrame" target="_blank" class="w-100">
                        <RadzenButton Text="Descargar"
                                      BusyText=""
                                      ButtonStyle="ButtonStyle.Secondary"
                                      ButtonType="ButtonType.Button"
                                      IsBusy="false"
                                      Icon="download"
                                      class="rz-ripple rz-my-0 w-100"
                                      Shade="Shade.Dark" />
                    </a>
                </RadzenStack>
            </RadzenStack>,
            new DialogOptions()
            {
                CloseDialogOnOverlayClick = true,
                CloseDialogOnEsc = true,
                Width = "600px",
                Height = "Auto",
                Resizable = true,
                ShowTitle = true,
                ShowClose = true,
                Draggable = true,
                CssClass = "custom-dialog-class",
                WrapperCssClass = "custom-dialog-wrapper-class"
            });
    }
}

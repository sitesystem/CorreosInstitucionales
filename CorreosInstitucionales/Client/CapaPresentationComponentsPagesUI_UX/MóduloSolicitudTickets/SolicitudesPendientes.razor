@page "/SolicitudesPendientes"

@attribute [Authorize(Policy = "[Rol] Administrador")]

@inject IJSRuntime JsRuntime
@inject DialogService dialogService

<PageTitle>@Title</PageTitle>

<script src="js/descargar.js?v=1.0.0.8"></script>

<div class="p-4 rounded-1 bg-white shadow">
    
    <div class="row mb-4">
        <div class="col-6">
            <h1>@Title</h1>
            <hr />

            <button class="btn btn-primary" @onclick="CargarLista">
                Recargar Listado
            </button>
        </div>
        @if (puede_exportar)
        {
            <div class="col-4 offset-2">
                <div class="shadow card m-2 p-3">
                
                    <button class="btn btn-primary form-control mb-3" @onclick="Descargar">
                        <RadzenIcon Icon="get_app"></RadzenIcon>
                        Exportar
                    </button>
                    <div>
                        <InputCheckbox @bind-Value="exportar_zip"></InputCheckbox> Generar Archivo Zip
                    </div>
                
                </div>
            </div>
        }

    </div>

    @if (!cargado)
    {
        <div class="row my-4">
            <div class="col text-center">
                <img src="img/mail.png" class="loading_img" />
                <br />
                <strong>Trabajando...</strong>
            </div>
        </div>
    }

    <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@items" TItem="RequestDTO_Solicitud"
                    Visible=@cargado>
        <Columns>
            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Property="IdSolicitudTicket" Filterable="true" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Solicitante" Filterable="false" TextAlign="TextAlign.Start">
                <Template Context="item">
                    <strong>
                        @item.SolIdUsuarioNavigation!.UsuPrimerApellido
                        @item.SolIdUsuarioNavigation!.UsuSegundoApellido
                        @item.SolIdUsuarioNavigation!.UsuNombre
                    </strong>
                    <br />
                    <ul>
                        <li>
                            @item.SolIdUsuarioNavigation.UsuCurp
                        </li>
                        <li>
                            @item.SolIdUsuarioNavigation!.UsuBoletaAlumno
                        </li>
                        @if (item.SolIdUsuarioNavigation!.UsuBoletaMaestria != "B000000")
                        {
                            <li>
                                @item.SolIdUsuarioNavigation!.UsuBoletaMaestria
                            </li>
                        }
                        <li style="white-space: pre-wrap">
                            @item.SolIdUsuarioNavigation!.UsuCorreoPersonalCuentaNueva
                        </li>

                        <li style="white-space: pre-wrap">
                            @item.SolIdUsuarioNavigation!.UsuCorreoInstitucionalCuenta
                        </li>

                    </ul>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Solicitud" Filterable="true" TextAlign="TextAlign.Start">
                <Template Context="item">
                    <strong>
                        @item.SolIdTipoSolicitudNavigation!.TiposolDescripcion    
                    </strong>
                    <br />
                    <p style="white-space: pre-wrap">@item.SolObservacionesSolicitud</p>
                    
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Adjuntos" Filterable="false" TextAlign="TextAlign.Start">
                <Template Context="item">
                    <ul class="mb-4">
                        <li>
                            <strong>CURP</strong>
                            <br />
                            <a href="@GenerarURLArchivoUsuario(item, TipoDocumento.CURP)"
                               download="@GenerarNombreArchivo(item, TipoDocumento.CURP)">
                                Descargar
                            </a>
                            <br />
                            <button class="btn btn-primary form-control" @onclick="@(async ()=> await VerDocumento(item, TipoDocumento.CURP))">Ver</button>
                        </li>

                        @if(item.SolIdUsuarioNavigation!.UsuFileNameComprobanteInscripcion != "-")
                        {
                            <li>
                                <strong>Comprobante de Inscripción</strong>
                                @if ((anio - int.Parse(item.SolIdUsuarioNavigation!.UsuBoletaAlumno??"")) > 3)
                                {
                                    <span class="fw-bold text-danger">Requerdio</span>
                                    <br />
                                }

                                <br />
                                <a href="@GenerarURLArchivoUsuario(item, TipoDocumento.COM_INSCRIPCION)"
                                   download="@GenerarNombreArchivo(item, TipoDocumento.COM_INSCRIPCION)">
                                    Descargar
                                </a>
                                <br />
                                <button class="btn btn-primary form-control" 
                                    @onclick="@(async () => await VerDocumento(item, TipoDocumento.COM_INSCRIPCION))">
                                    Ver
                                </button>
                            </li>
                        }

                        @if ((item.SolCapturaCuentaBloqueada??"-") != "-")
                        {
                            <li>
                                <strong>Captura de Bloqueo</strong>
                                <br />
                                <a href="@GenerarURLArchivoRepositorio(item, TipoDocumento.CAP_BLOQUEO)"
                                   download="@GenerarNombreArchivo(item, TipoDocumento.CAP_BLOQUEO)">
                                    Descargar
                                </a>
                                <br />
                                <button class="btn btn-primary form-control"
                                        @onclick="@(async () => await VerDocumento(item, TipoDocumento.CAP_BLOQUEO))">
                                    Ver
                                </button>
                            </li>
                        }

                        @if ((item.SolCapturaEscaneoAntivirus ?? "-") != "-")
                        {
                            <li>
                                <strong>Captura de Escaneo de Antivirus</strong>
                                <br />
                                <a href="@GenerarURLArchivoRepositorio(item, TipoDocumento.CAP_ANTIVIRUS)"
                                   download="@GenerarNombreArchivo(item, TipoDocumento.CAP_ANTIVIRUS)">
                                    Descargar
                                </a>
                                <br />
                                <button class="btn btn-primary form-control"
                                        @onclick="@(async () => await VerDocumento(item, TipoDocumento.CAP_ANTIVIRUS))">
                                    Ver
                                </button>
                            </li>
                        }

                        @if ((item.SolCapturaError ?? "-") != "-")
                        {
                            <li>
                                <strong>Captura de Error</strong>
                                <br />
                                <a href="@GenerarURLArchivoRepositorio(item, TipoDocumento.CAP_ERROR)"
                                   download="@GenerarNombreArchivo(item, TipoDocumento.CAP_ERROR)">
                                    Descargar
                                </a>
                                <br />
                                <button class="btn btn-primary form-control"
                                        @onclick="@(async () => await VerDocumento(item, TipoDocumento.CAP_ERROR))">
                                    Ver
                                </button>
                            </li>
                        }
                    </ul>
                    
                </Template>
            </RadzenDataGridColumn><!--ARCHIVOS-->


            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Seleccionar" Filterable="false" TextAlign="TextAlign.Center" Frozen="true" Width="120px">
                <Template Context="item">
                    <RadzenSwitch @bind-Value=@item.SolValidacionDatos Change="StateHasChanged" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Cancelar" Context="item"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Frozen="true" Width="120px">
                <Template Context="item">
                    <RadzenButton title="Cancelar"
                                  Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Click="@(async ()=> await Cancelar(item))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

<pre>@debug</pre>

@code
{
    private string Title = "Solicitudes Pendientes";

    private bool cargado { get; set; } = false;
    private bool generando = false;
    private bool exportar_zip = false;

    private int anio = DateTime.Now.Year;

    private List<RequestDTO_Solicitud> items = new List<RequestDTO_Solicitud>();

    private readonly int[] estados = { (int)TipoEstadoSolicitud.ALTA, (int)TipoEstadoSolicitud.PENDIENTE };

    private bool puede_exportar
    {
        get
        {
            return items.Any(i => i.SolValidacionDatos);
        }
    }

    private string debug = string.Empty;

    private string ArchivoSolicitud(RequestDTO_Solicitud solicitud, TipoDocumento tipo_documento)
    {
        string archivo = "ARCHIVO_404";

        switch(tipo_documento)
        {
            case TipoDocumento.CURP: 
                archivo = solicitud.SolIdUsuarioNavigation!.UsuFileNameCurp!; 
                break;

            case TipoDocumento.COM_INSCRIPCION: 
                archivo = solicitud.SolIdUsuarioNavigation!.UsuFileNameComprobanteInscripcion!;
                break;

            case TipoDocumento.CAP_BLOQUEO:
                archivo = solicitud.SolCapturaCuentaBloqueada!;
                break;

            case TipoDocumento.CAP_ANTIVIRUS:
                archivo = solicitud.SolCapturaEscaneoAntivirus!;
                break;

            case TipoDocumento.CAP_ERROR:
                archivo = solicitud.SolCapturaError!;
                break;
        }

        return archivo;
    }

    private string GenerarURLArchivoUsuario(RequestDTO_Solicitud solicitud, TipoDocumento tipo_documento)
    {
        string archivo = ArchivoSolicitud(solicitud, tipo_documento);
        return ServerFS.ArchivoUsuario(solicitud.SolIdUsuario, archivo);
    }

    private string GenerarURLArchivoRepositorio(RequestDTO_Solicitud solicitud, TipoDocumento tipo_documento)
    {
        string archivo = ArchivoSolicitud(solicitud, tipo_documento);
        return ServerFS.ArchivoRepositorio(solicitud.IdSolicitudTicket,archivo);
    }

    private string GenerarNombreArchivo(RequestDTO_Solicitud solicitud, TipoDocumento tipo_documento)
    {
        string archivo = ArchivoSolicitud(solicitud, tipo_documento);
        string ext = Path.GetExtension(archivo);
        string nombre = tipo_documento.GetNombre();
        return $"SOL{solicitud.IdSolicitudTicket}_{solicitud.SolIdUsuarioNavigation!.UsuCurp}_{nombre}{ext}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarLista();
        }
    }

    private async Task CargarLista()
    {
        cargado = false;
        StateHasChanged();

        Response<List<RequestDTO_Solicitud>>? request = await servicioSolicitud.GetAllDataByProgressAsync(estados);

        if(request is not null && request.Data is not null)
        {
            if (request.Success==1)
            {
                items = request.Data;
            }
            else
            {
                debug += $"{Environment.NewLine}<span class=\"text-danger fw-bold\">[ERROR]<span> {request.Message}";
            }
        }

        cargado = true;
        StateHasChanged();
    }

    private async void Descargar()
    {
        cargado = false;
        StateHasChanged();

        int[] tickets = items.Where(i => i.SolValidacionDatos).Select(st => st.IdSolicitudTicket).ToArray();

        TExport<int[]> selected_ids = new(tickets, (int)TipoEstadoSolicitud.PENDIENTE, true, true);

        Response<List<WebUtils.Link>>? oResponse = await servicioArchivos.NewFileExportFromSelection<int[]>(exportar_zip?"zip":"xlsx", "pendientes", selected_ids);

        if(oResponse is not null && oResponse.Data is not null)
        {
            if(oResponse.Success == 1)
            {
                foreach (WebUtils.Link url in oResponse.Data)
                {
                    await JSRuntime.InvokeVoidAsync("Descargar", url);
                }

                await CargarLista();
            }
            else
            {
                debug += Environment.NewLine + oResponse.Message;
            }
        }
    }

    private async Task VerPDF(string archivo, string titulo = "Ver") 
    {
        await dialogService.OpenAsync<PDFViewer>
                (
                    titulo,
                    new Dictionary<string, object>()
                    {
                        {"file", archivo}
                    },
                    new DialogOptions()
                        {
                            Width = "calc( 100vw - 8em )",
                            Height = "calc( 100vh - 8em )",
                            CssClass = "dialog_simple p-0", 
                            CloseDialogOnEsc = true, 
                            CloseDialogOnOverlayClick = true,
                            Resizable = true,
                            Draggable = true
                        }
                );
    }

    private async Task VerDocumento(RequestDTO_Solicitud solicitud, TipoDocumento documento)
    {
        string titulo = "Documento";
        string archivo = string.Empty;
        string nombre = string.Empty;

        bool documento_repositorio = true;
        RequestDTO_Usuario usuario = solicitud.SolIdUsuarioNavigation!;

        switch(documento)
        {
            case TipoDocumento.CURP: 
                titulo = $@"{usuario.UsuNombre} {usuario.UsuPrimerApellido} {usuario.UsuSegundoApellido} - {usuario.UsuCurp}";

                documento_repositorio = false;
                nombre = usuario.UsuFileNameCurp!;
                break;

            case TipoDocumento.COM_INSCRIPCION:
                titulo = "COMPROBANTE DE INSCRIPCIÓN";
                documento_repositorio = false;
                nombre = usuario.UsuFileNameComprobanteInscripcion!;
                break;

            case TipoDocumento.CAP_BLOQUEO:
                titulo = "CAPTURA DE PANTALLA DE BLOQUEO";
                nombre = solicitud.SolCapturaCuentaBloqueada!;
                break;

            case TipoDocumento.CAP_ANTIVIRUS:
                titulo = "CAPTURA DE PANTALLA DE ANTIVIRUS";
                nombre = solicitud.SolCapturaEscaneoAntivirus!;
                break;

            case TipoDocumento.CAP_ERROR:
                titulo = "CAPTURA DE PANTALLA DE ERROR";
                nombre = solicitud.SolCapturaError!;
                break;
        }

        archivo = documento_repositorio ? ServerFS.ArchivoRepositorio(solicitud.IdSolicitudTicket,nombre) : ServerFS.ArchivoUsuario(solicitud.SolIdUsuario, nombre);

        await VerPDF(archivo, titulo);
    }

    private async Task Cancelar(RequestDTO_Solicitud item)
    {
        string? mensaje = await dialogService.OpenAsync<MensajeRespuesta>
        (
            $"Cancelar solicitud {item.IdSolicitudTicket} de {item.SolIdUsuarioNavigation!.UsuNombre} {item.SolIdUsuarioNavigation!.UsuPrimerApellido} {item.SolIdUsuarioNavigation!.UsuSegundoApellido}",
            null,
            new DialogOptions()
            {
                ShowClose = false,
                Width = "75%",
                CssClass = "dialog_simple"
            }
        );

        if(!string.IsNullOrEmpty(mensaje))
        {
            RequestDTO_FinalizarSolicitud oCancelarSolicitud = new()
            {
                IdSolicitud = item.IdSolicitudTicket,
                Mensaje = mensaje
            };

            item.SolRespuestaDcyC = mensaje;
            HttpResponseMessage response = await servicioSolicitud.Cancelar(oCancelarSolicitud); // new KeyValuePair<int, string>(item.IdSolicitudTicket, mensaje));

            if(response.IsSuccessStatusCode)
            {
                debug += Environment.NewLine + $"SOLICITUD {item.IdSolicitudTicket} CANCELADA.";
                await CargarLista();
            }
            else
            {
                debug += Environment.NewLine + "ERROR CANCELANDO SOLICITUD {item.IdSolicitudTicket}";
            }
        }
    }
}

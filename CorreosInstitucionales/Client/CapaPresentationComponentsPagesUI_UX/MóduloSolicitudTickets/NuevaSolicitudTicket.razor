@page "/NuevaSolicitudTicket"

@attribute [Authorize(Policy = "[Rol] Usuario Solicitante")]

<PageTitle>SACI | Nueva Solicitud-Ticket</PageTitle>

<style type="text/css">
</style>

<RadzenCard Variant="Variant.Filled" Class="mb-3">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Start" Wrap="FlexWrap.NoWrap" Gap="20px" class="">
        <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-tag-fill" viewBox="0 0 16 16">
            <path d="M2 1a1 1 0 0 0-1 1v4.586a1 1 0 0 0 .293.707l7 7a1 1 0 0 0 1.414 0l4.586-4.586a1 1 0 0 0 0-1.414l-7-7A1 1 0 0 0 6.586 1zm4 3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0" />
        </svg>
        <RadzenText TextStyle="TextStyle.H3" class="rz-color-base-800">Nueva Solicitud-Ticket</RadzenText>
    </RadzenStack>
</RadzenCard>

@if (oTiposSolicitud is not null && oTiposSolicitud.Data != null && oResponseUsuario != null && oResponseUsuario.Data is not null)
{
    <RadzenRow AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceBetween" Gap="1rem" class="">
        <RadzenColumn Size="12">
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.NoWrap" Gap="15px" class="">
                <RadzenCard Variant="Variant.Filled" class="">

                    <!-- ******************************************************************* AVISOS ******************************************************************* -->
                    <RadzenAlert Title="" AlertStyle="AlertStyle.Secondary" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Default" ShowIcon="true" AllowClose="false" class="rz-mt-0 rz-mb-3" Visible="true">
                        <b>ATENCIÓN.</b> Importante tener en cuenta lo siguiente para levantar tu Solicitud de Ticket:
                        <ul class="my-0">
                            <li>Con tu Correo Institucional sólo se te puede apoyar en acceso a aplicaciones que te brinda Microsoft (ejemplo Teams, paquetería de Office), no así en aplicaciones externas.</li>
                        </ul>
                    </RadzenAlert>

                    <RadzenAlert Title="" AlertStyle="AlertStyle.Info" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Default" ShowIcon="true" AllowClose="false" class="rz-mt-0 rz-mb-3"
                                 Visible="@(idTipoPersonal == 1 ? true : false)">
                                 <b>NOTA:</b> La creación de los Correos Institucionales de los alumnos de nuevo ingreso tendrá un <strong>tiempo de espera de hasta 2 meses.</strong>
                    </RadzenAlert>

                    <RadzenAlert Title="" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.ExtraSmall" Shade="Shade.Dark" ShowIcon="true" AllowClose="false" class="rz-mb-4 rz-px-3">
                        <b>NOTA:</b> Los campos subrayados de rojo son <strong>obligatorios.</strong>
                    </RadzenAlert>

                    <EditForm Model="@oSolicitudTicket" OnValidSubmit="@OnValidHandled_Registrar" OnInvalidSubmit="@OnInvalidHandled_ScrollToTop">

                        <DataAnnotationsValidator />

                        <RadzenFieldset AllowCollapse="false" ExpandTitle="Levantar Nueva Solicitud-Ticket" CollapseTitle="Levantar Nueva Solicitud-Ticket" ExpandAriaLabel="" CollapseAriaLabel="" Class="rz-border-base-500 rz-border-radius-1 rz-shadow-3">
                            <HeaderTemplate>
                                <span class="d-inline-flex align-items-center align-middle">
                                    <RadzenIcon Icon="sell" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Levantar Nueva Solicitud-Ticket</b>
                                </span>
                            </HeaderTemplate>
                            <ChildContent>
                                <div class="row">

                                    <!-- ******************************************************************* LISTA MOTIVOS / INCIDENCIAS SOLICITUD-TICKET ******************************************************************* -->
                                    <div class="col-md-6 col-lg-6">
                                        <RadzenFormField Text="Problema, Incidencia o Motivo de la Solicitud" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3">
                                            <ChildContent>
                                                <RadzenListBox Context="contexto"
                                                               Name="@($@"tipo_solicitud_list")"
                                                               @bind-Value="@oSolicitudTicket.SolIdTipoSolicitud"
                                                               TValue="int"
                                                               Data="@oTiposSolicitud.Data"
                                                               ValueProperty="IdTipoSolicitud"
                                                               TextProperty="TiposolDescripcion"
                                                               Multiple="false"
                                                               AllowClear="true"
                                                               AllowFiltering="true"
                                                               AllowVirtualization="true"
                                                               Placeholder="Selecciona una opción"
                                                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                               FilterOperator="StringFilterOperator.Contains"
                                                               Style="width: 100%; height:370px"
                                                               InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Selecciona una opción" }})"
                                                               Change="@(args => OnChangeListBox(args))">
                                                    <Template>
                                                        @* <span data-bs-toggle="popover" data-bs-trigger="hover" data-bs-placement="top" data-bs-custom-class="popover-dark" class="d-block"
                                                              title="<b>Motivo de la Solicitud-Ticket</b>" data-bs-content="Problema o incidencia requerido por usuario para atención."> *@
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-square-fill text-success" viewBox="0 0 16 16">
                                                                <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm2.5 7.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1" />
                                                            </svg>&ensp;
                                                            @((contexto as RequestViewModel_TipoSolicitud)?.TiposolDescripcion)
                                                        @* </span> *@
                                                    </Template>
                                                </RadzenListBox>
                                            </ChildContent>
                                            <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                                        </RadzenFormField>
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolIdTipoSolicitud)" />

                                        <RadzenFormField Text="Observaciones" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3">
                                            <Start><RadzenIcon Icon="message" IconColor="@Colors.Base400" /></Start>
                                            <ChildContent>
                                                <RadzenTextArea Name="@($@"observaciones")" Placeholder="Escribe un motivo, comentario, nota o aclaración adicional para la Solicitud-Ticket..."
                                                                @bind-Value="@oSolicitudTicket.SolObservacionesSolicitud" @oninput="@(e => oSolicitudTicket.SolObservacionesSolicitud = e.Value.ToString())"
                                                                Cols="30" Rows="3" style="border-bottom: 3px solid red;" MinLength="1" MaxLength="300" class="w-100" aria-label="TextArea" Disabled="false" ReadOnly="false" />
                                            </ChildContent>
                                            <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                                        </RadzenFormField>
                                        <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.Body1" class="rz-m-0">
                                            <b>@(300 - oSolicitudTicket?.SolObservacionesSolicitud?.Length)</b> caracteres restantes de <b>300</b> permitidos.
                                        </RadzenText>
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolObservacionesSolicitud)" />
                                    </div>

                                    <div class="col-md-6 col-lg-6 mb-3">

                                        <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.Div" TextAlign="TextAlign.JustifyAll" class="mt-3 mb-0">
                                            <a href="@oLinkReducirTamañoArchivo?.Data?.LinkEnlace" target="_blank" class="icon-link icon-link-hover alert alert-info w-100">
                                                Comprimir y/o reducir el tamaño del <strong>Archivo PDF (Máx. 2MB)</strong>
                                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" class="bi bi-box-arrow-up-right" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z" />
                                                    <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z" />
                                                </svg>
                                            </a>
                                        </RadzenText>

                                        <!-- ******************************************************************* ARCHIVOS PDF CURP / COMPROBANTE DE ESTUDIO ******************************************************************* -->
                                        <RadzenFormField Text="Archivo PDF del CURP Actualizado" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-0">
                                            <Start><RadzenIcon Icon="picture_as_pdf" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                            <ChildContent> @* image/*, .pdf, .doc, .docx *@
                                                <RadzenUpload @ref="oUploadFile_SolFileNameCurp" Url="@($@"/api/RepositoryFiles/UploadSingleFile/{folderUsuarios}/{oResponseUsuario.Data.IdUsuario}/{oSolicitudTicket.SolFileNameCurp}/{oGuid}")" Accept=".pdf"
                                                              Icon="upload" ChooseText="Examinar Archivo" Auto="false" Multiple="false"
                                                              Change=@(args => OnChangeFiles(args, CURP))
                                                              Error=@(args => OnErrorFiles(args, "FileInput"))
                                                              InputAttributes="@(new Dictionary<string,object>(){{ "cursor", "pointer" }})"
                                                              Progress="@(args => OnProgressFiles(args, "Manual Upload"))"
                                                              Complete="@(args => OnCompleteFiles(args))" />
                                            </ChildContent>
                                            <Helper></Helper>
                                        </RadzenFormField>
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolFileNameCurp)" />
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolFileSizeCurp)" />

                                        @if (idTipoPersonal == 1 || idTipoPersonal == 2 || idTipoPersonal == 3)
                                        {
                                            <RadzenFormField Text="@($@"{(idTipoPersonal == 1 ? "Archivo PDF del Comprobante de Inscripción/Estudios/Horario" : idTipoPersonal == 2 ? "Archivo PDF cualquier Constancia o Comprobante de Estudios / Boleta" : "Archivo PDF del SIP-10")}")"
                                                             AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3">
                                                <Start><RadzenIcon Icon="picture_as_pdf" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                                <ChildContent>
                                                    @* image/*, .pdf, .doc, .docx *@
                                                    <RadzenUpload @ref="oUploadFile_SolFileNameComprobanteInscripcion" Url="@($@"/api/RepositoryFiles/UploadSingleFile/{folderUsuarios}/{oResponseUsuario.Data.IdUsuario}/{oSolicitudTicket.SolFileNameComprobanteInscripcion}/{oGuid}")" Accept=".pdf"
                                                                  Icon="upload" ChooseText="Examinar Archivo" Auto="false" Multiple="false"
                                                                  Change=@(args => OnChangeFiles(args, ComprobanteInscripcion))
                                                                  Error=@(args => OnErrorFiles(args, "FileInput"))
                                                                  InputAttributes="@(new Dictionary<string,object>(){{ "cursor", "pointer" }})"
                                                                  Progress="@(args => OnProgressFiles(args, "Manual Upload"))"
                                                                  Complete="@(args => OnCompleteFiles(args))" />
                                                </ChildContent>
                                                <Helper><RadzenText TextStyle="TextStyle.Caption" Text="@($@"{(idTipoPersonal == 1 ? "Comprobante de Inscripción/Estudios/Horario" : idTipoPersonal == 2 ? "Cualquier Constancia o Certificado de Estudios / Boleta" : "Archivo PDF del SIP-10")}")" /></Helper>
                                            </RadzenFormField>
                                            <ValidationMessage For="@(() => oSolicitudTicket.SolFileNameComprobanteInscripcion)" />
                                            <ValidationMessage For="@(() => oSolicitudTicket.SolFileSizeComprobanteInscripcion)" />
                                        }

                                        <!-- ******************************************************************* DATOS DE CAMBIO DE NO. CELULAR ******************************************************************* -->
                                        <RadzenFieldset AllowCollapse="false" ExpandTitle="¿Recuerdas tu Número de Celular Anterior?" CollapseTitle="¿Recuerdas tu Número de Celular Anterior?"
                                                        ExpandAriaLabel="" CollapseAriaLabel="" class="rz-border-base-500 rz-border-radius-1 rz-shadow-3 w-100 mt-3" Visible="@isVisibleNoCelularAnteriorActual">
                                            <HeaderTemplate>
                                                <span class="d-inline-flex align-items-center align-middle">
                                                    <RadzenIcon Icon="phone_iphone" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">¿Recuerdas tu No. Celular Anterior?</b>
                                                </span>
                                            </HeaderTemplate>
                                            <ChildContent>
                                                <RadzenCheckBox TValue="bool" @bind-Value="isCheckedPhoneNumber" Name="@($@"forgotPhoneNumber")"
                                                                Change="@(args => oSolicitudTicket.SolNoCelularAnterior = args ? "" : "No lo recuerdo")" Disabled="false" ReadOnly="false" />
                                                <RadzenLabel Text="@rememberPhoneNumber" Component="forgotPhoneNumber" class="rz-ms-2" Visible="@isVisibleNoCelularAnteriorActual" />
                                            </ChildContent>
                                        </RadzenFieldset>

                                        <RadzenFormField Text="@($@"Número de Celular Anterior")" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3" Visible="@isVisibleNoCelularAnteriorActual">
                                            <Start><RadzenIcon Icon="mobile_off" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                            <ChildContent>
                                                <RadzenMask Name="@($@"oldPhoneNumber")" @bind-Value="@oSolicitudTicket.SolNoCelularAnterior" MaxLength="20" style="border-bottom: 3px solid red;" AutoCompleteType="AutoCompleteType.Off"
                                                            Mask="** ** ** ** **" CharacterPattern="[0-9]" Placeholder="00 00 00 00 00" Disabled="@(!isCheckedPhoneNumber)" ReadOnly="@(!isCheckedPhoneNumber)" />
                                            </ChildContent>
                                            <End><RadzenIcon Icon="dialpad" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></End>
                                            <Helper><RadzenText Text="No. de Celular con 10 dígitos que fué olvidado/perdido." TextStyle="TextStyle.Caption" TagName="TagName.Div" TextAlign="TextAlign.Justify" class="mb-0" /></Helper>
                                        </RadzenFormField>
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolNoCelularAnterior)" hidden="@(!isVisibleNoCelularAnteriorActual)" />

                                        <RadzenFormField Text="@($@"Número de Celular Actual")" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3" Visible="@isVisibleNoCelularAnteriorActual">
                                            <Start><RadzenIcon Icon="security_update_good" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                            <ChildContent>
                                                <RadzenMask Name="@($@"currentPhoneNumber")" @bind-Value="@oSolicitudTicket.SolNoCelularActual" MaxLength="20" style="border-bottom: 3px solid red;" AutoCompleteType="AutoCompleteType.Off"
                                                            Mask="** ** ** ** **" CharacterPattern="[0-9]" Placeholder="00 00 00 00 00" Disabled="false" ReadOnly="false" />
                                            </ChildContent>
                                            <End><RadzenIcon Icon="dialpad" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></End>
                                            <Helper><RadzenText Text="No. de Celular en uso (10 dígitos)." TextStyle="TextStyle.Caption" TagName="TagName.Div" TextAlign="TextAlign.Justify" class="mb-0" /></Helper>
                                        </RadzenFormField>
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolNoCelularActual)" hidden="@(!isVisibleNoCelularAnteriorActual)" />

                                        <!-- ******************************************************************* DATOS DE CAMBIO DE CORREO PERSONAL ******************************************************************* -->
                                        <RadzenFieldset AllowCollapse="false" ExpandTitle="¿Recuerdas tu Correo Electrónico Personal Anterior?" CollapseTitle="¿Recuerdas tu Correo Electrónico Personal Anterior?"
                                                        ExpandAriaLabel="" CollapseAriaLabel="" class="rz-border-base-500 rz-border-radius-1 rz-shadow-3 w-100 mt-3" Visible="@isVisibleCuentaCorreoPersonalAnteriorActual">
                                            <HeaderTemplate>
                                                <span class="d-inline-flex align-items-center align-middle">
                                                    <RadzenIcon Icon="mail" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">¿Recuerdas tu Correo Personal Anterior?</b>
                                                </span>
                                            </HeaderTemplate>
                                            <ChildContent>
                                                <RadzenCheckBox TValue="bool" @bind-Value="isCheckedEmail" Name="@($@"forgotEmail")"
                                                                Change="@(args => oSolicitudTicket.SolCorreoPersonalCuentaAnterior = args ? "" : "No lo recuerdo")" Disabled="false" ReadOnly="false" />
                                                <RadzenLabel Text="@rememberEmail" Component="forgotEmail" class="rz-ms-2" Visible="@isVisibleCuentaCorreoPersonalAnteriorActual" />
                                            </ChildContent>
                                        </RadzenFieldset>
                                        
                                        <RadzenFormField Text="Correo Electrónico Personal Anterior" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3" Visible="@isVisibleCuentaCorreoPersonalAnteriorActual">
                                            <Start><RadzenIcon Icon="email" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                            <ChildContent>
                                                <RadzenTextBox Name="currentEmailPersonal" @bind-Value="@oSolicitudTicket.SolCorreoPersonalCuentaAnterior" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="100"
                                                               AutoCompleteType="AutoCompleteType.Off" Disabled="@(!isCheckedEmail)" ReadOnly="@(!isCheckedEmail)" />
                                            </ChildContent>
                                            <End><RadzenIcon Icon="unsubscribe" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></End>
                                            <Helper><RadzenText Text="Dominios válidos (gmail, outlook, hotmail, yahoo, msn, live, etc.)" TextStyle="TextStyle.Caption" TagName="TagName.Div" TextAlign="TextAlign.Justify" class="mb-0" /></Helper>
                                        </RadzenFormField>
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolCorreoPersonalCuentaAnterior)" hidden="@(!isVisibleCuentaCorreoPersonalAnteriorActual)" />

                                        <RadzenFormField Text="Correo Electrónico Personal Actual" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3" Visible="@isVisibleCuentaCorreoPersonalAnteriorActual">
                                            <Start><RadzenIcon Icon="email" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                            <ChildContent>
                                                <RadzenTextBox Name="newEmailPersonal" @bind-Value="@oSolicitudTicket.SolCorreoPersonalCuentaActual" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="100"
                                                               AutoCompleteType="AutoCompleteType.Off" Disabled="false" ReadOnly="false" />
                                            </ChildContent>
                                            <End><RadzenIcon Icon="mark_email_read" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></End>
                                            <Helper><RadzenText Text="Dominios válidos (gmail, outlook, hotmail, yahoo, msn, live, etc.)" TextStyle="TextStyle.Caption" TagName="TagName.Div" TextAlign="TextAlign.Justify" class="mb-0" /></Helper>
                                        </RadzenFormField>
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolCorreoPersonalCuentaActual)" hidden="@(!isVisibleCuentaCorreoPersonalAnteriorActual)" />

                                        <!-- ******************************************************************* ARCHIVOS PDF CAPTURAS ******************************************************************* -->
                                        <RadzenFormField Text="Archivo de la Captura de la Cuenta Bloqueada" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3" Visible="@isVisibleCapturaCuentaBloqueada">
                                            <Start><RadzenIcon Icon="picture_as_pdf" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                            <ChildContent>
                                                @* image/*, .pdf, .doc, .docx *@
                                                <RadzenUpload @ref="oUploadFile_SolCapturaCuentaBloqueada" Url="@($@"/api/RepositoryFiles/UploadSingleFile/{folderSolicitudes}/{idResponse}/{oSolicitudTicket.SolCapturaCuentaBloqueada}/{oGuid}")" Accept=".pdf"
                                                              Icon="upload" ChooseText="Examinar Archivo" Auto="false" Multiple="false"
                                                              Change=@(args => OnChangeFiles(args, CapturaCuentaBloqueada))
                                                              Error=@(args => OnErrorFiles(args, "FileInput"))
                                                              InputAttributes="@(new Dictionary<string,object>(){{ "cursor", "pointer" }})"
                                                              Progress="@(args => OnProgressFiles(args, "Manual Upload"))"
                                                              Complete="@(args => OnCompleteFiles(args))" />
                                            </ChildContent>
                                            <Helper></Helper>
                                        </RadzenFormField>
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolCapturaCuentaBloqueada)" hidden="@(!isVisibleCapturaCuentaBloqueada)" />
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolFileSizeCapturaCuentaBloqueada)" hidden="@(!isVisibleCapturaCuentaBloqueada)" />

                                        <RadzenFormField Text="Archivo de la Captura del Escaneo de Antivirus" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3" Visible="@isVisibleCapturaEscaneoAntivirus">
                                            <Start><RadzenIcon Icon="picture_as_pdf" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                            <ChildContent> @* image/*, .pdf, .doc, .docx *@
                                                <RadzenUpload @ref="oUploadFile_SolCapturaEscaneoAntivirus" Url="@($@"/api/RepositoryFiles/UploadSingleFile/{folderSolicitudes}/{idResponse}/{oSolicitudTicket.SolCapturaEscaneoAntivirus}/{oGuid}")" Accept=".pdf"
                                                              Icon="upload" ChooseText="Examinar Archivo" Auto="false" Multiple="false"
                                                              Change=@(args => OnChangeFiles(args, CapturaEscaneoAntivirus))
                                                              Error=@(args => OnErrorFiles(args, "FileInput"))
                                                              InputAttributes="@(new Dictionary<string,object>(){{ "cursor", "pointer" }})"
                                                              Progress="@(args => OnProgressFiles(args, "Manual Upload"))"
                                                              Complete="@(args => OnCompleteFiles(args))" />
                                            </ChildContent>
                                            <Helper><RadzenText Text="ESCANEO COMPLETO del dispositivo (PC, Laptop) con tu ANTIVIRUS dónde se muestre que se realizó un ESCANEO COMPLETO (duración del escaneo, fecha y hora, número de archivos analizados, etc.)" TextStyle="TextStyle.Caption" TagName="TagName.Div" TextAlign="TextAlign.Justify" class="mb-0" /></Helper>
                                        </RadzenFormField>
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolCapturaEscaneoAntivirus)" hidden="@(!isVisibleCapturaEscaneoAntivirus)" />
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolFileSizeCapturaEscaneoAntivirus)" hidden="@(!isVisibleCapturaEscaneoAntivirus)" />

                                        <RadzenFormField Text="Archivo de la Captura por Otro Motivo de Solicitud" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3" Visible="@isVisibleCapturaError">
                                            <Start><RadzenIcon Icon="picture_as_pdf" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                            <ChildContent> @* image/*, .pdf, .doc, .docx *@
                                                <RadzenUpload @ref="oUploadFile_SolCapturaError" Url="@($@"/api/RepositoryFiles/UploadSingleFile/{folderSolicitudes}/{idResponse}/{oSolicitudTicket.SolCapturaError}/{oGuid}")" Accept=".pdf"
                                                              Icon="upload" ChooseText="Examinar Archivo" Auto="false" Multiple="false"
                                                              Change=@(args => OnChangeFiles(args, CapturaError))
                                                              Error=@(args => OnErrorFiles(args, "FileInput"))
                                                              InputAttributes="@(new Dictionary<string,object>(){{ "cursor", "pointer" }})"
                                                              Progress="@(args => OnProgressFiles(args, "Manual Upload"))"
                                                              Complete="@(args => OnCompleteFiles(args))" />
                                            </ChildContent>
                                            <Helper><RadzenText Text="Algún error" TextStyle="TextStyle.Caption" TagName="TagName.Pre" TextAlign="TextAlign.Justify" class="mb-0" /></Helper>
                                        </RadzenFormField>
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolCapturaError)" hidden="@(!isVisibleCapturaError)" />
                                        <ValidationMessage For="@(() => oSolicitudTicket.SolFileSizeCapturaError)" hidden="@(!isVisibleCapturaError)" />
                                    </div>
                                </div>
                            </ChildContent>
                        </RadzenFieldset>

                        <!-- ******************************************************************* ReCAPTCHA Y BOTÓN ENVIAR ******************************************************************* -->
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.Wrap" Gap="10px" class="rz-mt-4">
                            <ReCAPTCHA @ref="oReCAPTCHAComponent" SiteKey="6Ld6058pAAAAACiEYq0Khine3FWbHZpfyEraTlOX" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                            <ValidationSummary class="rz-my-0" />
                            <RadzenButton Text="Enviar Solicitud-Ticket"
                                          BusyText="Enviando Solicitud-Ticket..."
                                          ButtonStyle="ButtonStyle.Success"
                                          ButtonType="ButtonType.Submit"
                                          IsBusy="@busyLoading"
                                          Icon="send"
                                          class="w-100 rz-ripple"
                                          Shade="Shade.Default"
                                          Disabled="@DisablePostButton"
                                          Size="ButtonSize.Large"
                                          Variant="Variant.Filled" />
                        </RadzenStack>
                    </EditForm>
                </RadzenCard>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
}
else
{
    <LoadingComponent />
}

@code
{
    @*///////////////////////////////////////////////  INICIALIZAR OBJETOS Y OBTENER DATA ASYNC  ///////////////////////////////////////////////*@
    private Response<RequestDTO_Usuario>? oResponseUsuario = new();
    private Response<List<RequestViewModel_TipoSolicitud>>? oTiposSolicitud = new();
    private RequestDTO_Solicitud oSolicitudTicket = new();
    private Response<RequestViewModel_TipoPersonal>? oTipoPersonal = new();
    private Response<RequestViewModel_Link>? oLinkReducirTamañoArchivo = new();
    private Response<RequestViewModel_Escuela>? oEscuela = new();
    private int idTipoPersonal;
    bool isCheckedPhoneNumber = true;
    bool isCheckedEmail = true;
    string rememberPhoneNumber => isCheckedPhoneNumber ? "Si lo recuerdo" : "No lo recuerdo";
    string rememberEmail => isCheckedEmail ? "Si lo recuerdo" : "No lo recuerdo";

    // public List<RequestViewModel_EstadoSolicitud> cat_SolIdEstadoSolicitud { get; private set; } = new();
    // public List<RequestViewModel_TipoSolicitud> cat_SolIdTipoSolicitud { get; private set; } = new();
    // public List<RequestDTO_Usuario> cat_SolIdUsuario { get; private set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await servicioAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            idTipoPersonal = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == "TipoPersonal")?.Value);
            int idUsuario = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == "ID")?.Value);

            oResponseUsuario = await servicioUsuario.GetDataByIdAsync(idUsuario);
            oTiposSolicitud = await servicioTipoSolicitud.GetAllDataByStatusAsync(true);
            oTipoPersonal = await servicioTipoPersonal.GetDataByIdAsync(idTipoPersonal);
            oLinkReducirTamañoArchivo = await servicioLink.GetDataByNameAsync("REDUCIR TAMAÑO ARCHIVO");
            oEscuela = await servicioEscuela.GetDataByIdAsync(1);

            if (idTipoPersonal != 2)
                oTiposSolicitud!.Data = oTiposSolicitud?.Data?.Where(ts => ts.IdTipoSolicitud != 4).ToList();

            @* DATOS ID DE LA SOLICITUD-TICKET *@
            oSolicitudTicket.IdSolicitudTicket = 0;
            oSolicitudTicket.SolToken = oGuid.ToString();
            @* DATOS DE LA SOLICITUD-TICKET *@
            oSolicitudTicket.SolIdTipoSolicitud = 0;
            oSolicitudTicket.SolIdUsuario = oResponseUsuario!.Data!.IdUsuario;
            @* DATOS DE ARCHIVOS PDF USUARIO *@
            oSolicitudTicket.SolFileNameCurp = "";
            oSolicitudTicket.SolFileSizeCurp = 0L;
            if (idTipoPersonal == 1 || idTipoPersonal == 2 || idTipoPersonal == 3)
            {
                oSolicitudTicket.SolFileNameComprobanteInscripcion = "";
                oSolicitudTicket.SolFileSizeComprobanteInscripcion = 0L;
            }
            else
            {
                oSolicitudTicket.SolFileNameComprobanteInscripcion = "-";
                oSolicitudTicket.SolFileSizeComprobanteInscripcion = 1L;
            }
            @* DATOS DE CAMBIO DE NO. DE CELULAR *@
            oSolicitudTicket.SolNoCelularAnterior = "00 00 00 00 00";
            oSolicitudTicket.SolNoCelularActual = "00 00 00 00 00";
            @* DATOS DE CAMBIO DE CORREO PERSONAL *@
            oSolicitudTicket.SolCorreoPersonalCuentaAnterior = "ejemplo@test.com";
            oSolicitudTicket.SolCorreoPersonalCuentaActual = "ejemplo@test.com";
            @* DATOS DE ARCHIVOS PDF CAPTURAS *@
            oSolicitudTicket.SolCapturaEscaneoAntivirus = "";
            oSolicitudTicket.SolFileSizeCapturaEscaneoAntivirus = 0L;
            oSolicitudTicket.SolCapturaCuentaBloqueada = "";
            oSolicitudTicket.SolFileSizeCapturaCuentaBloqueada = 0L;
            oSolicitudTicket.SolCapturaError = "";
            oSolicitudTicket.SolFileSizeCapturaError = 0L;
            @* OTROS DATOS *@
            oSolicitudTicket.SolObservacionesSolicitud = "";
            oSolicitudTicket.SolIdEstadoSolicitud = 2;
            oSolicitudTicket.SolFechaHoraActualizacion = null;
            oSolicitudTicket.SolValidacionDatos = false;
            oSolicitudTicket.SolRespuestaDcyC = "";
            @* DATOS ENCUESTA DE CALIDAD DE LA SOLICITUD-TICKET *@
            oSolicitudTicket.SolEnvioEncuesta = 0;
            oSolicitudTicket.SolEncuestaCalidadCalificacion = null;
            oSolicitudTicket.SolEncuestaCalidadComentarios = "";
            oSolicitudTicket.SolFechaHoraEncuesta = null;
            @* DATOS FECHA Y HORA DE LA SOLICITUD-TICKET *@
            oSolicitudTicket.SolFechaHoraCreacion = DateTime.Now;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JSRuntime.InvokeVoidAsync("blazorInit");

        if (firstRender)
        {
            // cat_SolIdEstadoSolicitud = await WebUtils.ListByStatusAsync(servicioEstadoSolicitud);
            // cat_SolIdTipoSolicitud = await WebUtils.ListByStatusAsync(servicioTipoSolicitud);
            StateHasChanged();
        }
    }

    @*///////////////////////////////////////////////  VALIDAR CAMPOS DEL FORMULARIO CON DATA_NOTATIONS  ///////////////////////////////////////////////*@
    private async Task OnInvalidHandled_ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        // await JSRuntime.InvokeVoidAsync("eval", $@"document.getElementById('tipo_solicitud_list').select()");
    }

    @*///////////////////////////////////////////////  LISTA MOTIVOS / INCIDENCIAS DE SOLICITUD DE TICKET  ///////////////////////////////////////////////*@
    private bool isVisibleNoCelularAnteriorActual = false;
    private bool isVisibleCuentaCorreoPersonalAnteriorActual = false;
    private bool isVisibleCapturaCuentaBloqueada = false;
    private bool isVisibleCapturaEscaneoAntivirus = false;
    private bool isVisibleCapturaError = false;

    private async Task OnChangeListBox(object args)
    {
        Console.WriteLine($@"Motivo o Tipo de Solicitud: {oSolicitudTicket.SolIdTipoSolicitud}");

        @* DATOS DE ARCHIVOS PDF USUARIO *@
        oSolicitudTicket.SolFileNameCurp = "";
        oSolicitudTicket.SolFileSizeCurp = 0L;
        if (idTipoPersonal == 1 || idTipoPersonal == 2 || idTipoPersonal == 3)
        {
            oSolicitudTicket.SolFileNameComprobanteInscripcion = "";
            oSolicitudTicket.SolFileSizeComprobanteInscripcion = 0L;
        }
        else
        {
            oSolicitudTicket.SolFileNameComprobanteInscripcion = "-";
            oSolicitudTicket.SolFileSizeComprobanteInscripcion = 1L;
        }
        @* DATOS DE CAMBIO DE NO. DE CELULAR O CORREO PERSONAL *@
        oSolicitudTicket.SolNoCelularAnterior = "00 00 00 00 00";
        oSolicitudTicket.SolNoCelularActual = oResponseUsuario!.Data!.UsuNoCelularActual;
        isCheckedPhoneNumber = true;
        isCheckedEmail = true;
        oSolicitudTicket.SolCorreoPersonalCuentaAnterior = "ejemplo@test.com";
        oSolicitudTicket.SolCorreoPersonalCuentaActual = oResponseUsuario.Data.UsuCorreoPersonalCuentaActual;
        
        await oUploadFile_SolFileNameCurp.ClearFiles();
        await oUploadFile_SolFileNameComprobanteInscripcion.ClearFiles();
        await oUploadFile_SolCapturaEscaneoAntivirus.ClearFiles();
        await oUploadFile_SolCapturaCuentaBloqueada.ClearFiles();
        await oUploadFile_SolCapturaError.ClearFiles();

        oFileInfoSolCurp = null;
        oFileInfoSolComprobanteInscripcion = null;
        oFileInfoSolCapturaEscaneoAntivirus = null;
        oFileInfoSolCapturaCuentaBloqueada = null;
        oFileInfoSolCapturaError = null;

        if (oSolicitudTicket.SolIdTipoSolicitud == 1)                   // 1. Bloqueo de Cuenta
        {
            @* DATOS DE ARCHIVOS PDF CAPTURAS *@
            oSolicitudTicket.SolCapturaEscaneoAntivirus = "";
            oSolicitudTicket.SolFileSizeCapturaEscaneoAntivirus = 0L;
            oSolicitudTicket.SolCapturaCuentaBloqueada = "";
            oSolicitudTicket.SolFileSizeCapturaCuentaBloqueada = 0L;
            oSolicitudTicket.SolCapturaError = "-";
            oSolicitudTicket.SolFileSizeCapturaError = 1L;

            isVisibleNoCelularAnteriorActual = false;
            isVisibleCuentaCorreoPersonalAnteriorActual = false;
            isVisibleCapturaCuentaBloqueada = true;
            isVisibleCapturaEscaneoAntivirus = true;
            isVisibleCapturaError = false;
        }
        else if (oSolicitudTicket.SolIdTipoSolicitud == 2)              // 2. Cambio de Correo Electrónico Personal
        {
            oSolicitudTicket.SolCorreoPersonalCuentaAnterior = "";
            oSolicitudTicket.SolCorreoPersonalCuentaActual = "";
            @* DATOS DE ARCHIVOS PDF CAPTURAS *@
            oSolicitudTicket.SolCapturaEscaneoAntivirus = "-";
            oSolicitudTicket.SolFileSizeCapturaEscaneoAntivirus = 1L;
            oSolicitudTicket.SolCapturaCuentaBloqueada = "-";
            oSolicitudTicket.SolFileSizeCapturaCuentaBloqueada = 1L;
            oSolicitudTicket.SolCapturaError = "-";
            oSolicitudTicket.SolFileSizeCapturaError = 1L;

            isVisibleNoCelularAnteriorActual = false;
            isVisibleCuentaCorreoPersonalAnteriorActual = true;
            isVisibleCapturaCuentaBloqueada = false;
            isVisibleCapturaEscaneoAntivirus = false;
            isVisibleCapturaError = false;
        }
        else if (oSolicitudTicket.SolIdTipoSolicitud == 3)              // 3. Cambio de Número de Celular
        {
            oSolicitudTicket.SolNoCelularAnterior = "";
            oSolicitudTicket.SolNoCelularActual = "";
            @* DATOS DE ARCHIVOS PDF CAPTURAS *@
            oSolicitudTicket.SolCapturaEscaneoAntivirus = "-";
            oSolicitudTicket.SolFileSizeCapturaEscaneoAntivirus = 1L;
            oSolicitudTicket.SolCapturaCuentaBloqueada = "-";
            oSolicitudTicket.SolFileSizeCapturaCuentaBloqueada = 1L;
            oSolicitudTicket.SolCapturaError = "-";
            oSolicitudTicket.SolFileSizeCapturaError = 1L;

            isVisibleNoCelularAnteriorActual = true;
            isVisibleCuentaCorreoPersonalAnteriorActual = false;
            isVisibleCapturaCuentaBloqueada = false;
            isVisibleCapturaEscaneoAntivirus = false;
            isVisibleCapturaError = false;
        }
        else if (oSolicitudTicket.SolIdTipoSolicitud == 4)              // 4. Correo Electrónico de Egresado
        {
            @* DATOS DE ARCHIVOS PDF CAPTURAS *@
            oSolicitudTicket.SolCapturaEscaneoAntivirus = "-";
            oSolicitudTicket.SolFileSizeCapturaEscaneoAntivirus = 1L;
            oSolicitudTicket.SolCapturaCuentaBloqueada = "-";
            oSolicitudTicket.SolFileSizeCapturaCuentaBloqueada = 1L;
            oSolicitudTicket.SolCapturaError = "-";
            oSolicitudTicket.SolFileSizeCapturaError = 1L;

            isVisibleNoCelularAnteriorActual = false;
            isVisibleCuentaCorreoPersonalAnteriorActual = false;
            isVisibleCapturaCuentaBloqueada = false;
            isVisibleCapturaEscaneoAntivirus = false;
            isVisibleCapturaError = false;
        }
        else if (oSolicitudTicket.SolIdTipoSolicitud == 5)              // 5. Creación o Activación de Correo Institucional
        {
            @* DATOS DE ARCHIVOS PDF CAPTURAS *@
            oSolicitudTicket.SolCapturaEscaneoAntivirus = "-";
            oSolicitudTicket.SolFileSizeCapturaEscaneoAntivirus = 1L;
            oSolicitudTicket.SolCapturaCuentaBloqueada = "-";
            oSolicitudTicket.SolFileSizeCapturaCuentaBloqueada = 1L;
            oSolicitudTicket.SolCapturaError = "-";
            oSolicitudTicket.SolFileSizeCapturaError = 1L;

            isVisibleNoCelularAnteriorActual = false;
            isVisibleCuentaCorreoPersonalAnteriorActual = false;
            isVisibleCapturaCuentaBloqueada = false;
            isVisibleCapturaEscaneoAntivirus = false;
            isVisibleCapturaError = false;
        }
        else if (oSolicitudTicket.SolIdTipoSolicitud == 6)              // 6. Recuperación de Contraseña
        {
            @* DATOS DE ARCHIVOS PDF CAPTURAS *@
            oSolicitudTicket.SolCapturaEscaneoAntivirus = "-";
            oSolicitudTicket.SolFileSizeCapturaEscaneoAntivirus = 1L;
            oSolicitudTicket.SolCapturaCuentaBloqueada = "-";
            oSolicitudTicket.SolFileSizeCapturaCuentaBloqueada = 1L;
            oSolicitudTicket.SolCapturaError = "-";
            oSolicitudTicket.SolFileSizeCapturaError = 1L;

            isVisibleNoCelularAnteriorActual = false;
            isVisibleCuentaCorreoPersonalAnteriorActual = false;
            isVisibleCapturaCuentaBloqueada = false;
            isVisibleCapturaEscaneoAntivirus = false;
            isVisibleCapturaError = false;
        }
        else if (oSolicitudTicket.SolIdTipoSolicitud == 7)              // 7. Otro motivo de Solicitud (por error)
        {
            @* DATOS DE ARCHIVOS PDF CAPTURAS *@
            oSolicitudTicket.SolCapturaEscaneoAntivirus = "-";
            oSolicitudTicket.SolFileSizeCapturaEscaneoAntivirus = 1L;
            oSolicitudTicket.SolCapturaCuentaBloqueada = "-";
            oSolicitudTicket.SolFileSizeCapturaCuentaBloqueada = 1L;
            oSolicitudTicket.SolCapturaError = "";
            oSolicitudTicket.SolFileSizeCapturaError = 0L;

            isVisibleNoCelularAnteriorActual = false;
            isVisibleCuentaCorreoPersonalAnteriorActual = false;
            isVisibleCapturaCuentaBloqueada = false;
            isVisibleCapturaEscaneoAntivirus = false;
            isVisibleCapturaError = true;
        }
    }

    @*///////////////////////////////////////////////  VALIDAR CAMPOS DEL FORMULARIO ARCHIVOS PARA SUBIR  ///////////////////////////////////////////////*@
    // Subida de archivo
    private RadzenUpload oUploadFile_SolFileNameCurp = new();
    private RadzenUpload oUploadFile_SolFileNameComprobanteInscripcion = new();
    private RadzenUpload oUploadFile_SolCapturaEscaneoAntivirus = new();
    private RadzenUpload oUploadFile_SolCapturaCuentaBloqueada = new();
    private RadzenUpload oUploadFile_SolCapturaError = new();
    private IEnumerable<FileInfo>? oFileInfoSolCurp { get; set; }
    private IEnumerable<FileInfo>? oFileInfoSolComprobanteInscripcion { get; set; }
    private IEnumerable<FileInfo>? oFileInfoSolCapturaEscaneoAntivirus { get; set; }
    private IEnumerable<FileInfo>? oFileInfoSolCapturaCuentaBloqueada { get; set; }
    private IEnumerable<FileInfo>? oFileInfoSolCapturaError { get; set; }

    private async Task OnChangeFiles(UploadChangeEventArgs args, string name)
    {
        foreach (var file in args.Files)
        {
            if (name == CURP)
            {
                oSolicitudTicket.SolFileNameCurp = $"{CURP}_{oGuid}{Path.GetExtension(file.Name).ToLower()}";
                oSolicitudTicket.SolFileSizeCurp = file.Size; // bytes
                oFileInfoSolCurp = args.Files;
            }
            else if (name == ComprobanteInscripcion)
            {
                oSolicitudTicket.SolFileNameComprobanteInscripcion = $"{ComprobanteInscripcion}_{oGuid}{Path.GetExtension(file.Name).ToLower()}";
                oSolicitudTicket.SolFileSizeComprobanteInscripcion = file.Size; // bytes
                oFileInfoSolComprobanteInscripcion = args.Files;
            }
            else if (name == CapturaEscaneoAntivirus)
            {
                oSolicitudTicket.SolCapturaEscaneoAntivirus = $"{CapturaEscaneoAntivirus}_{oGuid}{Path.GetExtension(file.Name).ToLower()}";
                oSolicitudTicket.SolFileSizeCapturaEscaneoAntivirus = file.Size; // bytes
                oFileInfoSolCapturaEscaneoAntivirus = args.Files;
            }
            else if (name == CapturaCuentaBloqueada)
            {
                oSolicitudTicket.SolCapturaCuentaBloqueada = $"{CapturaCuentaBloqueada}_{oGuid}{Path.GetExtension(file.Name).ToLower()}";
                oSolicitudTicket.SolFileSizeCapturaCuentaBloqueada = file.Size; // bytes
                oFileInfoSolCapturaCuentaBloqueada = args.Files;
            }
            else if (name == CapturaError)
            {
                oSolicitudTicket.SolCapturaError = $"{CapturaError}_{oGuid}{Path.GetExtension(file.Name).ToLower()}";
                oSolicitudTicket.SolFileSizeCapturaError = file.Size; // bytes
                oFileInfoSolCapturaError = args.Files;
            }
        }
    }

    async Task OnErrorFiles(UploadErrorEventArgs args, string name) => Console.WriteLine($"{args.Message}");

    async Task OnProgressFiles(UploadProgressArgs args, string name)
    {
        // Console.WriteLine($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                // Console.WriteLine($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

    async Task OnCompleteFiles(UploadCompleteEventArgs args) => Console.WriteLine($"Server response: {args.RawResponse}");

    @*///////////////////////////////////////////////  VALIDAR ReCAPTCHA  ////////////////////////////////////////////////////////////////////////*@
    private ReCAPTCHA oReCAPTCHAComponent;
    // private bool ServerVerificatiing = false;
    private bool ValidReCAPTCHA = false;
    private async Task OnSuccess() => ValidReCAPTCHA = true;
    private async Task OnExpired() => ValidReCAPTCHA = false;

    @*///////////////////////////////////////////////  REGISTRAR NUEVA SOLICITUD  //////////////////////////////////////////////////////////////////////*@
    public Response<object>? oRespuesta = new();
    private bool busyLoading = false;
    private bool DisablePostButton => !ValidReCAPTCHA;
    private Response<RequestViewModel_TipoSolicitud>? oTipoSolicitud = new();
    private string folderUsuarios = "usuarios";
    private string folderSolicitudes = "solicitudes-tickets";
    private string CURP = "CURP";
    private string ComprobanteInscripcion = "Comprobante-Inscripcion";
    private string CapturaEscaneoAntivirus = "CapturaEscaneoAntivirus";
    private string CapturaCuentaBloqueada = "CapturaCuentaBloqueada";
    private string CapturaError = "CapturaError";
    private int idResponse;
    private Guid oGuid = Guid.NewGuid();

    private RequestDTO_SendWhatsApp oSendWhatsApp = new();

    public async Task OnValidHandled_Registrar()
    {
        try
        {
            busyLoading = true;
            oTipoSolicitud = await servicioTipoSolicitud.GetDataByIdAsync(oSolicitudTicket.SolIdTipoSolicitud);
            oSolicitudTicket.SolFechaHoraCreacion = DateTime.Now;
            string fecha_hora_creación = oSolicitudTicket.SolFechaHoraCreacion.ToString("dddd',' dd 'de' MMMM 'del' yyyy 'a las' HH:mm:ss 'hrs.'")!;

            var verification = await servicioSolicitud.GetDataByIdUsuarioStatusAsync(oResponseUsuario!.Data!.IdUsuario);

            if (ValidReCAPTCHA && verification?.Success == 1)
            {
                var respuesta = await servicioSolicitud.AddDataAsync(oSolicitudTicket);
                oRespuesta = respuesta.Content.ReadFromJsonAsync<Response<object>>().Result;

                if (respuesta.IsSuccessStatusCode && oRespuesta!.Success == 1)
                {
                    idResponse = int.Parse(oRespuesta.Message);

                    string nuevo_correo_personal = oSolicitudTicket.SolIdTipoSolicitud == 2 ?
                                                   $@"<br><div align='center'>ℹ️ Tu nuevo usuario para ingresar a SACI es:
                                                      <strong>{oSolicitudTicket.SolCorreoPersonalCuentaActual?.Trim()}<strong></div><br><br>" : "";

                    string msgEmail = $@"
                        <body>
	                        <header>
		                        <div align='center'>
			                        <p style='font-weight:bold; text-align:center; color:black;'>SACI | Sistema de Atención para Correos Institucionales</p>
		                        </div>
	                        </header>
	                        <main>
		                        <section>
			                        <article style='background-color: rgb(255, 255, 255); border-radius:10px; padding:5px;'>
				                        <p style='text-align:justify; color:black;'>
                                            ℹ️ <b>POR FAVOR NO RESPONDER A ESTE CORREO.</b><br><br>
                                            Estimad@: <br><b>{oResponseUsuario.Data.UsuNombres?.Trim()} {oResponseUsuario.Data.UsuPrimerApellido?.Trim()} {oResponseUsuario.Data.UsuSegundoApellido?.Trim()}</b><br><br>
				                            Se aperturó con éxito el Ticket <b>#{idResponse}</b> de la Solicitud <b>{oTipoSolicitud!.Data!.TiposolDescripcion}</b>
                                            con la observación <b>{oSolicitudTicket.SolObservacionesSolicitud?.Trim()}</b>.
				                        </p>
			                        </article>

			                        <div align='center'>
				                        <article style='background-color: rgb(255, 255, 255); width:700px; border-radius:10px; padding:5px; '>
					                        <p class='text-start' style='color:black;'>
						                        Sus datos son los siguientes:<br>
						                        <table style='text-align:justify;'>
							                        <thead>
								                        <tr>
									                        <th scope='col' colspan='2' style='border: 1px solid black;'>Datos de la Solicitud</th>
								                        </tr>
							                        </thead>
							                        <tbody>
								                        <tr style='background-color: #dddddd;'>
									                        <td width='200px' style='border: 1px solid black;'><b>✅ #Ticket</b></td>
									                        <td width='300px' style='border: 1px solid black;'><b>{idResponse}</b></td>
								                        </tr>
								                        <tr>
									                        <td width='200px' style='border: 1px solid black;'><b>✅ Motivo/Incidencia de la Solicitud</b></td>
									                        <td width='300px' style='border: 1px solid black;'>{oTipoSolicitud.Data.TiposolDescripcion}</td>
								                        </tr>
								                        <tr style='background-color: #dddddd;'>
									                        <td width='200px' style='border: 1px solid black;'><b>✅ Nombre</b></td>
									                        <td width='300px' style='border: 1px solid black;'>{oResponseUsuario?.Data.UsuNombres?.Trim()} {oResponseUsuario?.Data.UsuPrimerApellido?.Trim()} {oResponseUsuario?.Data.UsuSegundoApellido?.Trim()}</td>
								                        </tr>
								                        <tr>
									                        <td width='200px' style='border: 1px solid black;'><b>✅ Observaciones</b></td>
									                        <td width='300px' style='border: 1px solid black;'>{oSolicitudTicket.SolObservacionesSolicitud?.Trim()}</td>
								                        </tr>
								                        <tr style='background-color: #dddddd;'>
									                        <td width='200px' style='border: 1px solid black;'><b>✅ Estado</b></td>
									                        <td width='300px' style='border: 1px solid black;'>
                                                                <b>Pendiente</b> (Se aperturó la Solicitud-Ticket y se ha colocado en la Bandeja de Espera para su pronta atención).
                                                            </td>
								                        </tr>
                                                        <tr>
									                        <td width='200px' style='border: 1px solid black;'><b>✅ Fecha / Hora de Creación</b></td>
									                        <td width='300px' style='border: 1px solid black;'>{fecha_hora_creación}</td>
								                        </tr>
							                        </tbody>
						                        </table>
					                        </p>
				                        </article>
			                        </div><br>
                                    {nuevo_correo_personal}
                                    <div align='center'>
                                        <strong>ATENCIÓN:</strong><br><br>
                                        <article style='background-color: rgb(244,244,244); width:700px; border-radius:10px; padding:5px; text-align:justify;'>
				                            Te informamos que las solicitudes tendrán una <b>respuesta entre 3 y 5 días hábiles</b>,
                                            se te notificará por los medios / vías de comunicación los avances del estado de tu solicitud.
			                            </article>
                                    </div>
                                    <br>
                                    <div align='center'>
                                        <article style='background-color: rgb(244,244,244); width:700px; border-radius:10px; padding:5px; text-align:justify;'>
				                            <strong>Para alumnos de nuevo ingreso</strong> te informamos que las solicitudes tendrán una respuesta de un <b>máximo de 2 meses.</b>
			                            </article>
                                    </div>

			                        <footer>
                                        <p style='color:black;'>
                                            Que tenga un excelente día.<br>
                                            NUESTRO MAYOR COMPROMISO ES BRINDARLE CON EFICIENCIA Y CALIDAD EL SERVICIO.
                                        </p>
                                    </footer>
		                        </section>
	                        </main>
	                        <footer>
		                        <div align='center'>
			                        
		                        </div>
	                        </footer>
                        </body>";

                    oSendWhatsApp.Number = oSolicitudTicket.SolNoCelularActual!.Replace(" ", string.Empty);
                    string aviso_alumnos = oResponseUsuario?.Data.UsuIdTipoPersonal == 1 ? " 💡 *Para alumnos de nuevo ingreso* te informamos que las solicitudes tendrán una respuesta de un *máximo de 2 meses.*\n\n" : "";
                    oSendWhatsApp.Message = "*SACI | Sistema de Atención para Correos Institucionales*\n" +
                                            "ℹ *POR FAVOR NO RESPONDER A ESTE MENSAJE*\n\n" +
                                            "Estimad@:\n*" + oResponseUsuario?.Data.UsuNombres?.Trim() + " " + oResponseUsuario?.Data.UsuPrimerApellido?.Trim() + " " + oResponseUsuario?.Data.UsuSegundoApellido?.Trim() + "*\n\n" +
                                            "Se le informa que se aperturó con éxito el Ticket *#" + idResponse + "* " +
                                            "de la Solicitud *" + oTipoSolicitud.Data.TiposolDescripcion + "*.\n\n" +
                                            "Por este medio se le dan los _Datos de la Solicitud_:\n" +
                                            "✅ Ticket: *#" + idResponse + "*\n" +
                                            "✅ Motivo/Incidencia de la Solicitud: *" + oTipoSolicitud.Data.TiposolDescripcion + "*\n" +
                                            "✅ Observaciones: *" + oSolicitudTicket.SolObservacionesSolicitud?.Trim() + "*\n" +
                                            "✅ Estado: *Pendiente* (Se aperturó la Solicitud-Ticket y se ha colocado en la Bandeja de Espera para su pronta atención).\n" +
                                            "✅ Fecha / Hora de Creación: *" + fecha_hora_creación + "*\n\n" +
                                            (oSolicitudTicket.SolIdTipoSolicitud == 2 ? $"ℹ️ Tu nuevo usuario para ingresar a SACI es: *{oSolicitudTicket.SolCorreoPersonalCuentaActual?.Trim()}*\n\n" : "") +
                                            "*ATENCIÓN:*\n\n" +
                                            " 👀 Te informamos que las solicitudes tendrán una *respuesta entre 3 y 5 días hábiles*, se te notificará por los medios / vías de comunicación los avances del estado de tu solicitud.\n\n" +
                                            aviso_alumnos +
                                            "Que tenga un excelente día.\n" +
                                            "> *NUESTRO MAYOR COMPROMISO ES BRINDARLE CON EFICIENCIA Y CALIDAD EL SERVICIO.*";

                    @*//  UPLOAD FILES  //*@
                    
                    if (oFileInfoSolCurp is not null)
                    {
                        oSolicitudTicket.SolFileNameCurp = $"{CURP}{Path.GetExtension(oSolicitudTicket.SolFileNameCurp).ToLower()}";
                        oUploadFile_SolFileNameCurp.Url = $@"/api/RepositoryFiles/UploadSingleFile/{folderUsuarios}/{oResponseUsuario.Data.IdUsuario}/{oSolicitudTicket.SolFileNameCurp}/{oGuid}";
                        await oUploadFile_SolFileNameCurp.Upload();
                    }
                    
                    if (oFileInfoSolComprobanteInscripcion is not null)
                    {
                        oSolicitudTicket.SolFileNameComprobanteInscripcion = $"{ComprobanteInscripcion}{Path.GetExtension(oSolicitudTicket.SolFileNameComprobanteInscripcion).ToLower()}";
                        oUploadFile_SolFileNameComprobanteInscripcion.Url = $@"/api/RepositoryFiles/UploadSingleFile/{folderUsuarios}/{oResponseUsuario.Data.IdUsuario}/{oSolicitudTicket.SolFileNameComprobanteInscripcion}/{oGuid}";
                        await oUploadFile_SolFileNameComprobanteInscripcion.Upload();
                    }

                    if (oFileInfoSolCapturaEscaneoAntivirus is not null)
                    {
                        oSolicitudTicket.SolCapturaEscaneoAntivirus = $"{CapturaEscaneoAntivirus}{Path.GetExtension(oSolicitudTicket.SolCapturaEscaneoAntivirus).ToLower()}";
                        oUploadFile_SolCapturaEscaneoAntivirus.Url = $@"/api/RepositoryFiles/UploadSingleFile/{folderSolicitudes}/{idResponse}/{oSolicitudTicket.SolCapturaEscaneoAntivirus}/{oGuid}";
                        await oUploadFile_SolCapturaEscaneoAntivirus.Upload();
                    }

                    if (oFileInfoSolCapturaCuentaBloqueada is not null)
                    {
                        oSolicitudTicket.SolCapturaCuentaBloqueada = $"{CapturaCuentaBloqueada}{Path.GetExtension(oSolicitudTicket.SolCapturaCuentaBloqueada).ToLower()}";
                        oUploadFile_SolCapturaCuentaBloqueada.Url = $@"/api/RepositoryFiles/UploadSingleFile/{folderSolicitudes}/{idResponse}/{oSolicitudTicket.SolCapturaCuentaBloqueada}/{oGuid}";
                        await oUploadFile_SolCapturaCuentaBloqueada.Upload();
                    }

                    if (oFileInfoSolCapturaError is not null)
                    {
                        oSolicitudTicket.SolCapturaError = $"{CapturaError}{Path.GetExtension(oSolicitudTicket.SolCapturaError).ToLower()}";
                        oUploadFile_SolCapturaError.Url = $@"/api/RepositoryFiles/UploadSingleFile/{folderSolicitudes}/{idResponse}/{oSolicitudTicket.SolCapturaError}/{oGuid}";
                        await oUploadFile_SolCapturaError.Upload();
                    }

                    @*//  ENVÍO DE WHATSAPP PARA AVISO DE REGISTRO EXITOSO  //*@
                    await servicioSendWhatsApp.SendWhatsAppAsync(oSendWhatsApp);

                    @*//  ENVÍO DE CORREO ELECTRÓNICO PARA AVISO DE REGISTRO DE SOLICITUD-TICKET EXITOSO  //*@
                    servicioSendEmail.SendEmailAsync(
                        new RequestDTO_SendEmail()
                        {
                            EmailTo = oSolicitudTicket.SolCorreoPersonalCuentaActual!.Trim(),
                            Subject = $@"SACI | SOLICITUD-TICKET #{idResponse}",
                            Body = msgEmail
                        });

                    @*//  NOTIFICATION TOAST REGISTRO DE SOLICITUD-TICKET EXITOSO  //*@
                    NotificationService.Notify(
                        new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 3000,
                            Summary = "¡Solicitud de Ticket generada con éxito!",
                            Detail = $@"Se aperturó la Solicitud-Ticket #{idResponse} y se le notificará por los medios / vías de comunicación."
                            // SummaryContent = ns => @<RadzenText TextStyle="TextStyle.H6">Custom summary: <br /> @DateTime.Now</RadzenText>,
                            // DetailContent = ns => @<RadzenButton Text="Clear" Click="@(args => ns.Messages.Clear())" />
                        });

                    @*//  DIALOG MESSAGE REGISTRO EXITOSO  //*@
                    await DialogModalService.OpenAsync($@"<span style='font-variant: small-caps; font-size:18px;'>Mensaje<span>", ds =>
                        @<div>
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Gap="5px" Class="">
                                <span class="circle-border">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-check-lg" viewBox="0 0 16 16" style="color: green; font-weight: bold;">
                                        <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z" />
                                    </svg>
                                </span>
                                <RadzenText TextStyle="TextStyle.Body1" class="text-success"><b>¡Solicitud-Ticket generada con éxito!</b></RadzenText>
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.NoWrap" Gap="5px" Class="">
                                <RadzenStack Gap="0px">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">#Ticket:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@idResponse</b></RadzenText>
                                </RadzenStack>
                                <RadzenStack Gap="0px">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Motivo/Incidencia de la Solicitud:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@oTipoSolicitud.Data.TiposolDescripcion</b></RadzenText>
                                </RadzenStack>
                                <RadzenStack Gap="0px">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Nombre Completo:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@oResponseUsuario?.Data.UsuNombres?.Trim() @oResponseUsuario?.Data.UsuPrimerApellido?.Trim() @oResponseUsuario?.Data.UsuSegundoApellido?.Trim()</b></RadzenText>
                                </RadzenStack>
                                <RadzenStack Gap="0px">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Observaciones:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@oSolicitudTicket?.SolObservacionesSolicitud?.Trim()</b></RadzenText>
                                </RadzenStack>
                                <RadzenStack Gap="0px">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Estado:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>Pendiente (Se aperturó la Solicitud-Ticket y se ha colocado en la Bandeja de Espera para su pronta atención.)</b></RadzenText>
                                </RadzenStack>
                                <RadzenStack Gap="0px">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Fecha y Hora de Creación:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@fecha_hora_creación</b></RadzenText>
                                </RadzenStack>
                                    <RadzenAlert Title="Atención:" Text="" AlertStyle="AlertStyle.Info" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Light"
                                                 ShowIcon="true" AllowClose="false" class="mb-0" Visible="true">
                                        <ul>
                                            <li>Se le notificará por los medios / vías de comunicación los datos de apertura del Ticket <b>#@idResponse.</b></li>
                                            <li>Se mostrará el Seguimiento de la Solicitud del Ticket <b>#@idResponse.</b></li>
                                        </ul>
                                    </RadzenAlert>
                                <RadzenButton Text="Cerrar"
                                              BusyText=""
                                              ButtonStyle="ButtonStyle.Warning"
                                              ButtonType="ButtonType.Button"
                                              IsBusy="false"
                                              Icon="cancel"
                                              class="rz-color-white rz-ripple rz-my-0 w-100"
                                              Shade="Shade.Darker"
                                              Click="@(() => navigationManager.NavigateTo("/"))" />
                            </RadzenStack>
                        </div>,
                        new DialogOptions()
                        {
                            CloseDialogOnOverlayClick = false,
                            CloseDialogOnEsc = false,
                            Width = "Auto",
                            Height = "Auto",
                            Resizable = true,
                            ShowTitle = true,
                            ShowClose = true,
                            Draggable = true,
                            CssClass = "custom-dialog-class",
                            WrapperCssClass = "custom-dialog-wrapper-class"
                        });

                    navigationManager.NavigateTo("/Inicio");
                }
                else
                {
                    await servicioSendEmail.SendEmailAsync(
                        new RequestDTO_SendEmail()
                        {
                            EmailTo = oSolicitudTicket.SolCorreoPersonalCuentaActual!.Trim(),
                            Subject = "SACI | ERROR DE SOLICITUD-TICKET",
                            Body = $@"Estimad@: {oResponseUsuario.Data.UsuNombres?.Trim()} {oResponseUsuario.Data.UsuPrimerApellido?.Trim()} {oResponseUsuario.Data.UsuSegundoApellido?.Trim()} <br><br>" +
                                   "Solicitud-Ticket NO exitosa en el <b>Sistema de Atención para Correos Institucionales IPN (SACI)</b><br>" +
                                   "Por favor no responder a este correo, acuda a la unidad de informática de tu escuela<br>"
                        });
                }
            }
            else
            {
                await DialogModalService.OpenAsync($@"<span style='font-variant: small-caps; font-size:18px;'>Validación de Datos<span>", ds =>
                    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="">
                        <RadzenAlert Title="No puede solicitar un ticket por alguno de los siguientes motivos:" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Dark" ShowIcon="true" AllowClose="false"
                                     Visible="true" Class="rz-border-radius-1">
                                     <ul class="mt-3">
                                        <li>Existe una <strong>Solicitud-Ticket</strong> PENDIENTE o EN PROCESO de ser atendidas.</li>
                                        <li>Existe una <strong>Solicitud-Ticket</strong> PENDIENTE de contestar la encuesta de calidad.</li>
                                     </ul>
                        </RadzenAlert>
                    </RadzenStack>,
                    new DialogOptions()
                    {
                        CloseDialogOnOverlayClick = true,
                        CloseDialogOnEsc = true,
                        Width = "500px",
                        Height = "Auto",
                        Resizable = true,
                        ShowTitle = true,
                        ShowClose = true,
                        Draggable = true,
                        CssClass = "custom-dialog-class",
                        WrapperCssClass = "custom-dialog-wrapper-class"
                    });
            }
        }
        catch (HttpRequestException e)
        {
            await JSRuntime.InvokeAsync<object>("alert", e.Message);
        }
        finally
        {
            busyLoading = false;
        }
    }
}

@page "/SolicitudesProceso"
@using System.Net.Http.Headers
@attribute [Authorize(Policy = "[Rol] Administrador")]

<PageTitle>@Title</PageTitle>

    <div class="p-4 rounded-1 bg-white shadow">
    <h1>@Title</h1>

    @if (trabajando)
    {
        <div class="row my-4">
            <div class="col text-center">
                <img src="logo_saci.png" class="loading_img" />
                <br />
                <strong>Trabajando...</strong>
            </div>
        </div>
    }
    else
    {
        <div class="row my-4">
            <div class="offset-10 col-2">
                @if (items.Count > 0)
                {
                    <InputFile OnChange="fuImportacion_OnChange" class="form-control mb-3"></InputFile>
                }
                @if (fuImportar is not null)
                {
                    <button class="btn btn-primary form-control mb-3" @onclick="Importar">
                        <RadzenIcon Icon="get_app"></RadzenIcon>
                        Importar
                    </button>
                }
            </div>       
        </div>
    }

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@items" TItem="RequestDTO_Solicitud" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    Visible=@(!trabajando)
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedItems>
        <Columns>
            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Property="IdSolicitudTicket" Filterable="true" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Tipo" Filterable="true" TextAlign="TextAlign.Start">
                <Template Context="item">
                    @item.SolIdTipoSolicitudNavigation!.TiposolDescripcion
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Solicitante" Filterable="false" TextAlign="TextAlign.Start">
                <Template Context="item">
                    @item.SolIdUsuarioNavigation!.UsuPrimerApellido
                    @item.SolIdUsuarioNavigation!.UsuSegundoApellido
                    @item.SolIdUsuarioNavigation!.UsuNombre
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

<pre>@debug</pre>

@code
{
    private string Title = "Solicitudes en Proceso";
    private bool trabajando { get; set; } = true;

    private List<RequestDTO_Solicitud> items = new List<RequestDTO_Solicitud>();
    private IList<RequestDTO_Solicitud> selectedItems = new List<RequestDTO_Solicitud>();
    private readonly int[] estados = { TipoEstadoSolicitud.EN_PROCESO };

    private IBrowserFile? fuImportar = null;

    private string debug = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarLista();

            trabajando = false;
            StateHasChanged();
        }
    }

    private async Task CargarLista(int? selecccionar_id = null)
    {
        Response<List<RequestDTO_Solicitud>>? request = await servicioSolicitud.GetAllDataByProgressAsync(estados);

        if (request is not null && request.Data is not null)
        {
            if (request.Success == 1)
            {
                items = request.Data;
            }
            else
            {
                debug += $"{Environment.NewLine}<span class=\"text-danger fw-bold\">[ERROR]<span> {request.Message}";
            }
        }

        if (selecccionar_id is not null)
        {
            selectedItems = items.Where(i => (i.IdSolicitudTicket == selecccionar_id)).ToList();
        }
    }

    private void fuImportacion_OnChange(InputFileChangeEventArgs e)
    {
        fuImportar = e.File;
    }

    private async Task Importar()
    {
        if (fuImportar is null)
        {
            return;
        }

        trabajando = true;
        StateHasChanged();

        List<int> selected_ids = items.Where(i => i.SolValidacionDatos).Select(st => st.IdSolicitudTicket).ToList();

        using (MultipartFormDataContent content = new MultipartFormDataContent())
        {
            using (StreamContent fileContent = new StreamContent(fuImportar.OpenReadStream()))
            {
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(fuImportar.ContentType);

                content.Add(fileContent, name: "\"file\"", fuImportar.Name);

                Response<string>? oResponse = await servicioArchivos.PostFile("xlsx", "procesados", content);

                if (oResponse is not null)
                {
                    debug += Environment.NewLine + 
                    "[SERVIDOR] " + oResponse.Message + Environment.NewLine + 
                    Environment.NewLine + 
                    oResponse.Data;

                    if(oResponse.Success == 1)
                    {
                        await CargarLista();
                    }
                }
            }
        }

        fuImportar = null;
        trabajando = false;
        StateHasChanged();
    }
}

@page "/SolicitudesProceso"

@attribute [Authorize(Policy = "[Rol] Administrador")]

@inject DialogService DialogService

<PageTitle>@Title</PageTitle>

<script src="js/descargar.js?v=1.0.0.9"></script>

<div class="p-4 rounded-1 bg-white shadow">
    <div class="row mb-4">
        <div class="col-6">
            <h1>@Title</h1>
            <hr />
            @((MarkupString)links)
        </div>

        <div class="col-3">
            @if (puede_exportar && !trabajando)
            {
                <div class="shadow card">
                    <div class="card-header fw-bold">
                        Exportar
                    </div>

                    <div class="card-body">
                        <div class="my-2">
                            <InputCheckbox @bind-Value="exportar_zip"></InputCheckbox> Descargar como archivo Zip
                            <br />
                            <InputCheckbox @bind-Value="descargar_ajuntos"></InputCheckbox> Descargar adjuntos
                        </div>

                        <button class="btn btn-primary form-control" @onclick="Descargar">
                            <RadzenIcon Icon="get_app"></RadzenIcon>
                            Iniciar Exportación
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="col-3">
            @if (items.Count > 0)
            {
                <div class="shadow card">
                    <div class="card-header fw-bold">
                        Importar
                    </div>

                    <div class="card-body">
                        <InputFile OnChange="fuImportacion_OnChange" class="form-control mb-3"></InputFile>

                        @if (fuImportar is not null)
                        {
                            <button class="btn btn-primary form-control" @onclick="Importar">
                                <RadzenIcon Icon="get_app"></RadzenIcon>
                                Iniciar Importación
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="my-2"><pre class="pre">@debug</pre></div>
    
    <div class="my-2"></div>

    @if (trabajando)
    {
        <div class="col text-center">
            <img src="img/mail.png" class="loading_img" />
            <br />
            <strong>Trabajando...</strong>
        </div>
    }

    <RadzenDataGrid @ref="oSolicitudesRef" Data="@items" @bind-Value="@selectedItems" TItem="RequestDTO_Solicitud" Density="@Density"
                    IsLoading="@isLoading" Page="@OnPage" Sort="@ShowLoading" Group="@ShowLoading" Filter="@ShowLoading"
                    AllowFiltering="true" AllowColumnResize="true" AllowColumnReorder="true" AllowAlternatingRows="true" AllowSorting="true"
                    AllowColumnPicking="true" ColumnsPickerAllowFiltering="true" AllowPickAllColumns="true"
                    AllowPaging="true" PageSize="10" PagerPosition="PagerPosition.TopAndBottom" PagerHorizontalAlign="HorizontalAlign.Center" PagerAlwaysVisible="true"
                    PageSizeOptions="@(new int[] { 10, 25, 50, 100 })" PageSizeText="registros por página" ShowPagingSummary="true" PagingSummaryFormat="Mostrando página {0} de {1} <b>(Total {2} registros)</b>"
                    AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true" AllowVirtualization="true" GridLines="DataGridGridLines.Both"
                    FilterMode="FilterMode.Advanced" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And"
                    FilterText="Filtrar" EqualsText="Igual a..." NotEqualsText="Distinto de..." ContainsText="Contiene..." StartsWithText="Comienza con..." EndsWithText="Termina con..." DoesNotContainText="No contiene..."
                    IsNullText="Es nulo" IsEmptyText="Es vacío" IsNotNullText="No es nulo" IsNotEmptyText="No es vacío" AndOperatorText="Y" OrOperatorText="O"
                    GreaterThanText="Mayor que" GreaterThanOrEqualsText="Mayor o igual que" LessThanText="Menor que" LessThanOrEqualsText="Menor o igual que"
                    ClearFilterText="Limpiar Filtro" ApplyFilterText="Aplicar"
                    ColumnsShowingText="columnas visibles" AllColumnsText="Todas las columnas" ColumnsText="Mostrar columnas"
                    ColumnWidth="300px" SelectionMode="DataGridSelectionMode.Single"
                    ExpandMode="DataGridExpandMode.Single"
                    AllowGrouping="true" Render="@OnRender" HideGroupedColumn="true" ShowGroupExpandColumn="true"
                    GroupPanelText="Arrastra y suelta aquí un encabezado de una columna para agrupar sus datos."
                    Visible="@(!trabajando)">
        <HeaderTemplate>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch" JustifyContent="JustifyContent.SpaceBetween" Gap="10px" class="">
                <button class="btn btn-secondary" @onclick="CargarLista">
                    @* <RadzenIcon Icon="refresh" IconColor="@Colors.White" IconStyle="IconStyle.Warning" Style="font-size:20px;" /> *@
                    Recargar Listado
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z" />
                        <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466" />
                    </svg>
                </button>
                <RadzenSelectBar @bind-Value="@Density" TextProperty="Text" ValueProperty="Value" Visible="false"
                                 Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small">
                </RadzenSelectBar>
            </RadzenStack>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px" Pickable="false">
                <Template Context="item">
                    <RadzenBadge Variant="Variant.Flat" Text="@($"{items.IndexOf(item) + 1}")" BadgeStyle="@(BadgeStyle.Dark)" Shade="@(Shade.Darker)" IsPill="false" class="" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="# Ticket" Property="IdSolicitudTicket" Pickable="false"
                                  Filterable="true" FilterMode="FilterMode.CheckBoxList" Frozen="true" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="150px">
                <Template Context="data">
                    <h4 class="text-wrap">@data.IdSolicitudTicket</h4>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Solicitante" Property="SolIdUsuarioNavigation.UsuCurp" Pickable="false"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="300px">
                <HeaderTemplate>
                    <RadzenButton Text="SOLICITANTE (Filtro y búsqueda por el CURP)" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>SOLICITANTE</b><br>Filtro y búsqueda por el CURP.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-start text-wrap">
                        <strong>
                            @item.SolIdUsuarioNavigation!.UsuPrimerApellido
                            @item.SolIdUsuarioNavigation!.UsuSegundoApellido
                            @item.SolIdUsuarioNavigation!.UsuNombre
                        </strong>
                        <br />
                        <small>
                            @item.SolIdUsuarioNavigation?.UsuIdTipoPersonalNavigation?.TipoperNombre
                            @(item.SolIdUsuarioNavigation?.UsuIdTipoPersonal == 2 ? $" en {item.SolIdUsuarioNavigation?.UsuAnioEgreso}" : "")
                        </small>
                        <br /><br />
                        <ul>
                            <li>
                                <strong>CURP: </strong>
                                @item.SolIdUsuarioNavigation?.UsuCurp
                            </li>

                            <li>
                                @if (alumno_o_egresado.Contains(item.SolIdUsuarioNavigation!.UsuIdTipoPersonal))
                                {
                                    <strong>Número de Boleta: </strong>
                                    @item.SolIdUsuarioNavigation!.UsuBoletaAlumno
                                }
                                else
                                {
                                    <strong>Número de Empleado: </strong>
                                    @item.SolIdUsuarioNavigation!.UsuNumeroEmpleado
                                }
                                @if (item.SolIdUsuarioNavigation!.UsuBoletaMaestria != "B000000")
                                {
                                    <strong>Número de Boleta de Maestría: </strong>
                                    @item.SolIdUsuarioNavigation!.UsuBoletaMaestria
                                }
                            </li>

                            <li>
                                <strong>Correo Personal actual: </strong>
                                <div style="white-space: pre-wrap">@item.SolIdUsuarioNavigation!.UsuCorreoPersonalCuentaNueva</div>
                            </li>

                            @if (!string.IsNullOrEmpty(item.SolIdUsuarioNavigation?.UsuCorreoPersonalCuentaAnterior))
                            {
                                <li>
                                    <strong>Correo Personal anterior: </strong>
                                    <div style="white-space: pre-wrap">@item.SolIdUsuarioNavigation!.UsuCorreoPersonalCuentaAnterior</div>
                                </li>
                            }

                            <li>
                                <strong>Correo Institucional: </strong>
                                @{
                                    var correo_institucional = !string.IsNullOrEmpty(item.SolIdUsuarioNavigation!.UsuCorreoInstitucionalCuenta) ? item.SolIdUsuarioNavigation!.UsuCorreoInstitucionalCuenta : "no asignado";
                                }
                                <div style="white-space: pre-wrap">@correo_institucional</div>
                            </li>

                            <li>
                                <strong>Número de Celular actual: </strong>
                                @item.SolIdUsuarioNavigation!.UsuNoCelularNuevo
                            </li>

                            @if (!string.IsNullOrEmpty(item.SolIdUsuarioNavigation?.UsuNoCelularAnterior))
                            {
                                <li>
                                    <strong>Número de Celular anterior: </strong>
                                    @item.SolIdUsuarioNavigation!.UsuNoCelularAnterior
                                </li>
                            }
                        </ul>
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Solicitud" Property="SolIdTipoSolicitudNavigation.TiposolDescripcion" Pickable="false"
                                  Filterable="true" FilterMode="FilterMode.CheckBoxList" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="300px">
                <HeaderTemplate>
                    <RadzenButton Text="SOLICITUD" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>SOLICITUD</b><br>Filtro y búsqueda por el tipo o motivo de Solicitud.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-start text-wrap">
                        <strong>@item.SolIdTipoSolicitudNavigation!.TiposolDescripcion</strong>
                        <p style="white-space: pre-wrap; text-align: justify;" class="my-3">@item.SolObservacionesSolicitud</p>
                        <div class="text-end">@item.SolFechaHoraCreacion.ToString("dddd',' dd/MMMM/yyyy HH:mm:ss 'hrs.'")</div>
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Adjuntos"
                                  Filterable="false" Frozen="false" Reorderable="true" Resizable="true" Sortable="false" TextAlign="TextAlign.Center" Width="250px">
                <HeaderTemplate>
                    <RadzenButton Text="ARCHIVOS ADJUNTOS" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>ARCHIVOS ADJUNTOS</b><br>Archivos en PDF requeridos para la revisión y<br>validación de los datos del usuario solicitante.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-start text-wrap">
                        <ul>
                            <li>
                                <strong>CURP</strong>
                                <br />
                                <a href="@WebUtils.GenerarURLArchivoUsuario(item, TipoDocumento.CURP)"
                                   download="@WebUtils.GenerarNombreArchivo(item, TipoDocumento.CURP)">
                                    Descargar
                                </a>
                                <br />
                                <button class="btn btn-primary form-control" @onclick="@(async ()=> await VerDocumento(item, TipoDocumento.CURP))">Ver</button>
                            </li>

                            @if (item.SolIdUsuarioNavigation!.UsuFileNameComprobanteInscripcion != "-")
                            {
                                <li>
                                    <strong>Comprobante de Inscripción</strong>
                                    <br />
                                    <a href="@WebUtils.GenerarURLArchivoUsuario(item, TipoDocumento.COM_INSCRIPCION)"
                                       download="@WebUtils.GenerarNombreArchivo(item, TipoDocumento.COM_INSCRIPCION)">
                                        Descargar
                                    </a>
                                    <br />
                                    <button class="btn btn-primary form-control"
                                            @onclick="@(async () => await VerDocumento(item, TipoDocumento.COM_INSCRIPCION))">
                                        Ver
                                    </button>
                                </li>
                            }

                            @if ((item.SolCapturaCuentaBloqueada ?? "-") != "-")
                            {
                                <li>
                                    <strong>Captura de Bloqueo</strong>
                                    <br />
                                    <a href="@WebUtils.GenerarURLArchivoRepositorio(item, TipoDocumento.CAP_BLOQUEO)"
                                       download="@WebUtils.GenerarNombreArchivo(item, TipoDocumento.CAP_BLOQUEO)">
                                        Descargar
                                    </a>
                                    <br />
                                    <button class="btn btn-primary form-control"
                                            @onclick="@(async () => await VerDocumento(item, TipoDocumento.CAP_BLOQUEO))">
                                        Ver
                                    </button>
                                </li>
                            }

                            @if ((item.SolCapturaEscaneoAntivirus ?? "-") != "-")
                            {
                                <li>
                                    <strong>Captura de Escaneo de Antivirus</strong>
                                    <br />
                                    <a href="@WebUtils.GenerarURLArchivoRepositorio(item, TipoDocumento.CAP_ANTIVIRUS)"
                                       download="@WebUtils.GenerarNombreArchivo(item, TipoDocumento.CAP_ANTIVIRUS)">
                                        Descargar
                                    </a>
                                    <br />
                                    <button class="btn btn-primary form-control"
                                            @onclick="@(async () => await VerDocumento(item, TipoDocumento.CAP_ANTIVIRUS))">
                                        Ver
                                    </button>
                                </li>
                            }

                            @if ((item.SolCapturaError ?? "-") != "-")
                            {
                                <li>
                                    <strong>Captura de Error</strong>
                                    <br />
                                    <a href="@WebUtils.GenerarURLArchivoRepositorio(item, TipoDocumento.CAP_ERROR)"
                                       download="@WebUtils.GenerarNombreArchivo(item, TipoDocumento.CAP_ERROR)">
                                        Descargar
                                    </a>
                                    <br />
                                    <button class="btn btn-primary form-control"
                                            @onclick="@(async () => await VerDocumento(item, TipoDocumento.CAP_ERROR))">
                                        Ver
                                    </button>
                                </li>
                            }
                        </ul>
                    </div>
                </Template>
            </RadzenDataGridColumn><!--ARCHIVOS-->

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Seleccionar"
                                  Filterable="false" Frozen="true" Reorderable="false" Resizable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                <Template Context="item">
                    <RadzenSwitch @bind-Value="@item.SolValidacionDatos" Change="StateHasChanged" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})"
                                  style="--rz-border-width: 2px;" class="rz-border rz-border-base-400 rz-background-color-base-400" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Cancelar" Context="item"
                                  Filterable="false" Frozen="true" Reorderable="false" Resizable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                <Template Context="item">
                    <RadzenButton title="Cancelar"
                                  Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Click="@(async ()=> await Actualizar(item, TipoEstadoSolicitud.CANCELADA, "Cancelar"))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Finalizar" Context="item"
                                  Filterable="false" Frozen="true" Reorderable="false" Resizable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                <Template Context="item">
                    <RadzenButton title="Finalizar"
                                  Icon="check"
                                  ButtonStyle="ButtonStyle.Success"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Click="@(async ()=> await Actualizar(item, TipoEstadoSolicitud.ATENDIDA, "Finalizar"))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No hay registros encontrados para mostrar.</p>
        </EmptyTemplate>
    </RadzenDataGrid>

    <div class="row my-2">
        <div class="col-3 offset-9">
            @if (puede_exportar && !trabajando)
            {
                <div class="shadow card">
                    <div class="card-header fw-bold">
                        Exportar
                    </div>

                    <div class="card-body">
                        <div class="my-2">
                            <InputCheckbox @bind-Value="exportar_zip"></InputCheckbox> Descargar como archivo Zip
                        </div>

                        <button class="btn btn-primary form-control" @onclick="Descargar">
                            <RadzenIcon Icon="get_app"></RadzenIcon>
                            Iniciar Exportación
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code
{
    private string Title = "Solicitudes en Proceso";
    private bool trabajando { get; set; } = true;
    private bool isLoading = false;
    Density Density = Density.Default;

    private List<RequestDTO_Solicitud> items = new List<RequestDTO_Solicitud>();
    private RadzenDataGrid<RequestDTO_Solicitud>? oSolicitudesRef = new();
    private IList<RequestDTO_Solicitud> selectedItems = new List<RequestDTO_Solicitud>();
    private readonly int[] estados = { (int)TipoEstadoSolicitud.EN_PROCESO };
    private readonly int[] alumno_o_egresado =
    {
        (int)TipoPersonal.ALUMNO,
        (int)TipoPersonal.EGRESADO,
        (int)TipoPersonal.MAESTRIA,
    };

    private IBrowserFile? fuImportar = null;

    private string debug = string.Empty;
    private bool exportar_zip = false;
    private bool descargar_ajuntos = false;

    private string links = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JSRuntime.InvokeVoidAsync("blazorInit");

        if (firstRender)
        {
            await CargarLista();
        }
    }

    private void MensajeCarga()
    {
        DialogService.OpenAsync<Carga>(
                String.Empty,
                new Dictionary<string, object>(),
                new DialogOptions() { ShowClose = false, Width = "64px" }
            );
    }

    private async Task CargarLista()
    {
        trabajando = true;
        StateHasChanged();

        Response<List<RequestDTO_Solicitud>>? request = await servicioSolicitud.GetAllDataByProgressAsync(estados);

        if (request is not null && request.Data is not null)
        {
            if (request.Success == 1)
            {
                items = request.Data;
                oSolicitudesRef?.Reset(true);
                await oSolicitudesRef!.FirstPage(true);
            }
            else
            {
                debug += $"{Environment.NewLine}<span class=\"text-danger fw-bold\">[ERROR]<span> {request.Message}";
            }
        }

        trabajando = false;
        StateHasChanged();
    }

    private void fuImportacion_OnChange(InputFileChangeEventArgs e)
    {
        fuImportar = e.File;
    }

    private async Task Importar()
    {
        if (fuImportar is null)
        {
            return;
        }

        trabajando = true;
        StateHasChanged();

        List<int> selected_ids = items.Where(i => i.SolValidacionDatos).Select(st => st.IdSolicitudTicket).ToList();

        using (MultipartFormDataContent content = new MultipartFormDataContent())
        {
            using (StreamContent fileContent = new StreamContent(fuImportar.OpenReadStream()))
            {
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(fuImportar.ContentType);

                content.Add(fileContent, name: "\"file\"", fuImportar.Name);

                Response<string>? oResponse = await servicioArchivos.PostFile("xlsx", "procesados", content);

                if (oResponse is not null)
                {
                    debug += Environment.NewLine + 
                    "[SERVIDOR] " + oResponse.Message + Environment.NewLine + 
                    Environment.NewLine + 
                    oResponse.Data;

                    if(oResponse.Success == 1)
                    {
                        await CargarLista();
                    }
                }
            }
        }

        fuImportar = null;
        trabajando = false;
        StateHasChanged();
    }

    private async Task VerPDF(string archivo, string titulo = "Ver")
    {
        await DialogModalService.OpenAsync<PDFViewer>
        (
            titulo,
            new Dictionary<string, object>()
            {
                {"file", archivo}
            },
            new DialogOptions()
            {
                Width = "calc( 100vw - 8em )",
                Height = "calc( 100vh - 8em )",
                CssClass = "dialog_simple p-0",
                CloseDialogOnEsc = true,
                CloseDialogOnOverlayClick = true,
                Resizable = true,
                Draggable = true
            }
        );
    }

    private async Task VerDocumento(RequestDTO_Solicitud solicitud, TipoDocumento documento)
    {
        string titulo = "Documento";
        string archivo = string.Empty;
        string nombre = string.Empty;

        bool documento_repositorio = true;
        RequestDTO_Usuario usuario = solicitud.SolIdUsuarioNavigation!;

        switch (documento)
        {
            case TipoDocumento.CURP:
                titulo = $@"{usuario.UsuNombre} {usuario.UsuPrimerApellido} {usuario.UsuSegundoApellido} - {usuario.UsuCurp}";

                documento_repositorio = false;
                nombre = usuario.UsuFileNameCurp!;
                break;

            case TipoDocumento.COM_INSCRIPCION:
                titulo = "COMPROBANTE DE INSCRIPCIÓN";
                documento_repositorio = false;
                nombre = usuario.UsuFileNameComprobanteInscripcion!;
                break;

            case TipoDocumento.CAP_BLOQUEO:
                titulo = "CAPTURA DE PANTALLA DE BLOQUEO";
                nombre = solicitud.SolCapturaCuentaBloqueada!;
                break;

            case TipoDocumento.CAP_ANTIVIRUS:
                titulo = "CAPTURA DE PANTALLA DE ANTIVIRUS";
                nombre = solicitud.SolCapturaEscaneoAntivirus!;
                break;

            case TipoDocumento.CAP_ERROR:
                titulo = "CAPTURA DE PANTALLA DE ERROR";
                nombre = solicitud.SolCapturaError!;
                break;
        }

        archivo = documento_repositorio ? ServerFS.ArchivoRepositorio(solicitud.IdSolicitudTicket, nombre) : ServerFS.ArchivoUsuario(solicitud.SolIdUsuario, nombre);

        await VerPDF(archivo, titulo);
    }

    private async Task Actualizar(RequestDTO_Solicitud item, TipoEstadoSolicitud estado, string mensaje_confirmar)
    {
        string? mensaje = await DialogModalService.OpenAsync<MensajeRespuesta>
        (
            $"{mensaje_confirmar} TICKET #{item.IdSolicitudTicket} de {item.SolIdUsuarioNavigation!.UsuNombre} {item.SolIdUsuarioNavigation!.UsuPrimerApellido} {item.SolIdUsuarioNavigation!.UsuSegundoApellido}",
            null,
            new DialogOptions()
            {
                ShowClose = false,
                Width = "75%",
                CssClass = "dialog_simple"
            }
        );

        if (!string.IsNullOrEmpty(mensaje))
        {
            RequestDTO_FinalizarSolicitud oSolicitud = new()
            {
                IdSolicitud = item.IdSolicitudTicket,
                Mensaje = mensaje,
                Estado = (int)estado
            };

            item.SolRespuestaDcyC = mensaje;

            HttpResponseMessage response = new(){ StatusCode = System.Net.HttpStatusCode.BadRequest };

            switch(estado)
            {
                case TipoEstadoSolicitud.ATENDIDA:
                    response = await servicioSolicitud.Finalizar(oSolicitud);
                    break;

                case TipoEstadoSolicitud.CANCELADA:
                    response = await servicioSolicitud.Cancelar(oSolicitud);
                    break;
            }

            // new KeyValuePair<int, string>(item.IdSolicitudTicket, mensaje));

            debug += Environment.NewLine + "[SERVIDOR]" + Environment.NewLine;
            debug += await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                debug += Environment.NewLine + $"ACTUALIZADO: SOLICITUD {item.IdSolicitudTicket} ({mensaje_confirmar}).";
                await CargarLista();
            }
            else
            {
                debug += Environment.NewLine + $"ERROR: SOLICITUD {item.IdSolicitudTicket} ({mensaje_confirmar}).";
            }
        }
    }//ACTUALIZAR

    private bool puede_exportar
    {
        get
        {
            return items.Any(i => i.SolValidacionDatos);
        }
    }

    private async void Descargar()
    {
        MensajeCarga();
        bool recargar_lista = false;
        /*
        trabajando = false;
        StateHasChanged();*/
        
        int[] tickets = items.Where(i => i.SolValidacionDatos).Select(st => st.IdSolicitudTicket).ToArray();

        TExport<int[]> selected_ids = new(tickets, (int)TipoEstadoSolicitud.EN_PROCESO);

        Response<List<WebUtils.Link>>? oResponse = await servicioArchivos.NewFileExportFromSelection<int[]>(exportar_zip ? "zip" : "xlsx", "pendientes", selected_ids);

        if (oResponse is not null && oResponse.Data is not null)
        {
            if (oResponse.Success == 1)
            {
                links = "<ul>";
                foreach (WebUtils.Link url in oResponse.Data)
                {
                    if (!url.Optional || descargar_ajuntos)
                    {
                        await JSRuntime.InvokeVoidAsync("Descargar", url);
                    }

                    links += $"<li><a href=\"{url.Url}\" download=\"{url.Url}\">{url.Name}</a></li>";
                }
                links += "</ul>";

                StateHasChanged();
                
            }
            else
            {
                debug += Environment.NewLine + oResponse.Message;
            }
        }

        StateHasChanged();
        DialogService.Close();

        if(recargar_lista)
        {
            await CargarLista();
        }
        
    }// DESCARGAR

    async Task OnPage(PagerEventArgs args)
    {
        isLoading = true;
        await Task.Yield();
        isLoading = false;
    }

    async Task ShowLoading()
    {
        isLoading = true;
        await Task.Yield();
        isLoading = false;
    }

    void OnRender(DataGridRenderEventArgs<RequestDTO_Solicitud> args)
    {
        if (args.FirstRender)
        {
            // args.Grid.Groups.Add(new GroupDescriptor() { Title = "Customer", Property = "Customer.CompanyName", SortOrder = SortOrder.Descending });
            StateHasChanged();
        }
    }

    void ShowTooltipWithHtml(ElementReference elementReference, TooltipOptions options = null!) => TooltipService.Open(elementReference, ds => null!, options);
}

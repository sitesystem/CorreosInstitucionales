@page "/SolicitudesAtendidas"

@attribute [Authorize(Policy = "[Rol] Administrador")]

<PageTitle>@Title</PageTitle>

<div class="p-4 rounded-1 bg-white shadow">
    <div class="row mb-4">
        <div class="col-6">
            <h1>@Title</h1>
            <hr />
        </div>
    </div>

    @if (!cargado || generando)
    {
        <div class="col text-center">
            <img src="img/mail.png" class="loading_img" />
            <br />
            <strong>Trabajando...</strong>
        </div>
    }

    <RadzenDataGrid @ref="oSolicitudesRef" Data="@items" @bind-Value="@selectedItems" TItem="RequestDTO_Solicitud" Density="@Density"
                    IsLoading="@isLoading" Page="@OnPage" Sort="@ShowLoading" Group="@ShowLoading" Filter="@ShowLoading"
                    AllowFiltering="true" AllowColumnResize="true" AllowColumnReorder="true" AllowAlternatingRows="true" AllowSorting="true"
                    AllowColumnPicking="true" ColumnsPickerAllowFiltering="true" AllowPickAllColumns="true"
                    AllowPaging="true" PageSize="10" PagerPosition="PagerPosition.TopAndBottom" PagerHorizontalAlign="HorizontalAlign.Center" PagerAlwaysVisible="true"
                    PageSizeOptions="@(new int[] { 10, 25, 50, 100, 500 })" PageSizeText="registros por página" ShowPagingSummary="true" PagingSummaryFormat="Mostrando página {0} de {1} <b>(Total {2} registros)</b>"
                    AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true" AllowVirtualization="true" GridLines="DataGridGridLines.Both"
                    FilterMode="FilterMode.Advanced" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                    FilterText="Filtrar" EqualsText="Igual a..." NotEqualsText="Distinto de..." ContainsText="Contiene..." StartsWithText="Comienza con..." EndsWithText="Termina con..." DoesNotContainText="No contiene..."
                    IsNullText="Es nulo" IsEmptyText="Es vacío" IsNotNullText="No es nulo" IsNotEmptyText="No es vacío" AndOperatorText="Y" OrOperatorText="O"
                    GreaterThanText="Mayor que" GreaterThanOrEqualsText="Mayor o igual que" LessThanText="Menor que" LessThanOrEqualsText="Menor o igual que"
                    ClearFilterText="Quitar Filtro" ApplyFilterText="Aplicar"
                    ColumnsShowingText="columnas visibles" AllColumnsText="Todas las columnas" ColumnsText="Mostrar columnas"
                    ColumnWidth="500px" SelectionMode="DataGridSelectionMode.Single"
                    ExpandMode="DataGridExpandMode.Single"
                    AllowGrouping="true" Render="@OnRender" HideGroupedColumn="true" ShowGroupExpandColumn="true"
                    GroupPanelText="Arrastra y suelta aquí un encabezado de una columna para agrupar sus datos."
                    Visible="@cargado">
        <HeaderTemplate>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Stretch" JustifyContent="JustifyContent.SpaceBetween" Gap="10px" class="">
                <button class="btn btn-secondary" @onclick="CargarLista">
                    @* <RadzenIcon Icon="refresh" IconColor="@Colors.White" IconStyle="IconStyle.Warning" Style="font-size:20px;" /> *@
                    Recargar Listado
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z" />
                        <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466" />
                    </svg>
                </button>
                <RadzenSelectBar @bind-Value="@Density" TextProperty="Text" ValueProperty="Value" Visible="false"
                                 Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small">
                </RadzenSelectBar>
            </RadzenStack>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px" Pickable="false">
                <Template Context="item">
                    <RadzenBadge Variant="Variant.Flat" Text="@($"{items.IndexOf(item) + 1}")" BadgeStyle="@(BadgeStyle.Dark)" Shade="@(Shade.Darker)" IsPill="true" class="" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="# Ticket" Property="IdSolicitudTicket" Pickable="false"
                                  Filterable="true" FilterMode="FilterMode.CheckBoxList" Frozen="true" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="150px">
                <Template Context="data">
                    <h4 class="text-wrap">@data.IdSolicitudTicket</h4>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Solicitante" Property="SolIdUsuarioNavigation.UsuCurp" Pickable="false"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="300px">
                <HeaderTemplate>
                    <RadzenButton Text="SOLICITANTE (Filtro y búsqueda por el CURP)" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>SOLICITANTE</b><br>Filtro y búsqueda por el CURP.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-start text-wrap">
                        <strong>
                            @item.SolIdUsuarioNavigation!.UsuPrimerApellido
                            @item.SolIdUsuarioNavigation!.UsuSegundoApellido
                            @item.SolIdUsuarioNavigation!.UsuNombre
                        </strong>
                        <br />
                        <small>
                            @item.SolIdUsuarioNavigation?.UsuIdTipoPersonalNavigation?.TipoperNombre
                            @(item.SolIdUsuarioNavigation?.UsuIdTipoPersonal == 2 ? $" en {item.SolIdUsuarioNavigation?.UsuAnioEgreso}" : "")
                        </small>
                        <br /><br />
                        <ul>
                            <li>
                                <strong>CURP: </strong>
                                @item.SolIdUsuarioNavigation?.UsuCurp
                            </li>

                            <li>
                                @if (alumno_o_egresado.Contains(item.SolIdUsuarioNavigation!.UsuIdTipoPersonal))
                                {
                                    <strong>Número de Boleta: </strong>
                                    @item.SolIdUsuarioNavigation!.UsuBoletaAlumno
                                }
                                else
                                {
                                    <strong>Número de Empleado: </strong>
                                    @item.SolIdUsuarioNavigation!.UsuNumeroEmpleado
                                }
                                @if (item.SolIdUsuarioNavigation!.UsuBoletaMaestria != "B000000")
                                {
                                    <strong>Número de Boleta de Maestría: </strong>
                                    @item.SolIdUsuarioNavigation!.UsuBoletaMaestria
                                }
                            </li>

                            <li>
                                <strong>Correo Personal actual: </strong>
                                <div style="white-space: pre-wrap">@item.SolIdUsuarioNavigation!.UsuCorreoPersonalCuentaNueva</div>
                            </li>

                            @if (!string.IsNullOrEmpty(item.SolIdUsuarioNavigation?.UsuCorreoPersonalCuentaAnterior))
                            {
                                <li>
                                    <strong>Correo Personal anterior: </strong>
                                    <div style="white-space: pre-wrap">@item.SolIdUsuarioNavigation!.UsuCorreoPersonalCuentaAnterior</div>
                                </li>
                            }

                            <li>
                                <strong>Correo Institucional: </strong>
                                @{
                                    var correo_institucional = (!string.IsNullOrEmpty(item.SolIdUsuarioNavigation!.UsuCorreoInstitucionalCuenta) ? item.SolIdUsuarioNavigation!.UsuCorreoInstitucionalCuenta : "no asignado");
                                }
                                <div style="white-space: pre-wrap">@correo_institucional</div>
                            </li>

                            <li>
                                <strong>Contraseña Correo Inst.: </strong>
                                @(!string.IsNullOrEmpty(item.SolIdUsuarioNavigation!.UsuCorreoInstitucionalContrasenia) ? item.SolIdUsuarioNavigation!.UsuCorreoInstitucionalContrasenia : "no asignado")
                            </li>

                            <li>
                                <strong>Número de Celular actual: </strong>
                                @item.SolIdUsuarioNavigation!.UsuNoCelularNuevo
                            </li>

                            @if (!string.IsNullOrEmpty(item.SolIdUsuarioNavigation?.UsuNoCelularAnterior))
                            {
                                <li>
                                    <strong>Número de Celular anterior: </strong>
                                    @item.SolIdUsuarioNavigation!.UsuNoCelularAnterior
                                </li>
                            }
                        </ul>
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Solicitud" Property="SolIdTipoSolicitudNavigation.TiposolDescripcion" Pickable="false"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="300px">
                <HeaderTemplate>
                    <RadzenButton Text="SOLICITUD (Filtro y búsqueda por el tipo o motivo de Solicitud)" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = "<b>SOLICITUD</b><br>Filtro y búsqueda por el tipo o motivo de Solicitud.",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-start text-wrap">
                        <strong>@item.SolIdTipoSolicitudNavigation!.TiposolDescripcion</strong>
                        <p style="white-space: pre-wrap; text-align: justify;" class="my-3">@item.SolObservacionesSolicitud</p>
                        <div class="text-end">@item.SolFechaHoraCreacion.ToString("dddd',' dd/MMMM/yyyy HH:mm:ss 'hrs.'")</div>
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Estado" Property="SolIdEstadoSolicitudNavigation.EdosolNombreEstado" Pickable="false"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="300px">
                <HeaderTemplate>
                    @{
                        string content = $@"- Solicitudes Finalizadas: <b>{items.Where(st => st.SolIdEstadoSolicitud == 4).Count()}</b><br />
                                            - Solicitudes con Encuestas Contestadas: <b>{items.Where(st => st.SolIdEstadoSolicitud == 5).Count()}</b><br />
                                            - Solicitudes Canceladas: <b>{items.Where(st => st.SolIdEstadoSolicitud == 6).Count()}</b>";
                    }
                    <RadzenButton Text="ESTADO" ButtonStyle="ButtonStyle.Base" Shade="Shade.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                  MouseEnter="@(args => ShowTooltipWithHtml(args, new TooltipOptions(){
                                                Style = "background: var(--rz-warning-light); color: var(--rz-text-color)",
                                                Text = $@"<b>{items.Count()}</b> Solicitudes <strong>Totales</strong><br/>{content}",
                                                Position = TooltipPosition.Top, Delay = 0, Duration = 10000 }))" />
                </HeaderTemplate>
                <Template Context="item">
                    <div class="text-start text-wrap">
                        @{
                            BadgeStyle style = new();
                            Shade shade = new();
                            string icon = "";

                            if (item.SolIdEstadoSolicitud == 4)
                            {
                                style = BadgeStyle.Success;
                                shade = Shade.Light;
                                icon = "check";
                            }
                            else if (item.SolIdEstadoSolicitud == 5)
                            {
                                style = BadgeStyle.Warning;
                                shade = Shade.Light;
                                icon = "star_rate";
                            }
                            else if (item.SolIdEstadoSolicitud == 6)
                            {
                                style = BadgeStyle.Danger;
                                shade = Shade.Light;
                                icon = "close";
                            }
                        }
                        <div class="text-center">
                            <RadzenBadge Variant="Variant.Flat" Shade="@(shade)" BadgeStyle="@(style)" Text="" IsPill="true" class="rz-display-block rz-ms-2">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.NoWrap" Gap="0.25rem" Style="padding: 0 0.25rem 0 0; text-transform: none;">
                                    <RadzenIcon Icon="@(icon)" />
                                    @item.SolIdEstadoSolicitudNavigation!.EdosolNombreEstado
                                </RadzenStack>
                            </RadzenBadge>
                        </div>
                        @* <strong>@item.SolIdEstadoSolicitudNavigation!.EdosolNombreEstado</strong> *@
                        <p style="white-space: pre-wrap; text-align: justify;" class="mt-3">@item.SolRespuestaDcyC</p>
                        <div class="text-end">@item.SolFechaHoraActualizacion?.ToString("dddd',' dd/MMMM/yyyy HH:mm:ss 'hrs.'")</div>
                    </div>
                </Template>
                <FooterTemplate>
                    <div class="text-start">
                        <small>- Solicitudes Finalizadas: <b>@items.Where(st => st.SolIdEstadoSolicitud == 4).Count()</b></small><br />
                        <small>- Solicitudes con Encuestas Contestadas: <b>@items.Where(st => st.SolIdEstadoSolicitud == 5).Count()</b></small><br />
                        <small>- Solicitudes Canceladas: <b>@items.Where(st => st.SolIdEstadoSolicitud == 6).Count()</b></small><br />
                        <small>de <b>@items.Count()</b> Solicitudes <strong>Atendidas.</strong></small>
                    </div>
                </FooterTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Encuesta de Calidad" Property="@(nameof(RequestDTO_Solicitud.SolEncuestaCalidadComentarios))"
                                  Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="250px">
                <Template Context="item">
                    <div class="text-center text-wrap">
                        @if (item.SolEncuestaCalidadCalificacion is null)
                        {
                            <text>(Sin contestar)</text>
                        }
                        else
                        {
                            <img class="d-inline mb-2" src="img/calidad/@(item.SolEncuestaCalidadCalificacion).png" />
                            <p style="white-space: pre-wrap;" class="mt-2">@item.SolEncuestaCalidadComentarios</p>
                            <div class="text-end">@item.SolFechaHoraEncuesta?.ToString("dddd',' dd/MMMM/yyyy HH:mm:ss 'hrs.'")</div>
                        }
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Seleccionar"
                                  Filterable="false" Frozen="true" Reorderable="false" Resizable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                <Template Context="item">
                    <RadzenSwitch @bind-Value="@item.SolValidacionDatos" Change="StateHasChanged" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})"
                                  style="--rz-border-width: 2px;" class="rz-border rz-border-base-400 rz-background-color-base-400" />
                </Template>
            </RadzenDataGridColumn>

        </Columns>
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No hay registros encontrados para mostrar.</p>
        </EmptyTemplate>
    </RadzenDataGrid>
</div>

<pre>@debug</pre>

@code
{
    private string Title = "Solicitudes Atendidas";
    private bool cargado { get; set; } = false;
    private bool isLoading = false;
    private bool generando = false;

    Density Density = Density.Default;

    private List<RequestDTO_Solicitud> items = new List<RequestDTO_Solicitud>();
    private RadzenDataGrid<RequestDTO_Solicitud>? oSolicitudesRef = new();
    private IList<RequestDTO_Solicitud> selectedItems = new List<RequestDTO_Solicitud>();

    private readonly int[] estados = 
    {
        (int)TipoEstadoSolicitud.ATENDIDA, 
        (int)TipoEstadoSolicitud.ENCUESTA_CALIDAD, 
        (int)TipoEstadoSolicitud.CANCELADA 
    };
    private readonly int[] alumno_o_egresado =
    {
        (int)TipoPersonal.ALUMNO,
        (int)TipoPersonal.EGRESADO,
        (int)TipoPersonal.MAESTRIA,
    };

    private string debug = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JSRuntime.InvokeVoidAsync("blazorInit");

        if (firstRender)
        {
            await CargarLista();
        }
    }

    private async Task CargarLista()
    {
        cargado = false;
        StateHasChanged();

        Response<List<RequestDTO_Solicitud>>? request = await servicioSolicitud.GetAllDataByProgressAsync(estados);

        if (request is not null && request.Data is not null)
        {
            if (request.Success == 1)
            {
                items = request.Data;
            }
            else
            {
                debug += $"{Environment.NewLine}<span class=\"text-danger fw-bold\">[ERROR]<span> {request.Message}";
            }
        }

        cargado = true;
        StateHasChanged();
    }

    async Task OnPage(PagerEventArgs args)
    {
        isLoading = true;
        await Task.Yield();
        isLoading = false;
    }

    async Task ShowLoading()
    {
        isLoading = true;
        await Task.Yield();
        isLoading = false;
    }

    void OnRender(DataGridRenderEventArgs<RequestDTO_Solicitud> args)
    {
        if (args.FirstRender)
        {
            // args.Grid.Groups.Add(new GroupDescriptor() { Title = "Customer", Property = "Customer.CompanyName", SortOrder = SortOrder.Descending });
            StateHasChanged();
        }
    }

    void ShowTooltipWithHtml(ElementReference elementReference, TooltipOptions options = null!) => TooltipService.Open(elementReference, ds => null!, options);
}

@using CorreosInstitucionales.Shared
@using DataItem = KeyValuePair<string, List<CorreosInstitucionales.Shared.IntDataItem>>
@inject REstadisticasService estadisticas

<PageTitle>@Title</PageTitle>

<div class="row py-3 mb-4 bg-white rounded-1 shadow">
    <div class="col-6 pt-1">
        <h1>@Title</h1>
    </div>
    @if (cargado)
    {
        <div class="col-2">
            <strong>Inicio</strong>
            <InputDate @bind-Value="inicio" class="form-control" />
        </div>

        <div class="col-2">
            <strong>Fin</strong>
            <InputDate @bind-Value="fin" class="form-control" />
        </div>

        <div class="col-2">
            <br />
            <button class="form-control btn btn-primary" @onclick="CargarEstadisticas">Filtrar</button>
        </div>
    }
</div>

<div class="row">
    @if (cargado)
    {
        <div class="col-4">
            <Estadistica Datos="estado_solicitudes" Titulo="Solicitudes por estatus" Tipo="TipoEstadistica.DONA" />
        </div>

        <div class="col-8">
            <Estadistica Datos="solicitudes_diarias" Titulo="Número de tickets por día" Tipo="TipoEstadistica.AREA" />
        </div>

        <div class="col-4">
            <Estadistica Datos="encuesta_calidad" Titulo="Encuestas de satisfacción" Tipo="TipoEstadistica.DONA" />
        </div>

        <div class="col-8">
            <Estadistica Datos="area_diarios" Titulo="Estatus de Solicitudes" Tipo="TipoEstadistica.BARRAS" />
        </div>
    }
    else
    {
        <div class="col bg-white shadow py-4">
            <Carga/>
        </div>
    }
</div>

<pre>@debug</pre>

@code
{
    private string Title = "Estadísticas";
    // Gráfica de area
    bool showDataLabels = true;
    bool cargado = false;

    DateTime inicio = DateTime.Now.AddMonths(-1);
    DateTime fin    = DateTime.Now;

    List<DataItem> estado_solicitudes   = new();
    List<DataItem> solicitudes_diarias  = new();
    List<DataItem> encuesta_calidad     = new();
    List<DataItem> area_diarios         = new();

    private string debug = string.Empty;

    public async Task CargarEstadisticas()
    {
        if (fin < inicio)
        {
            inicio = fin.AddMonths(-1);
        }

        cargado = false;
        StateHasChanged();

        Response<List<IntDataItem>>? response = await estadisticas.GetStatByName("progreso", inicio, fin);

        if (response is not null && response.Data is not null)
        {
            if(response.Success == 1)
            {
                estado_solicitudes.Clear();
                estado_solicitudes.Add(new DataItem("Estado", response.Data));
            }
            else
            {
                debug += $"{Environment.NewLine}<span class=\"text-danger fw-bold\">[ERROR]<span> {response.Message}";
            }
        }

        response = await estadisticas.GetStatByName("diarias", inicio, fin);

        if (response is not null && response.Data is not null)
        {
            if (response.Success == 1)
            {
                solicitudes_diarias.Clear();
                solicitudes_diarias.Add(new DataItem("Solicitudes", response.Data));
            }
            else
            {
                debug += $"{Environment.NewLine}<span class=\"text-danger fw-bold\">[ERROR]<span> {response.Message}";
            }
        }

        response = await estadisticas.GetStatByName("calidad", inicio, fin);

        if (response is not null && response.Data is not null)
        {
            if (response.Success == 1)
            {
                encuesta_calidad.Clear();
                encuesta_calidad.Add(new DataItem("Opinión", response.Data));
            }
            else
            {
                debug += $"{Environment.NewLine}<span class=\"text-danger fw-bold\">[ERROR]<span> {response.Message}";
            }
        }

        Response<Dictionary<string, List<IntDataItem>>>? volumen_req = await estadisticas.GetDictionaryStatsByName("volumen", inicio, fin);

        if (volumen_req is not null && volumen_req.Data is not null)
        {
            area_diarios = volumen_req.Data.ToList<DataItem>();
        }

        cargado = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarEstadisticas();
        }
    }
}

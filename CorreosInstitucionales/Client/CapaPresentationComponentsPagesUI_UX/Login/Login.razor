@page "/"
@inject RAnuncioService servicioAnuncio;

@attribute [AllowAnonymous]

@using System.Text.Encodings.Web

<PageTitle>SACI | Inicio de Sesión</PageTitle>

@layout LoginLayout

<PWAUpdater Text="Nueva versión de SACI" ButtonCaption="Actualizar ahora" Align="PWAUpdater.Aligns.Top" />

<AuthorizeView>
    <Authorized>
        @{
            if (context.User.Identity?.IsAuthenticated == true)
                navigationManager.NavigateTo("/NuevaContraseña");
        }
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

<RadzenComponents />

<style type="text/css"></style>

<!-- Encabezado de Página (Header Fixed-Top) -->
<header>
    <!-- ... Contenido para pantallas pequeñas móviles -->
    <div class="d-block d-sm-block d-md-none d-lg-none d-xl-none d-xxl-none">
        <RadzenHeader class="rz-border-radius-0 rz-py-0 rz-background-color-base-100" Style="border-bottom: 8px solid #076633;">
            <RadzenImage Path="./pleca_login_movil.png" Style="" AlternateText="SACI - Sistema de Atención para Correos Institucionales" class="img-fluid rz-my-0" />
        </RadzenHeader>
    </div>

    <!-- ... Contenido para pantallas grandes ... -->
    <div class="d-none d-sm-none d-md-block d-lg-block d-xl-block d-xxl-block">
        <RadzenHeader class="rz-border-radius-0 rz-py-0 rz-background-color-base-200" Style="border-bottom: 8px solid #076633; position:fixed;">
            <RadzenImage Path="./header_saci_1.png" Style="" AlternateText="SACI - Sistema de Atención para Correos Institucionales" class="img-fluid rz-my-0" />
        </RadzenHeader>
    </div>
</header>
<hr class="d-block d-sm-block d-md-none d-lg-none d-xl-none d-xxl-none rz-my-10" />
<!-- Contenido Principal -->
<div class="container">
    <div class="row align-items-center min-vh-100 gap-0" >

        <!-- Formulario de login -->
        <div class="col-md-6 order-1">
            <div class="card col-md-8 offset-md-2 mb-2">

                <!-- ******************************************************************* ENCABEZADO ******************************************************************* -->
                <div class="card-header pt-1 pb-0">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.NoWrap" Gap="10px" class="w-100">
                        @* <RadzenImage Path="./logo_saci.png" Style="height:30px;" AlternateText="logo saci" class="img-fluid rz-my-0" /> *@
                        <RadzenImage Path="./logo_upiicsa.png" Style="height:30px;" AlternateText="logo upiicsa" class="img-fluid rz-my-0" />
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.Wrap" Gap="0px" class="w-100 rz-my-0">
                            <RadzenText Text="@escuela.EscNombreCorto" TextStyle="TextStyle.Subtitle1" TextAlign="TextAlign.Center" style="font-variant: small-caps;" />
                            <RadzenText Text="@escuela.EscNombreLargo" TextStyle="TextStyle.Overline" TextAlign="TextAlign.Center" style="font-variant: small-caps;" />
                        </RadzenStack>
                    </RadzenStack>
                </div>

                <!-- ******************************************************************* LOGIN FORM ******************************************************************* -->
                <div class="card-body">
                    <RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client" Change="@(args => errorMsgVisible = false)">
                        <Tabs>
                            <RadzenTabsItem Text="Iniciar Sesión" Icon="person" IconColor="@Colors.Base900">
                                <EditForm Model="@oLoginCredentials" OnValidSubmit="@IniciarSesion" OnInvalidSubmit="@OnInvalidSubmit">

                                    <DataAnnotationsValidator />

                                    <RadzenFormField Text="Correo Electrónico Personal" Placeholder="Email" AllowClear="true" Variant="Variant.Outlined" class="w-100 mt-3" MaxLength="100" Disabled="false" AllowFloatingLabel="true">
                                        <Start><RadzenIcon Icon="email" /></Start>
                                        <ChildContent>
                                            <RadzenTextBox Name="email_usuario" @bind-Value="@oLoginCredentials.UsuCorreoPersonal" ReadOnly="false" AutoCompleteType="AutoCompleteType.On"
                                                           Attributes="@(new Dictionary<string, object> { { "maxlength", "100" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )" />
                                        </ChildContent>
                                        <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                                    </RadzenFormField>
                                    <ValidationMessage For="@(() => oLoginCredentials.UsuCorreoPersonal)" />

                                    <RadzenFormField Text="Contraseña" Placeholder="Password" AllowClear="true" Variant="Variant.Outlined" class="w-100 mt-5" MaxLength="50" Disabled="false" AllowFloatingLabel="true">
                                        <Start><RadzenIcon Icon="vpn_key" /></Start>
                                        <ChildContent>
                                            <RadzenTextBox Name="visiblePassword" @bind-Value="@oLoginCredentials.UsuContrasenia" AutoCompleteType="AutoCompleteType.NewPassword" Visible="@(!password)" />
                                            <RadzenPassword Name="noVisiblePassword" @bind-Value="@oLoginCredentials.UsuContrasenia" AutoCompleteType="AutoCompleteType.NewPassword" Visible="@password" />
                                        </ChildContent>
                                        <End>
                                            <RadzenButton Icon="@(password ? "visibility" : "visibility_off")"
                                                          Click="@(() => password = !password)"
                                                          Variant="Variant.Text"
                                                          Size="ButtonSize.Small"
                                                          ButtonStyle="ButtonStyle.Secondary"
                                                          Shade="Shade.Dark" />
                                        </End>
                                        <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                                    </RadzenFormField>
                                    <ValidationMessage For="@(() => oLoginCredentials.UsuContrasenia)" />

                                    <RadzenButton Text="Iniciar Sesión"
                                                  BusyText="Iniciando Sesión ..."
                                                  ButtonStyle="ButtonStyle.Secondary"
                                                  ButtonType="ButtonType.Submit"
                                                  IsBusy="@busy"
                                                  Icon="login"
                                                  class="w-100 mt-5 mb-3 rz-ripple"
                                                  Shade="Shade.Darker" />
                                </EditForm>
                            </RadzenTabsItem>
                            <RadzenTabsItem Text="Recuperar Contraseña" Icon="lock_reset" IconColor="@Colors.Base900">
                                <EditForm Model="@oRecuperarContraseñaCorreo" OnValidSubmit="@RecuperarContraseña" OnInvalidSubmit="@OnInvalidSubmit">

                                    <DataAnnotationsValidator />

                                    <RadzenFormField Text="Correo Electrónico Personal" Placeholder="Email" AllowClear="true" Variant="Variant.Outlined" class="w-100 mt-3" MaxLength="100" MinLength="0" Disabled="false">
                                        <Start><RadzenIcon Icon="email" /></Start>
                                        <ChildContent>
                                            <RadzenTextBox Name="email_reset" @bind-Value="@oRecuperarContraseñaCorreo.CorreoElectronicoPersonal" AutoCompleteType="AutoCompleteType.On" />
                                        </ChildContent>
                                        <Helper><RadzenText TextStyle="Radzen.Blazor.TextStyle.Caption"/></Helper>
                                    </RadzenFormField>

                                    <RadzenFormField Text="CURP" Placeholder="" AllowClear="true" Variant="Variant.Outlined" class="w-100 mt-4">
                                        <Start><RadzenIcon Icon="document_scanner" /></Start>
                                        <ChildContent>
                                            <RadzenTextBox Name="curp_reset" @bind-Value="@oRecuperarContraseñaCorreo.Curp" MinLength="0" MaxLength="18" AutoCompleteType="AutoCompleteType.On"
                                                           @oninput="@((e) => oRecuperarContraseñaCorreo.Curp = e.Value.ToString().ToUpper())"
                                                           onkeypress="return /^[A-Za-z0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                                        </ChildContent>
                                        <Helper><RadzenText TextStyle="Radzen.Blazor.TextStyle.Caption" /></Helper>
                                    </RadzenFormField>

                                    <div class="row">
                                        <div class="col-md-12 mt-4">
                                            <ReCAPTCHA @ref="oReCAPTCHAComponent" SiteKey="6Ld6058pAAAAACiEYq0Khine3FWbHZpfyEraTlOX" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                                        </div>
                                        <div class="col-md-12 d-grid gap-2 text-center">
                                            <button type="submit" class="btn btn-success mt-4 mb-3" disabled="@DisablePostButton">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-send-plus-fill" viewBox="0 0 16 16">
                                                    <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 1.59 2.498C8 14 8 13 8 12.5a4.5 4.5 0 0 1 5.026-4.47L15.964.686Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z" />
                                                    <path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0m-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 0 0 1 0v-1h1a.5.5 0 0 0 0-1h-1v-1a.5.5 0 0 0-.5-.5" />
                                                </svg>&nbsp;
                                                <span role="status">@contentRecuperarContraseñaBtn</span>
                                                <span class="spinner-border spinner-border-sm" aria-hidden="true" hidden="@isSpinningHidden"></span>
                                            </button>
                                        </div>
                                    </div>
                                </EditForm>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>

                    <RadzenAlert Variant="Variant.Filled"
                                 AlertStyle="AlertStyle.Danger"
                                 Size="AlertSize.Small"
                                 Shade="Shade.Dark"
                                 ShowIcon="true"
                                 AllowClose="false"
                                 @bind-Visible="@errorMsgVisible"
                                 Title="Error"
                                 class=""
                                 Text="@contentErrorMsg">
                    </RadzenAlert>
                </div>
            </div>

            <div class="card col-md-8 offset-md-2 pt-3 pb-3 mb-2">
                <div class="container">
                    <div class="row text-center">
                        <div class="col-md-12">
                            ¿No tienes una cuenta?&nbsp;
                            <button class="btn btn-success btn-sm" @onclick='(() => navigationManager.NavigateTo("/RegistroUsuario"))'>
                                Regístrate 
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-up-right" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z" />
                                    <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6 order-2">
        @if(carrusel_cargado)
        {
            <Carrusel anuncios="@anuncios"/>
        }
        else
        {
            <div class="row">
                <div class="col text-center bg-white py-3">
                    
                    <img src="img/mail.png" class="loading_img" />
                    <br />
                    Cargando<br />
                    Anuncios
                    
                </div>
            </div>
        }
        </div>
    </div>
</div>
<hr class="d-block d-sm-block d-md-none d-lg-none d-xl-none d-xxl-none rz-my-10" />
<!-- Pie de Página (Footer Fixed-Bottom) -->
<nav class="navbar bg-body-tertiary bg-dark fixed-bottom" data-bs-theme="dark">
    <div class="container">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.Wrap" Gap="0px" class="w-100">
            <a class="navbar-brand" style="text-decoration:none; font-size:calc(8px + 0.390625vw); color:white;">
                <RadzenImage Path="./logo_upiicsa.png" Style="height:20px;" AlternateText="logo upiicsa" class="img-fluid rz-my-0" />&nbsp;
                UPIICSA (UDI - Desarrollo de Sistemas de Información)&nbsp;
                <RadzenImage Path="./logo_udi.png" Style="height:20px;" AlternateText="logo udi" class="img-fluid rz-my-0" />
            </a>
            <a class="navbar-brand" style="text-decoration:none; font-size:calc(8px + 0.390625vw); color:white;">
                &copy; 2024 SACI vα 1.0 &ensp;| &nbsp;
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pc-display" viewBox="0 0 16 16">
                    <path d="M8 1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1zm1 13.5a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0m2 0a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0M9.5 1a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1zM9 3.5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 0-1h-5a.5.5 0 0 0-.5.5M1.5 2A1.5 1.5 0 0 0 0 3.5v7A1.5 1.5 0 0 0 1.5 12H6v2h-.5a.5.5 0 0 0 0 1H7v-4H1.5a.5.5 0 0 1-.5-.5v-7a.5.5 0 0 1 .5-.5H7V2z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-laptop" viewBox="0 0 16 16">
                    <path d="M13.5 3a.5.5 0 0 1 .5.5V11H2V3.5a.5.5 0 0 1 .5-.5zm-11-1A1.5 1.5 0 0 0 1 3.5V12h14V3.5A1.5 1.5 0 0 0 13.5 2zM0 12.5h16a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-tablet" viewBox="0 0 16 16">
                    <path d="M12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                    <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-phone" viewBox="0 0 16 16">
                    <path d="M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                    <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
                </svg>
            </a>
        </RadzenStack>
    </div>
</nav>

<ButtonScrollToTop />

@code
{
    private RequestDTO_LoginAuth oLoginCredentials = new();
    private bool busy;
    private string contentLoginBtn = "Iniciar Sesión";
    private bool errorMsgVisible = false;
    private string contentErrorMsg = string.Empty;
    private bool password = true;

    RequestViewModel_Escuela escuela = new();

    private readonly JsonSerializerOptions _options = new() { PropertyNameCaseInsensitive = true, Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping, WriteIndented = true };

    private List<RequestViewModel_Anuncio> anuncios = new();
    private int n_anuncios = 0;
    private bool carrusel_cargado = false;
    private string debug_anuncios = string.Empty;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Response<RequestViewModel_Escuela>? oEscuela = await servicioEscuela.GetDataByIdAsync(1);

            if(oEscuela is not null && oEscuela.Success == 1 && oEscuela.Data is not null)
            {
                escuela = oEscuela.Data;
            }

            StateHasChanged();

            Response<List<RequestViewModel_Anuncio>>? oAnuncios = await servicioAnuncio.GetAllDataByStatusAsync(true);

            if(oAnuncios is not null && oAnuncios.Success == 1 && oAnuncios.Data is not null)
            {
                anuncios = oAnuncios.Data;
                n_anuncios = anuncios.Count;
                debug_anuncios = $"{n_anuncios} ANUNCIOS CARGADOS";
            }

            carrusel_cargado = true;
            StateHasChanged();

            await JSRuntime.InvokeVoidAsync("initCarousel");
        }
    }

    ///////////////////////////////////////////////  INICIAR SESIÓN  ////////////////////////////////////////////////////////////////////////
    private async Task IniciarSesion()
    {
        try
        {
            busy = true;
            HttpResponseMessage loginResponse = await httpClient.PostAsJsonAsync<RequestDTO_LoginAuth>("/api/LoginAuth/login", oLoginCredentials, options: _options);

            if (loginResponse.IsSuccessStatusCode)
            {
                errorMsgVisible = false;

                await loginService.Login(loginResponse.Content.ReadAsStringAsync().Result);

                navigationManager.NavigateTo("/NuevaContraseña");
            }
            else
            {
                errorMsgVisible = true;
                contentErrorMsg = "El Correo y/o Contraseña NO son correctos o NO están registrados.";
            }
        }
        catch(Exception ex)
        {
            contentErrorMsg = ex.Message;
        }
        finally
        {
            busy = false;
        }
    }

    private void OnInvalidSubmit()
    {
        errorMsgVisible = true;
        contentErrorMsg = "Correo y/o Contraseña no válidos.";
    }

    ///////////////////////////////////////////////  RECUPERAR CONTRASEÑA  ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////  VALIDAR ReCAPTCHA  ////////////////////////////////////////////////////////////////////////
    private ReCAPTCHA oReCAPTCHAComponent;
    // private bool ServerVerificatiing = false;
    private bool ValidReCAPTCHA = false;
    private bool DisablePostButton => !ValidReCAPTCHA || string.IsNullOrEmpty(oRecuperarContraseñaCorreo.CorreoElectronicoPersonal) || string.IsNullOrEmpty(oRecuperarContraseñaCorreo.Curp) || !isSpinningHidden;
    private void OnSuccess() => ValidReCAPTCHA = true;
    private void OnExpired() => ValidReCAPTCHA = false;

    ///////////////////////////////////////////////  INICIALIZAR OBJETOS Y VARIABLES  ///////////////////////////////////////////////
    public RecuperarContraseñaCorreo oRecuperarContraseñaCorreo = new();
    public Response<RequestDTO_Usuario>? oRespuesta = new();
    public string contentRecuperarContraseñaBtn = "Recuperar Contraseña";
    public bool isSpinningHidden = true;
    
    public Response<RequestViewModel_Link>? oLinkCURP = new();
    private string srcCURP = string.Empty;

    public class RecuperarContraseñaCorreo
    {
        [Required(AllowEmptyStrings = false, ErrorMessage = "Campo requerido.")]
        public string CorreoElectronicoPersonal { get; set; } = null!;
        [Required(AllowEmptyStrings = false, ErrorMessage = "Campo requerido.")]
        public string Curp { get; set; } = null!;
    }

    private RequestDTO_SendWhatsApp oSendWhatsApp = new();

    public async Task RecuperarContraseña()
    {
        if (ValidReCAPTCHA)
        {
            // var response = await reCAPTCHAComponent.GetResponseAsync();
            try
            {
                contentRecuperarContraseñaBtn = "Recuperando Contraseña...";
                isSpinningHidden = false;

                var respuesta = await servicioUsuario.ResetPassword(oRecuperarContraseñaCorreo.CorreoElectronicoPersonal, oRecuperarContraseñaCorreo.Curp);
                oRespuesta = respuesta.Content.ReadFromJsonAsync<Response<RequestDTO_Usuario>>().Result;

                errorMsgVisible = false;

                if (respuesta.IsSuccessStatusCode && oRespuesta!.Success == 1)
                {
                    //  NOTIFICATION TOAST RECUPERACIÓN DE CONTRASEÑA TEMPORAL EXITOSA  //
                    NotificationService.Notify(
                        new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 3000,
                            Summary = "¡Recuperación de Contraseña Exitoso!",
                            Detail = "Se le notificará por las vías de comunicación con su Contraseña Temporal Generada."
                            // SummaryContent = ns => @<RadzenText TextStyle="TextStyle.H6">Custom summary: <br /> @DateTime.Now</RadzenText>,
                            // DetailContent = ns => @<RadzenButton Text="Clear" Click="@(args => ns.Messages.Clear())" />
                        });

                    //  DIALOG MESSAGE RECUPERACIÓN DE CONTRASEÑA TEMPORAL EXITOSA  //
                    DialogModalService.Open($@"<span style='font-variant: small-caps; font-size:18px;'>Mensaje<span>", ds =>
                        @<div>
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Gap="5px" Class="">
                                <span class="circle-border">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-check-lg" viewBox="0 0 16 16" style="color: green; font-weight: bold;">
                                        <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z" />
                                    </svg>
                                </span>
                                <RadzenText TextStyle="TextStyle.Body1" class="text-success"><b>¡Recuperación de Contraseña Exitosa!</b></RadzenText>
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.NoWrap" Gap="5px" Class="">
                                <RadzenStack Gap="0px">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Nombre Completo:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@($@"{oRespuesta.Data?.UsuNombres} {oRespuesta.Data?.UsuPrimerApellido} {oRespuesta.Data?.UsuSegundoApellido}")</b></RadzenText>
                                </RadzenStack>
                                <RadzenAlert Title="Atención:" Text="Se le notificará por las vías de comunicación con la nueva contraseña temporal." AlertStyle="AlertStyle.Info" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker" ShowIcon="true" AllowClose="false" class="my-2" />
                                <RadzenButton Text="Cerrar"
                                              BusyText=""
                                              ButtonStyle="ButtonStyle.Warning"
                                              ButtonType="ButtonType.Button"
                                              IsBusy="false"
                                              Icon="cancel"
                                              Class="rz-ripple rz-my-0 w-100 text-white"
                                              Shade="Shade.Darker"
                                              Click="@(() => navigationManager.NavigateTo("/"))" />
                            </RadzenStack>
                        </div>,
                        new DialogOptions()
                        {
                            CloseDialogOnOverlayClick = false,
                            CloseDialogOnEsc = false,
                            AutoFocusFirstElement = true,
                            Width = "Auto",
                            Height = "Auto",
                            Resizable = true,
                            Draggable = true,
                            ShowTitle = true,
                            ShowClose = true,
                            CssClass = "custom-dialog-class",
                            WrapperCssClass = "custom-dialog-wrapper-class"
                        });

                    @*//  ENVÍO DE WHATSAPP PARA AVISO DE RECUPERACIÓN DE CONTRASEÑA TEMPORAL EXITOSA  //*@
                    oSendWhatsApp.Number = oRespuesta!.Data!.UsuNoCelularActual!.Replace(" ", string.Empty);
                    oSendWhatsApp.Message = "*SACI | Sistema de Atención para Correos Institucionales*\n" +
                                            "ℹ *POR FAVOR NO RESPONDER A ESTE MENSAJE*\n\n" +
                                            "Estimad@:\n*" + oRespuesta.Data.UsuNombres.Trim() + " " + oRespuesta.Data.UsuPrimerApellido.Trim() + " " + oRespuesta.Data.UsuSegundoApellido?.Trim() + ".*\n\n" +
                                            "Se le informa que se recuperó con éxito sus _Credenciales de Acceso_ en la *PLATAFORMA SACI*:\n\n" +
                                            "  ✉ Usuario:\n               *" + oRespuesta.Data.UsuCorreoPersonalCuentaActual + "*\n" +
                                            "  🔑 Contraseña:\n               *" + oRespuesta.Message + "*\n\n" +
                                            "La contraseña que se le generó es de forma temporal, por lo que al momento de accesar a la Plataforma SACI se le solicitará que cambie su contraseña.\n\n" +
                                            "> Que tenga un excelente día.\n" +
                                            "> *NUESTRO MAYOR COMPROMISO ES BRINDARLE CON EFICIENCIA Y CALIDAD EL SERVICIO.*";

                    await servicioSendWhatsApp.SendWhatsAppAsync(oSendWhatsApp);

                    @*//  ENVÍO DE CORREO ELECTRÓNICO PARA AVISO DE RECUPERACIÓN DE CONTRASEÑA TEMPORAL EXITOSA  //*@

                    string msgEmail = $@"
                        <header>
		                    <div align='center'>
			                    <p style='font-weight:bold; text-align:center; color:black;'>SACI | Sistema de Atención para Correos Institucionales</p>
		                    </div>
	                    </header>

                        <p style='text-align:justify; color:black;'>ℹ️ <b>POR FAVOR NO RESPONDER A ESTE CORREO.</b><br><br>
                            Estimad@:<br><b>{oRespuesta.Data.UsuNombres} {oRespuesta.Data.UsuPrimerApellido} {oRespuesta.Data.UsuSegundoApellido}</b><br><br>
                            Se le informa que se recuperó con éxito sus credenciales de la <b>Plataforma SACI</b> de la
                            Unidad Académica <b>{escuela.EscNombreCorto} ({escuela.EscNombreLargo})</b>,
                            por este medio se le hace entrega de sus credenciales de acceso.<br>
                        </p>

                        <div align='center'>
                            <article style='background-color: rgb(244,244,244); width:700px; border-radius:10px; padding:5px; text-align:center;'>
                                <div align='center'>
						            <table style='padding:5px; border: 1px solid black; border-collapse:collapse;' >
							            <thead>
								            <tr style='background-color: #dddddd;'>
									            <th scope='col' colspan='2' style='border: 1px solid black;'>Credenciales de Acceso</th>
								            </tr>
							            </thead>
							            <tbody>
								            <tr style='background-color: #ffffff;'>
									            <td width='250px' style='border: 1px solid black;'>✉️ Usuario:</td>
									            <td width='250px' style='border: 1px solid black;'><b>{oRespuesta.Data.UsuCorreoPersonalCuentaActual}</b></td>
								            </tr>
								            <tr style='background-color: #dddddd;'>
									            <td width='250px' style='border: 1px solid black;'>🔑 Contraseña:</td>
									            <td width='250px' style='border: 1px solid black;'><b>{oRespuesta.Message}</b></td>
								            </tr>
							            </tbody>
						            </table>
				                </div>
			                </article>
                        </div>

                        <p style='text-align:justify; color:black;'>
                            La contraseña que se le género es de forma temporal, por lo que al momento de accesar al sistema se le solicitará que cambie su contraseña,<br>
                            la cual debe de tener la siguiente estructura:<br>
                        </p>

                        <ul style='text-align:justify; color:black;'>
                            <li>8 caracteres como mínimo</li>
                            <li>Debe contener 1 número</li>
                            <li>Contener una mayuscula</li>
                            <li>Contener un carácter especial(#,$,!,?,etc.)</li>
                        </ul>

                        <p style='text-align:justify; color:black;'>
                            Que tenga un excelente día.<br>
                            NUESTRO MAYOR COMPROMISO ES BRINDARLE CON EFICIENCIA Y CALIDAD EL SERVICIO.
                        </p>

                        <footer>
		                    <div align='center'>
			                    
		                    </div>
	                    </footer>";

                    servicioSendEmail.SendEmailAsync(
                        new RequestDTO_SendEmail()
                        {
                            EmailTo = oRecuperarContraseñaCorreo.CorreoElectronicoPersonal,
                            Subject = "SACI | RECUPERACIÓN DE CONTRASEÑA",
                            Body = msgEmail
                        });
                }
                else
                {
                    errorMsgVisible = true;
                    contentErrorMsg = oRespuesta!.Message;
                }
            }
            catch (HttpRequestException e)
            {
                await JSRuntime.InvokeAsync<object>("alert", e.Message);
            }
            finally
            {
                contentRecuperarContraseñaBtn = "Recuperar Contraseña";
                isSpinningHidden = true;
            }
        }
    }
}

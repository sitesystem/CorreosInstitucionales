@page "/debug/correos"

@inject IServiceProvider serviceProvider

<PageTitle>@Title</PageTitle>

<div class="p-4 rounded-1 mb-3 bg-white shadow">
    <h1>@Title</h1>
</div>

<div class="row">
    <div class="col-12 col-md-6">
        <div class="rounded-1 bg-white shadow p-3">
            <strong>Correo</strong>
            <InputText class="form-control mb-3" required @bind-Value=correo />

            <strong>Mensaje</strong>
            <RadzenHtmlEditor class="form-control mb-3" style="height:480px" required @bind-Value=@mensaje_correo />

            <button @onclick="EnviarCorreo" class="btn btn-primary form-control">Enviar Correo</button>
        </div>
    </div>

    <div class="col-12 col-md-6">
        <div class="rounded-1 bg-white shadow p-3">
            <strong>Número de Celular</strong>
            <InputText class="form-control mb-3" required @bind-Value=numero />

            <strong>Mensaje</strong>
            <InputTextArea class="form-control mb-3" required @bind-Value=mensaje_wa style="height:480px" />

            <button @onclick="EnviarMensajeWA" class="btn btn-primary form-control">Enviar WA</button>
        </div>
    </div>
</div>

<div class="row">
    <div class="row">
        <pre class="col p-3">@debug</pre>
    </div>
</div>

@code 
{
    readonly string Title = "Enviar Mensaje";
    string debug = "";

    string correo = string.Empty;
    string mensaje_correo = string.Empty;

    string numero = string.Empty;
    string mensaje_wa = string.Empty;

    public RequestDTO_Usuario usuario = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await servicioAuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            int idUsuario = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == "ID")?.Value);

            Response<RequestDTO_Usuario>? response = await servicioUsuario.GetDataByIdAsync(idUsuario);

            if(response is not null && response.Data is not null && response.Success == 1)
            {
                usuario = response.Data;
                correo = usuario.UsuCorreoPersonalCuentaActual!;
                numero = usuario.UsuNoCelularActual!.Replace(" ", string.Empty);
                mensaje_correo = $"MENSAJE DE PRUEBA PARA {usuario.UsuNombres}";
                mensaje_wa = $"MENSAJE DE PRUEBA PARA *{usuario.UsuNombres}*";
            }

            StateHasChanged();
        }
    }

    private async Task EnviarCorreo()
    {
        HttpResponseMessage response;

        ILoggerFactory loggerFactory = serviceProvider.GetRequiredService<ILoggerFactory>();
        HtmlRenderer htmlRenderer = new HtmlRenderer(serviceProvider, loggerFactory);

        string body = mensaje_correo;

        debug += Environment.NewLine + "Enviando mensaje";
        StateHasChanged();

        response = await servicioSendEmail.SendEmailAsync
        (
            new RequestDTO_SendEmail()
            {
                EmailTo = correo,
                Subject = "Correo de prueba",
                Body = body
            }
        );

        if(response.IsSuccessStatusCode)
        {
            debug += Environment.NewLine + "CORREO ENVIADO";
        }
        else
        {
            string content = await response.Content.ReadAsStringAsync();
            debug += Environment.NewLine + $"ERROR ENVIANDO CORREO: {content}";
        }
    }//ENVIAR CORREO

    private async Task EnviarMensajeWA()
    {
        HttpResponseMessage response;

        RequestDTO_SendWhatsApp MensajeWA = new()
        {
            Message = mensaje_wa,
            Number = numero.Replace(" ", string.Empty)
        };

        debug += Environment.NewLine + "Enviando mensaje";
        StateHasChanged();

        response = await servicioSendWhatsApp.SendWhatsAppAsync(MensajeWA);
        if (response.IsSuccessStatusCode)
        {
            debug += Environment.NewLine + "MENSAJE ENVIADO POR WA CORECTAMENTE.";
        }
        else
        {
            string content = await response.Content.ReadAsStringAsync();
            debug += Environment.NewLine + $"ERROR ENVIANDO MENSAJE WA: {content}";
        }
    }
}

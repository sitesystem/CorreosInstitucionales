@page "/Perfil"

@attribute [Authorize(Policy = "[Rol] Ambos")]

<PageTitle>SACI | Perfil</PageTitle>

<AuthorizeView>
    <Authorized>
        <RadzenCard Variant="Variant.Filled" Class="mb-3">
            <RadzenRow AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.Wrap" Gap="1rem" class="">
                <RadzenColumn SizeXS="12" SizeSM="12" SizeMD="6" SizeLG="6">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Start" Wrap="FlexWrap.Wrap" Gap="20px" Class="">
                        <svg xmlns="http://www.w3.org/2000/svg" width="45" height="45" fill="currentColor" class="bi bi-person-circle rz-color-base-800" viewBox="0 0 16 16">
                            <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
                            <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1" />
                        </svg>
                        <RadzenText TextStyle="TextStyle.H3" class="rz-color-base-800">Datos de Perfil</RadzenText>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeXS="12" SizeSM="12" SizeMD="6" SizeLG="6">
                    <RadzenFormField Text="@($@"Fecha y Hora del Alta de Usuari@:")" AllowFloatingLabel="false" Variant="Variant.Filled" class="w-100" Style="font-variant: small-caps; font-weight:bold;">
                        @* <Start><RadzenIcon Icon="person" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start> *@
                        <ChildContent>
                            <RadzenDatePicker Name="FechaHoraAlta" Style="width:100%;" @bind-Value="oEditUsuario.UsuFechaHoraAlta" ShowTime="true" ShowSeconds="true" TimeOnly="false" InputAttributes="@(new Dictionary<string, object>(){ { "font-weight", "bold" } })"
                                              HourFormat="12" DateFormat="dddd',' dd 'de' MMMM 'del' yyyy 'a las' hh:mm:ss tt" ReadOnly="true" Disabled="true" InputClass="text-center rz-color-base-600" />
                        </ChildContent>
                        <Helper><RadzenText TextStyle="TextStyle.Caption" /></Helper>
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
        @if(oEditUsuario?.UsuIdRol == 1)
        {
            <RadzenCard Variant="Variant.Filled" Class="rz-pt-3">
                <Administrador oEditUsuario="oEditUsuario" IdTipoPersonal="7" TipoPersonal="personal_udi" />
            </RadzenCard>
        }
        else
        {
            @switch (oEditUsuario?.UsuIdTipoPersonal)
            {
                case 1:
                    <RadzenCard Variant="Variant.Filled" Class="rz-pt-3">
                        <Alumnos ActionAddEdit="actualizar" oEditUsuario="oEditUsuario" IdTipoPersonal="1" TipoPersonal="alumno_inscrito" existenSolicitudes="@existenSolicitudes" />    @* Actualizar Registro Alumno Inscrito *@
                    </RadzenCard>
                    break;
                case 2:
                    <RadzenCard Variant="Variant.Filled" Class="rz-pt-3">
                        <Alumnos ActionAddEdit="actualizar" oEditUsuario="oEditUsuario" IdTipoPersonal="2" TipoPersonal="egresado" existenSolicitudes="@existenSolicitudes" />           @* Actualizar Registro Egresado *@
                    </RadzenCard>
                    break;
                case 3:
                    <RadzenCard Variant="Variant.Filled" Class="rz-pt-3">
                        <Alumnos ActionAddEdit="actualizar" oEditUsuario="oEditUsuario" IdTipoPersonal="3" TipoPersonal="maestria" existenSolicitudes="@existenSolicitudes" />           @* Actualizar Registro Alumno Posgrado *@
                    </RadzenCard>
                    break;
                case 4:
                    <RadzenCard Variant="Variant.Filled" Class="rz-pt-3">
                        <Empleados ActionAddEdit="actualizar" oEditUsuario="oEditUsuario" IdTipoPersonal="4" TipoPersonal="administrativo" existenSolicitudes="@existenSolicitudes" />   @* Actualizar Registro Empleado Administrativo *@
                    </RadzenCard>
                    break;
                case 5:
                    <RadzenCard Variant="Variant.Filled" Class="rz-pt-3">
                        <Empleados ActionAddEdit="actualizar" oEditUsuario="oEditUsuario" IdTipoPersonal="5" TipoPersonal="docente" existenSolicitudes="@existenSolicitudes" />          @* Actualizar Registro Empleado Docente *@
                    </RadzenCard>
                    break;
                case 6:
                    <RadzenCard Variant="Variant.Filled" Class="rz-pt-3">
                        <Empleados ActionAddEdit="actualizar" oEditUsuario="oEditUsuario" IdTipoPersonal="6" TipoPersonal="honorarios" existenSolicitudes="@existenSolicitudes" />       @* Actualizar Registro Empleado Honorarios *@
                    </RadzenCard>
                    break;
                default:
                    // tipousuario = 0;
                    break;
            }
        }
    </Authorized>
    <NotAuthorized>
        <p>No Autorizado</p>
    </NotAuthorized>
    <Authorizing>
        <p>Autorizando...</p>
    </Authorizing>
</AuthorizeView>

@code
{
    public Response<RequestDTO_Usuario>? oResponseUsuario = new();
    public RequestDTO_Usuario? oEditUsuario = new();

    private Response<RequestDTO_Solicitud>? oSolicitudLastTicket = new();
    private bool existenSolicitudes => oSolicitudLastTicket?.Data is not null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await servicioAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            int idTipoPersonal = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == "TipoPersonal")?.Value);
            int idUsuario = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == "ID")?.Value);
            oResponseUsuario = await servicioUsuario.GetDataByIdAsync(idUsuario);
            oEditUsuario = oResponseUsuario?.Data;

            oSolicitudLastTicket = await servicioSolicitud.GetDataByIdUsuarioLastTicket(idUsuario);
        }
        else
            navigationManager.NavigateTo("/");
    }
}

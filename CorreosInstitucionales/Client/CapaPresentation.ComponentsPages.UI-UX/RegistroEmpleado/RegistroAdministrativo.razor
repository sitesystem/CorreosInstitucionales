@page "/RegistroAdministrativo"

@attribute [AllowAnonymous]

@using CorreosInstitucionales.Shared.CapaEntities.ViewModels.Request;
@using CorreosInstitucionales.Shared.CapaEntities.ViewModels.Response;

@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.SendEmailService;
@using CorreosInstitucionales.Shared.CapaTools.reCAPTCHA
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.catLinksService;
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.tbUsuariosService;
@using System;
@using System.Globalization;
@using System.Threading;
@using System.Text.Json;
@using Newtonsoft.Json;
@using System.Net.Mail;


@inject IUsuario servicioUsuario;
@inject ILink servicioLink;
@inject ISendEmail servicioSendEmail

@inject IJSRuntime JSRuntime
@inject HttpClient Http

<style>
    <!-- estilos de insert -->
    .content-wrapper {
        width: 90%;
        margin: 0 auto;
        min-width: 85px;
    }

    b.example-label {
        font-size: 14px;
    }

    .content-wrapper div.row {
        padding: 15px 0px;
    }

    .small-textbox {
        padding-top: 5px;
    }

    .tailwind .small-textbox,
    .tailwind-dark .small-textbox {
        padding-top: 3px;
    }

    .e-bigger .small-textbox {
        padding-top: 10px;
    }

    .tailwind .e-bigger .small-textbox,
    .tailwind-dark .e-bigger .small-textbox {
        padding-top: 1px;
    }

    @@media only screen and (max-width: 480px) {
        .content-wrapper {
            width: 92%;
        }

        .col-xs-6,
        .col-xs-4,
        .col-xs-12 {
            padding: 10px 5px;
            width: 100%;
        }

        .content-wrapper div.row {
            padding: 0px;
        }
    }

    .fabric .row.material,
    .bootstrap .row.material,
    .bootstrap4 .row.material,
    .bootstrap5 .row.material,
    .highcontrast .row.material,
    .tailwind .row.material,
    .fluent .row.material,
    .fabric-dark .row.material,
    .bootstrap-dark .row.material,
    .bootstrap5-dark .row.material,
    .tailwind-dark .row.material,
    .fluent-dark .row.material {
        display: none;
    }

    <!-- dropdownlist filtering -->
    .control-wrapper {
        width: 250px;
        margin: auto;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    <!-- sombra -->
    .mi-sf-textbox {
        position: relative;
        flex-basis: 100px;
        flex-grow: 1;
    }
    <!-- estilo file upload -->
    .control-section {
        min-height: 370px;
    }

    .control-wrapper-upload {
        max-width: 350px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }

    <!-- toggle button -->
    .e-switch-wrapper {
        font-size: 20px;
        width: 80px;
        height: 30px;
    }

    <!-- estilo de mensaje -->
    .msg-content {
        font-size: 80px;
    }

    .msg-custom-section .content-section {
        margin: 0 auto;
        max-width: 400px;
        padding-top: 10px;
    }

    .msg-custom-section .e-message {
        margin: 10px 0;
    }

    .msg-custom-section .e-message.rounded {
        border-radius: 5px;
    }

    .msg-custom-section .e-message.square {
        border-radius: 1px;
    }

    SfMessage {
        margin-top: 100px;
        margin-right: 25px;
        margin-bottom: 100px;
        margin-left: 25px;
    }
    .mi-sf-textbox::after {
        content: ' ';
        position: absolute;
        left: 0;
        bottom: -3px;
        width: 100%;
        height: 2px;
        background-color: red;
    }        
</style>

<h3 style="margin-top:20px">
    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-briefcase" viewBox="0 0 18 18" style="margin-left: 20px" >
        <path d="M6.5 1A1.5 1.5 0 0 0 5 2.5V3H1.5A1.5 1.5 0 0 0 0 4.5v8A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-8A1.5 1.5 0 0 0 14.5 3H11v-.5A1.5 1.5 0 0 0 9.5 1zm0 1h3a.5.5 0 0 1 .5.5V3H6v-.5a.5.5 0 0 1 .5-.5m1.886 6.914L15 7.151V12.5a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5V7.15l6.614 1.764a1.5 1.5 0 0 0 .772 0M1.5 4h13a.5.5 0 0 1 .5.5v1.616L8.129 7.948a.5.5 0 0 1-.258 0L1 6.116V4.5a.5.5 0 0 1 .5-.5"/>
    </svg>
    Administrativo
</h3>

<EditForm Model="@oUsuario" OnValidSubmit="@RegistrarEmpleado" OnInvalidSubmit="@ScrollToTop">

    <DataAnnotationsValidator />
    <!-- Etiqueta flotante -->

    <div class="card border-dark mb-3" style="margin-top:20px ">
        <b class="card-header" size="20px">Datos Personales</b>
        <div class="card-body">
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox ID="name" 
                        Placeholder="Nombre(s)" 
                        Type="Syncfusion.Blazor.Inputs.InputType.Text" 
                        FloatLabelType="@FloatLabelType.Auto"
                        @bind-Value="@oUsuario.UsuNombre" IsRequired="true"
                        OnInput="@((e) => oUsuario.UsuNombre = e.Value.ToString().ToUpper())"
                        onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));"
                        CssClass="mi-sf-textbox"
                        HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "200" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                        ShowClearButton="true"
                        ValidateOnInput="true" />
                    <ValidationMessage For="@(() => oUsuario.UsuNombre)" />
                </div>
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox  
                        Placeholder="Primer Apellido" 
                        FloatLabelType="@FloatLabelType.Auto"
                        @bind-Value="@oUsuario.UsuPrimerApellido"
                        OnInput="@((e) => oUsuario.UsuPrimerApellido = e.Value.ToString().ToUpper())"
                        onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));"
                        CssClass="mi-sf-textbox"
                        HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "150" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                        ShowClearButton="true"
                        ValidateOnInput="true" />
                    <ValidationMessage For="@(() => oUsuario.UsuPrimerApellido)" />
                </div>
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox 
                        Placeholder="Segundo Apellido" 
                        FloatLabelType="@FloatLabelType.Auto"
                        @bind-Value="@oUsuario.UsuSegundoApellido"
                        OnInput="@((e) => oUsuario.UsuSegundoApellido = e.Value.ToString().ToUpper())"
                        onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));"
                        HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "150" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                        ShowClearButton="true" />
                </div>
            </div>
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox 
                        Placeholder="Numero de Celular" 
                        FloatLabelType="@FloatLabelType.Auto" 
                        @bind-Value="@oUsuario.UsuNoCelularNuevo"
                        onkeypress="return /^[0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));"
                        CssClass="mi-sf-textbox" 
                        HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "10" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                        ShowClearButton="true"
                        ValidateOnInput="true" />
                    <ValidationMessage For="@(() => oUsuario.UsuNoCelularNuevo)" />
                </div>
            </div>
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox 
                        Placeholder="CURP" 
                        FloatLabelType="@FloatLabelType.Auto" 
                        @bind-Value="@oUsuario.UsuCurp"
                        OnInput="@((e) => oUsuario.UsuCurp = e.Value.ToString().ToUpper())"
                        onkeypress="return /^[A-Za-z0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));"
                        CssClass="mi-sf-textbox"
                        HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "18" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                        ShowClearButton="true"
                        ValidateOnInput="true" />
                    <ValidationMessage For="@(() => oUsuario.UsuCurp)" />
                </div>
            </div>
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <a href="@linkCURP.LinkNombre" target="_blank">
                        ¿Olvidaste tu Curp?
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-up-right" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z" />
                            <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z" />
                        </svg>
                    </a>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4" >
                    <p>Adjunte el CURP en formato PDF</p>
                    <SfUploader @ref="UploadObj" AllowedExtensions=".pdf" MinFileSize=1 MaxFileSize=2000000 width="50%">
                        <UploaderEvents OnRemove="OnFileRemove"></UploaderEvents>
                        <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Save" RemoveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Remove"></UploaderAsyncSettings>
                    </SfUploader>
                </div>
            </div>
        </div>
    </div>

    <div class="card border-dark mb-3" style="margin-top:20px ">
        <b class="card-header" size="20px">Datos de Empleado</b>
        <div class="card-body">
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox 
                        Placeholder="Numero Empleado" 
                        FloatLabelType="@FloatLabelType.Auto" 
                        @bind-Value="@oUsuario.UsuNumeroEmpleado" 
                        CssClass="mi-sf-textbox"
                        HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "10" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                        onkeypress="return /^[0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));"
                        ShowClearButton="true"
                        Type="Syncfusion.Blazor.Inputs.InputType.Text"
                        ValidateOnInput="true" />
                    <ValidationMessage For="@(() => oUsuario.UsuNumeroEmpleado)" />
                </div>
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox 
                        Placeholder="Extensión" 
                        FloatLabelType="@FloatLabelType.Auto" 
                        @bind-Value="@oUsuario.UsuNoExtension" 
                        CssClass="mi-sf-textbox"
                        HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "10" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                        onkeypress="return /^[0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));"
                        ShowClearButton="true"
                        Type="Syncfusion.Blazor.Inputs.InputType.Text"
                        ValidateOnInput="true" />
                    <ValidationMessage For="@(() => oUsuario.UsuNoExtension)" />
                </div>
            </div>
        </div>
    </div>
    <div class="card border-dark mb-3" style="margin-top:20px ">
            <b class="card-header" size="20px">Datos de la cuenta</b>
            <div class="card-body">
                <div class="row">
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <SfTextBox 
                            Placeholder="Correo Personal" 
                            Type="Syncfusion.Blazor.Inputs.InputType.Email" 
                            FloatLabelType="@FloatLabelType.Auto" 
                            @bind-Value="@oUsuario.UsuCorreoPersonalCuentaNueva" 
                            CssClass="mi-sf-textbox" 
                            HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "100" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                            ShowClearButton="true"
                            ValidateOnInput="true" />
                        <ValidationMessage For="@(() => oUsuario.UsuCorreoPersonalCuentaNueva)" />
                    </div>

                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox 
                        Placeholder="Contraseña" 
                        Type="Syncfusion.Blazor.Inputs.InputType.Password" 
                        FloatLabelType="@FloatLabelType.Auto" 
                        @bind-Value="@oUsuario.UsuContraseña" 
                        CssClass="mi-sf-textbox"
                        HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "100" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                        ShowClearButton="true"
                        ValidateOnInput="true" />
                    <ValidationMessage For="@(() => oUsuario.UsuContraseña)" />
                    </div>

                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <SfTextBox 
                            Placeholder="Confirmar contraseña" 
                            Type="Syncfusion.Blazor.Inputs.InputType.Password" 
                            FloatLabelType="@FloatLabelType.Auto" 
                            @bind-Value="@contraseña2" 
                            OnInput="(e => contraseña2 = e.Value.ToString())" 
                            CssClass="mi-sf-textbox" 
                            @onkeyup="@CompararCadenas"
                            ShowClearButton="true" />
                        <br />
                        <SfMessage Severity="MessageSeverity.Error"
                                   ShowCloseIcon="false"
                                   ShowIcon="true"
                                   Visible="@banderaContraseña">
                            Ingresa las contraseñas y verifica que coincidan.
                        </SfMessage>
                    </div>
                </div>
            </div>
        </div>

    <div class="card border-dark mb-3" style="margin-top:20px ">
            <b class="card-header" size="20px">Correo Institucional</b>
            <div class="card-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                    <SfTextBox
                        Placeholder="Correo institucional" 
                        FloatLabelType="@FloatLabelType.Auto" 
                        @bind-Value="@oUsuario.UsuCorreoInstitucionalCuenta"
                        HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "100" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                        ShowClearButton="true"
                        Type="Syncfusion.Blazor.Inputs.InputType.Text"
                        ValidateOnInput="true" />
                    <ValidationMessage For="@(() => oUsuario.UsuCorreoInstitucionalCuenta)" />
                </div>
                </div>
            </div>
            <div class="card-footer">
                <small class="text-body-secondary">En caso de contar con uno.</small>
            </div>
        </div>
    
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 captcha">
                    <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6LeMdxkpAAAAABQkCp77LSx1K8tDRlmSAYXIU6AL" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                </div>
            
                <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                    <button type="submit" class="btn btn-success mt-4 mb-2" disabled="@DisablePostButton">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-send-plus-fill" viewBox="0 0 16 16">
                            <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 1.59 2.498C8 14 8 13 8 12.5a4.5 4.5 0 0 1 5.026-4.47L15.964.686Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z" />
                            <path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0m-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 0 0 1 0v-1h1a.5.5 0 0 0 0-1h-1v-1a.5.5 0 0 0-.5-.5" />
                        </svg>&nbsp;
                        <span role="status">Enviar</span>
                        <span class="spinner-border spinner-border-sm" aria-hidden="true" hidden="@isSpinningHidden"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    @* Modal *@
    <SfDialog AllowDragging="true" @bind-Visible="@dialogVisible" IsModal="true" Width="500px" ShowCloseIcon="true" Target="#target" CloseOnEscape="true">
        <DialogTemplates>
            <Header>
                Revisa y verifica tus Datos
            </Header>
            <Content>
                <ValidationSummary />
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Aceptar" IsPrimary="true" OnClick="@(() => this.dialogVisible = false)" CssClass="e-block" />
        </DialogButtons>
        <DialogEvents OnOverlayModalClick="@(() => this.dialogVisible = false)" />
        <DialogAnimationSettings Effect="DialogEffect.Zoom" />
    </SfDialog>
</EditForm>


@code {
    public Response<LinkViewModel>? oLinkCURP = new();
    public LinkViewModel? linkCURP = new();
    
    SfUploader UploadObj;
    
    private string contraseña2;
    public bool banderaContraseña = true;
    private ReCAPTCHA reCAPTCHAComponent;
    private bool ValidReCAPTCHA = false;
    private bool ServerVerificatiing = false;
    private bool DisablePostButton => !ValidReCAPTCHA || banderaContraseña;
    private void OnSuccess() => ValidReCAPTCHA = true;
    private void OnExpired() => ValidReCAPTCHA = false;

    public string Content = "Enviar Registro";
    public bool isSpinningHidden = true;

    bool dialogVisible { get; set; } = false;

    public Response<object>? oRespuesta = new();
    private UsuarioViewModel? oUsuario = new()
    {
            // DATOS ID DEL USUARIO
            IdUsuario = 0,
            UsuIdRol = 2,                           // FK ID del Rol (1 - Administrador, 2 - Usuario Solicitante)
            UsuIdTipoPersonal = 4,                  // FK ID del Tipo de Personal ([1 - Alumno Inscrito], [2 - Alumno Egresado], [3 - Maestria], [4 - Administrativo], [5 - Docente])
            // DATOS PERSONALES
            UsuNombre = "",                         // Nombre del Usuario Solicitante o Administrador
            UsuPrimerApellido = "",                 // Primer Apellido del Usuario Solicitante o Administrador
            UsuSegundoApellido = "",                // Segundo Apellido del Usuario Solicitante o Administrador
            UsuCurp = "",                           // CURP con 18 caracteres como mínimo
            UsuFileNameCurp = "",                   // Nombre del Archivo y extensión .pdf del CURP
            //UsuNoCelularAnterior = "0000000000",    // Número de Celular Anterior si llega a cambiar por uno nuevo
            UsuNoCelularNuevo = "0000000000",       // Número de Celular Nuevo que sería el número de celular actual
            // DATOS ACADÉMICOS
            UsuBoletaAlumno = "0000000000",         // Número de Boleta del Usuario (Alumno Inscrito o Egresado)
            UsuBoletaMaestria = "0000000",          // Número de Boleta del Usuario (Alumno de Maestria)
            UsuIdCarrera = 0,                       // FK ID de la Carrera del Alumno
            UsuSemestre = "0",                      // Semestre que cursa el Alumno Inscrito o de Maestria
            UsuAñoEgreso = 0,                       // Año de Egreso en dado caso
            // UsuFileNameComprobanteInscripcion = "", // Nombre del Archivo en .pdf del Comprobante de Inscripcion (Tira de Materias)
            // DATOS LABORALES
            UsuNumeroEmpleado = "0",                // Número del Empleado del Usuario (Administrador o Docente)
            UsuIdAreaDepto = 1,                     // FK ID del Área/Departamento del Usuario Empleado
            UsuNoExtension = "0",                   // Número de Extensión del Empleado
            // DATOS DE LAS CREDENCIALES DE LA CUENTA EN LA APP
            UsuCorreoPersonalCuentaAnterior = "",   // Correo Personal de la Cuenta Anterior
            UsuCorreoPersonalCuentaNueva = "",      // Correo Personal de la Cuenta Nueva o Actual
            UsuContraseña = "",                     // Contraseña en la PLataforma del Usuario Solicitante o Administrador
            UsuRecuperarContraseña = false,         // Contraseña Temporal que se le proporciona al Usuario Solicitante
            // DATOS DEL CORREO INSTITUCIONAL
            UsuCorreoInstitucionalCuenta = "",      // Cuenta Correo Institucional IPN generada por DCyC
            UsuCorreoInstitucionalContraseña = "",  // Contraseña del Correo Institucional IPN Generada por DCyC
            // OTROS DATOS
            // UsuFechaHoraAlta = DateTime.Parse(DateTime.Now.ToString()).Year; // Fecha y Hora de Alta del Usuario
            UsuStatus = true,                       // Usuario (1 - Activo / 0 - Inactivo)
            // DATOS FK NAVIGATION
            UsuIdAreaDeptoNavigation = null,
            UsuIdCarreraNavigation = null,
            UsuIdRolNavigation = null,
            UsuIdTipoPersonalNavigation = null
    };
    
    private async Task ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('name').focus()");
        this.dialogVisible = true;
    }

    private void CompararCadenas()
    {
        string c1 = oUsuario.UsuContraseña;

        Console.WriteLine(c1);
        Console.WriteLine(contraseña2);

        if (string.Equals(c1, contraseña2, StringComparison.Ordinal))  //Console.WriteLine("Las contraseñas son iguales.");
            banderaContraseña = false;
        else    //Console.WriteLine("Las contraseñas son diferentes.");
            banderaContraseña = true;

        Console.WriteLine(banderaContraseña);
        Console.WriteLine(DisablePostButton);
    }

    //Registro de un empleado
    public async Task RegistrarEmpleado()
    {
        if (ValidReCAPTCHA)
        {
            try
            {
                Content = "Enviando Registro...";
                isSpinningHidden = false;

                var respuesta = await servicioUsuario.AddDataAsync(oUsuario);
                oRespuesta = respuesta.Content.ReadFromJsonAsync<Response<object>>().Result;

                if (oRespuesta.Success == 1)
                    await servicioSendEmail.SendEmailAsync(new SendEmailViewModel()
                    {
                            EmailTo = oUsuario.UsuCorreoPersonalCuentaNueva,
                            Subject = "REGISTRO EN SACI",
                            Body = "Estimad@: " + oUsuario.UsuNombre + " " + oUsuario.UsuPrimerApellido + " " + oUsuario.UsuSegundoApellido + "<br><br>" +
                                       "Registro exitoso en el <b>Sistema para Atención de Correos Institucionales IPN (SACI)</b><br>"
                    });
                else
                    await servicioSendEmail.SendEmailAsync(new SendEmailViewModel()
                    {
                            EmailTo = oUsuario.UsuCorreoPersonalCuentaNueva,
                            Subject = "ERROR DE REGISTRO EN SACI",
                            Body = "Estimad@: " + oUsuario.UsuNombre + " " + oUsuario.UsuPrimerApellido + " " + oUsuario.UsuSegundoApellido + "<br><br>" +
                                         "Registro NO exitoso en el <b>Sistema para Atención de Correos Institucionales IPN (SACI)</b><br>"
                    });
            }
            catch (HttpRequestException e)
            {
                await JSRuntime.InvokeAsync<object>("alert", e.Message);
            }
            finally
            {
                Content = "Enviar Registro";
                isSpinningHidden = true;
            }
        }
    }

    private void OnInvalidSubmit()
    {
        // isValidAccount = true;
    }

    public void Begin(Syncfusion.Blazor.SplitButtons.ProgressEventArgs args)
    {
        Content = "Enviar Registro";
        // CssClass = "e-hide-spinner e-info";
    }

    public void Progressing(Syncfusion.Blazor.SplitButtons.ProgressEventArgs args)
    {
        Content = "Enviando Registro...";
    }

    public void End(Syncfusion.Blazor.SplitButtons.ProgressEventArgs args)
    {
        Content = "Enviar Registro";
    }

    protected override async Task OnInitializedAsync()
    {
        oLinkCURP = await servicioLink.GetDataByNombreAsync("CURP");
        linkCURP = oLinkCURP.Data;
    }

    // Subir Archivo
    public void OnFileRemove(RemovingEventArgs args)
    {
        args.PostRawFile = false;
    }
}
@page "/Registro"

@using CorreosInstitucionales.Shared.CapaEntities.ViewModels.Request;
@using CorreosInstitucionales.Shared.CapaEntities.ViewModels.Response;

@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.catCarrerasService;
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.catLinksService;
@using CorreosInstitucionales.Shared.CapaTools.reCAPTCHA
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.tbUsuariosService;
@using System;
@using System.Globalization;
@using System.Threading;
@using System.Text.Json;
@using Newtonsoft.Json;

@inject ICarrera servicioCarrera
@inject IUsuario servicioUsuario
@inject ILink servicioLink
@inject IJSRuntime JS
@inject HttpClient Http

<style> 
    <!-- estilos de insert -->
    .content-wrapper {
        width: 90%;
        margin: 0 auto;
        min-width: 85px;
    }

    b.example-label {
        font-size: 14px;
    }

    .content-wrapper div.row {
        padding: 15px 0px;
    }

    .small-textbox {
        padding-top: 5px;
    }

    .tailwind .small-textbox,
    .tailwind-dark .small-textbox {
        padding-top: 3px;
    }

    .e-bigger .small-textbox {
        padding-top: 10px;
    }

    .tailwind .e-bigger .small-textbox,
    .tailwind-dark .e-bigger .small-textbox {
        padding-top: 1px;
    }

    @@media only screen and (max-width: 480px) {
        .content-wrapper {
            width: 92%;
        }

        .col-xs-6,
        .col-xs-4,
        .col-xs-12 {
            padding: 10px 5px;
            width: 100%;
        }

        .content-wrapper div.row {
            padding: 0px;
        }
    }

    .fabric .row.material,
    .bootstrap .row.material,
    .bootstrap4 .row.material,
    .bootstrap5 .row.material,
    .highcontrast .row.material,
    .tailwind .row.material,
    .fluent .row.material,
    .fabric-dark .row.material,
    .bootstrap-dark .row.material,
    .bootstrap5-dark .row.material,
    .tailwind-dark .row.material,
    .fluent-dark .row.material {
        display: none;
    }
    <!-- dropdownlist filtering    -->
    .control-wrapper {
        width: 250px;
        margin: auto;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }
    <!-- estilo bonton-->
    #button-control {
        width: 100%;
        margin: 8% 0;
        text-align: center;
    }

    #button-control .e-btn {
        float: left;
    }

    @@media only screen and (max-width: 500px) {
        #button-control {
            margin-left: -3%;
        }
    }

    .button-section {
        width: 80%;
        margin: auto;
    }

    #button-control .col-xs-12 {
        margin: 15px 0;
    }
    <!-- estilo file upload-- >
    .control-section {
        min-height: 370px;
    }

    .control-wrapper-upload {
        max-width: 350px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }
    <!-- toggle button -->
    .e-switch-wrapper
    {
        font-size: 20px;
        width: 80px;
        height: 30px;
    }
    <!-- estilo de mensaje -->
    .msg-content {
        font-size: 80px;
    }

    .msg-custom-section .content-section {
        margin: 0 auto;
        max-width: 400px;
        padding-top: 10px;
    }

    .msg-custom-section .e-message {
        margin: 10px 0;
    }

    .msg-custom-section .e-message.rounded {
        border-radius: 5px;
    }

    .msg-custom-section .e-message.square {
        border-radius: 1px;
    }

    SfMessage {
        margin-top: 100px;
        margin-right: 25px;
        margin-bottom: 100px;
        margin-left: 25px;
    }
       
    .mi-sf-textbox::after {
        content: ' ';
        position: absolute;
        left: 0;
        bottom: -3px;
        width: 100%;
        height: 2px;
        background-color: red;
    }
    
</style>


<h3>Registro alumno</h3>
 <!-- Etiqueta de datos personales -->

<EditForm Model="@oUsuario" OnValidSubmit="@Registrar">
    
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            @* <div class="row">
                <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6"> *@
                    <b class="example-label" size="20px">Datos personales</b>
                @* </div>
            </div> *@
        </div>
        <div class="card-body">
            <!-- Etiqueta flotante -->
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox Placeholder="Nombre(s)"
                               Type="Syncfusion.Blazor.Inputs.InputType.Text"
                               FloatLabelType="@FloatLabelType.Auto"                       
                               @bind-Value="@oUsuario.UsuNombre"
                               OnInput="@((e) => oUsuario.UsuNombre = e.Value.ToString().ToUpper())"
                               onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));"
                               CssClass="mi-sf-textbox">
                    </SfTextBox>
                    <ValidationMessage For="@(() => oUsuario.UsuNombre)" />
                </div>
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox Placeholder="Primer Apellido" FloatLabelType="@FloatLabelType.Auto" 
                                    @bind-Value="@oUsuario.UsuPrimerApellido"
                                    OnInput="@((e) => oUsuario.UsuPrimerApellido = e.Value.ToString().ToUpper())"
                                    onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));"
                                    CssClass="mi-sf-textbox"></SfTextBox>
                    <ValidationMessage For="@(() => oUsuario.UsuPrimerApellido)" />
                </div>
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox Placeholder="Segundo Apellido" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuSegundoApellido" OnInput="@((e) => oUsuario.UsuSegundoApellido = e.Value.ToString().ToUpper())"
                               onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));"></SfTextBox>
                </div>
            </div>

            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox Placeholder="No. Celular" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuNoCelularNuevo"
                               onkeypress="return /^[0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));" CssClass="mi-sf-textbox"></SfTextBox>
                         <ValidationMessage For="@(() => oUsuario.UsuNoCelularNuevo)" />
                </div>

            </div>
            <br />
            <div class="row">
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4"> <!-- <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">-->
                    
                        <SfTextBox Placeholder="CURP" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuCurp" OnInput="@((e) => oUsuario.UsuCurp = e.Value.ToString().ToUpper())"
                               onkeypress="return /^[A-Za-z0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));" CssClass="mi-sf-textbox"></SfTextBox>
                        <ValidationMessage For="@(() => oUsuario.UsuCurp)" /> <br />
                    <a href="@link.LinkNombre" target="_blank">
                        Consulta CURP
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-up-right" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z" />
                            <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z" />
                        </svg>
                    </a>
                </div>
                    <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                        <!-- estilo de mensaje <div class="control-wrapper-upload">-->
                            <p>Adjunte el CURP en formato PDF</p>
                            <SfUploader @ref="UploadObj" AllowedExtensions=".pdf" MinFileSize=1 MaxFileSize=2000000>
                                <UploaderEvents OnRemove="OnFileRemove"></UploaderEvents>
                                <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Save" RemoveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Remove"></UploaderAsyncSettings>
                            </SfUploader>
                       <!-- </div>-->
                    </div>        
            </div>

        </div>
    </div> <br />

    <div class="card">
        <div class="card-header">
            <b class="example-label">Datos Académicos</b>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox Placeholder="Boleta"
                               FloatLabelType="@FloatLabelType.Auto"
                    @bind-Value="@oUsuario.UsuBoleta"
                               CssClass="mi-sf-textbox">
                    </SfTextBox>
                    <ValidationMessage For="@(() => oUsuario.UsuBoleta)" />
                </div>
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfDropDownList ID="Data___UsuIdCarrera"
                                    TValue="int?"
                                    TItem="CarreraViewModel"
                                    Placeholder="Carrera"
                                    FloatLabelType="FloatLabelType.Auto"
                                    ShowClearButton="true"
                                    EnableVirtualization="false"
                                    IgnoreCase="true"
                                    DataSource="@oCarrera.Data"
                                    @bind-Value="@oUsuario.UsuIdCarrera"
                                    CssClass="mi-sf-textbox"
                                    Enabled="true"
                                    Readonly="false"
                                   
                                    AllowFiltering="true"
                                    FilterBarPlaceholder="Selecciona una opción"
                                    IgnoreAccent="true"
                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    SortOrder="Syncfusion.Blazor.DropDowns.SortOrder.None">
                        <DropDownListFieldSettings Value="IdCarrera" Text="CarrNombre" />
                    </SfDropDownList>
                    <ValidationMessage For="@(() => oUsuario.UsuIdCarrera)" />
                </div>
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfDropDownList ID="Data___UsuSemestre"
                                    TValue="string"
                                    TItem="Semestres"
                                    Placeholder="Semestre"
                                    FloatLabelType="FloatLabelType.Auto"
                                    AllowFiltering="true"
                                    DataSource="@Semestre"
                                    @bind-Value="@oUsuario.UsuSemestre"
                                    CssClass="mi-sf-textbox">
                        <DropDownListFieldSettings Value="Key" Text="Value" />
                    </SfDropDownList>
                    <ValidationMessage For="@(() => oUsuario.UsuSemestre)" />
                </div>
            </div>

            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfDropDownList ID="Data___UsutipoAcademico"
                                    TValue="string"
                                    TItem="Academicos"
                                    Placeholder="Tipo de academico"
                                    FloatLabelType="FloatLabelType.Auto"
                                    AllowFiltering="true"
                                    DataSource="@academico"                                    
                                    CssClass="mi-sf-textbox">
                        <DropDownListFieldSettings Value="Key" Text="Value" />
                    </SfDropDownList>
                    
                </div>

                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">                    
                        <SfNumericTextBox TValue="int?" Min=1936 Max="@year" Step=1 Placeholder="Año de egreso" FloatLabelType="@FloatLabelType.Auto" Format="####" @bind-Value="@oUsuario.UsuAñoEgreso" onkeypress="return /^[0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));" CssClass="mi-sf-textbox"></SfNumericTextBox>                    
                </div>
            </div>
        </div>
    </div> <br />

    <div class="row">        
             <div class="control-wrapper-upload">
                <p>Adjunte el CURP en formato PDF</p>
                <SfUploader @ref="UploadObj" AllowedExtensions=".pdf" MinFileSize=1 MaxFileSize=2000000>
                    <UploaderEvents OnRemove="OnFileRemove"></UploaderEvents>
                    <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Save" RemoveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Remove"></UploaderAsyncSettings>
                </SfUploader>
            </div>
            <div class="control-wrapper-upload">
                <p>Adjunte el comprobante de inscripción en PDF</p>
            <SfUploader @ref="UploadObj" AllowedExtensions=".pdf" MinFileSize=1 MaxFileSize=2000000>
                    <UploaderEvents OnRemove="OnFileRemove"></UploaderEvents>
                    <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Save" RemoveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Remove"></UploaderAsyncSettings>
                </SfUploader>
             </div>
            <div class="control-wrapper-upload">
                <p>Adjunte credencial institucional en formato PDF</p>
            <SfUploader @ref="UploadObj" AllowedExtensions=".pdf" MinFileSize=1 MaxFileSize=2000000>
                    <UploaderEvents OnRemove="OnFileRemove"></UploaderEvents>
                    <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Save" RemoveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Remove"></UploaderAsyncSettings>
                </SfUploader>
            </div>        
    </div> <br />


    <div class="card">
        <div class="card-header">
            <b class="example-label">Datos de la cuenta</b>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox Placeholder="Correo Personal" Type="Syncfusion.Blazor.Inputs.InputType.Email" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuCorreoPersonal" CssClass="mi-sf-textbox"></SfTextBox>
                    <ValidationMessage For="@(() => oUsuario.UsuCorreoPersonal)" />
                </div>
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox Placeholder="Contraseña" Type="Syncfusion.Blazor.Inputs.InputType.Password" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuContraseña" CssClass="mi-sf-textbox"></SfTextBox>
                    <ValidationMessage For="@(() => oUsuario.UsuContraseña)" />
                </div>
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <SfTextBox Placeholder="Confirmar contraseña" Type="Syncfusion.Blazor.Inputs.InputType.Password" FloatLabelType="@FloatLabelType.Auto" CssClass="mi-sf-textbox"></SfTextBox>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                    <SfTextBox Placeholder="Correo institucional (en caso de tenerlo)" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuCorreroInstitucional"></SfTextBox>
                </div>
            </div>
        </div>
    </div>

    
    <!-- Captcha -->
    
    <!-- bton -->
   
            <!-- es true -->
        <div class="control-section">
            <div class="button-section">
                <div id="button-control">
                    <div class="row">
                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">

                        <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6LeMdxkpAAAAABQkCp77LSx1K8tDRlmSAYXIU6AL" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                    </div>

                </div>
                <div class="row">
                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">

                        <button type="submit" class="btn btn-outline-primary" disabled="@DisablePostButton"> Enviar </button>

                      </div>
                </div>
                </div>
            </div>
        </div>           
  
</EditForm>



@code
{    

    //varible fecha
    int year = DateTime.Parse(DateTime.Now.ToString()).Year;   

    //metodos de API

    private UsuarioViewModel? oUsuario = new();
    


    //variable que llamada a catalogo de links
    public Response<LinkViewModel>? oLink = new();
    public LinkViewModel? link = new();

    protected override async Task OnInitializedAsync()
    {
        oCarrera = await servicioCarrera.GetAllDataAsync(false);
        // oLink = await servicioLink.GetAllDataAsync(false);
        oLink = await servicioLink.GetDataByIdAsync(1);
        link = oLink.Data;
        // LINQ .NET
        // link = oLink.Data.Where(link => link.IdLink.Equals(1)).FirstOrDefault();
    }

    public async Task Registrar()
    {
        if (ValidReCAPTCHA)
        {
            var response = await reCAPTCHAComponent.GetResponseAsync();

            try
            {
                ServerVerificatiing = true;
                StateHasChanged();
                await Http.PostAsJsonAsync("/api/sample", new SampleAPIArgs { reCAPTCHAResponse = response });
                Console.WriteLine("alta exitosa");
                oUsuario.UsuIdRol=2;
                oUsuario.UsuNumeroEmpleado=null;
                oUsuario.UsuExtension=null;
                oUsuario.UsuIdTipoPersonal=1;
                await servicioUsuario.AddDataAsync(oUsuario);
            }
            catch (HttpRequestException e)
            {
                await JS.InvokeAsync<object>("alert", e.Message);
                ServerVerificatiing = false;
                StateHasChanged();
            }
        }


    }
    //Lista de carreras
    public Response<List<CarreraViewModel>>? oCarrera = new();
    // Lista de semestres
    public class Semestres
    {
        public string Value { get; set; }
        public string Key { get; set; }
    }

    private List<Semestres> Semestre = new List<Semestres>
    {
        new Semestres() { Value = "1ro semestre", Key = "1" },
        new Semestres() { Value = "2do semestre", Key = "2" },
        new Semestres() { Value = "3ro semestre", Key = "3" },
        new Semestres() { Value = "4to semestre", Key = "4" },
        new Semestres() { Value = "5to semestre", Key = "5" },
        new Semestres() { Value = "6to semestre", Key = "6" },
        new Semestres() { Value = "7mo semestre", Key = "7" },
        new Semestres() { Value = "8vo semestre", Key = "8" },
        new Semestres() { Value = "9no semestre", Key = "9" },
        new Semestres() { Value = "10mo semestre", Key = "10" },
    };
// Lista de tipos de academico
    public class Academicos
    {
        public string Value { get; set; }
        public string Key { get; set; }
    }

    private List<Academicos> academico = new List<Academicos>
    {
        new Academicos() { Value = "Inscrito", Key = "1" },
        new Academicos() { Value = "Egresado", Key = "2" },
        new Academicos() { Value = "Postgrado", Key = "3" },
        
    };
    //File upload
    SfUploader UploadObj;
    public void OnFileRemove(RemovingEventArgs args)
    {
        args.PostRawFile = false;
    }

    // Captcha

    private ReCAPTCHA reCAPTCHAComponent;

    private bool ValidReCAPTCHA = false;

    private bool ServerVerificatiing = false;

    private bool DisablePostButton => !ValidReCAPTCHA || ServerVerificatiing;

    private void OnSuccess() => ValidReCAPTCHA = true;

    private void OnExpired() => ValidReCAPTCHA = false;
    
}       
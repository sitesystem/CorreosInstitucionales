@page "/RegistroAlumnoInscritoEgresado"

@attribute [AllowAnonymous]

<style type="text/css">
    .circle-border {
        align-items: center;
        justify-content: center;
        display: flex;
        color: green;
        width: 60px;
        height: 60px;
        border: 5px solid rgb(215,215,215);
        border-radius: 50%;
    }

    .data {
        display: flex;
        justify-content: center;
        /*padding-left: 32px;*/
    }
</style>

@if (oCarreras != null && oCarreras.Data != null)
{
    <EditForm Model="@oUsuario" OnValidSubmit="@OnValidHandled_Registrar" OnInvalidSubmit="@OnInvalidHandled_ScrollToTop">

        <DataAnnotationsValidator/>

        <!-- ******************************************************************* DATOS PERSONALES ******************************************************************* -->
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Datos Personales" CollapseTitle="Datos Personales" ExpandAriaLabel="" CollapseAriaLabel="" Class="rz-border-base-500 rz-border-radius-1 rz-shadow-3">
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="account_box" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Datos Personales</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <div class="row">

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Nombre(s)" AllowFloatingLabel="false" Placeholder="Nombre(s)" AllowClear="true" Variant="Variant.Filled" Class="w-100 mt-3" Disabled="false">
                            @* <Start><RadzenIcon Icon="person" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start> *@
                            <ChildContent>
                                <RadzenTextBox id="names_alumno" @bind-Value="@oUsuario.UsuNombre" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="200"
                                               @oninput="@((e) => oUsuario.UsuNombre = e.Value.ToString().ToUpper())"
                                               onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                            </ChildContent>
                            @* <Helper><RadzenText TextStyle="TextStyle.Caption">Nombre de Pila</RadzenText></Helper> *@
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuNombre)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Primer Apellido" AllowFloatingLabel="false" Placeholder="Primer Apellido" AllowClear="true" Variant="Variant.Filled" Class="w-100 mt-3" Disabled="false">
                            @* <Start><RadzenIcon Icon="person" IconColor="@Colors.Base400" /></Start> *@
                            <ChildContent>
                                <RadzenTextBox id="lastName1_alumno" @bind-Value="@oUsuario.UsuPrimerApellido" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="150"
                                               @oninput="@((e) => oUsuario.UsuPrimerApellido = e.Value.ToString().ToUpper())"
                                               onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                            </ChildContent>
                            @* <Helper><RadzenText TextStyle="TextStyle.Caption">Nombre de Pila</RadzenText></Helper> *@
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuPrimerApellido)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Segundo Apellido" AllowFloatingLabel="false" Placeholder="Segundo Apellido" AllowClear="true" Variant="Variant.Filled" Class="w-100 mt-3" Disabled="false">
                            @* <Start><RadzenIcon Icon="person" IconColor="@Colors.Base400" /></Start> *@
                            <ChildContent>
                                <RadzenTextBox id="lastName2_alumno" @bind-Value="@oUsuario.UsuSegundoApellido" MinLength="0" MaxLength="150"
                                               @oninput="@((e) => oUsuario.UsuSegundoApellido = e.Value.ToString().ToUpper())"
                                               onkeypress="return /^[A-Za-z. ]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                            </ChildContent>
                            @* <Helper><RadzenText TextStyle="TextStyle.Caption">Nombre de Pila</RadzenText></Helper> *@
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuSegundoApellido)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Número de Celular" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="phone_iphone" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenMask id="phoneNumberCurrent_alumno" MinLength="0" MaxLength="20" @bind-Value="@oUsuario.UsuNoCelularNuevo" style="border-bottom: 3px solid red;"
                                            Mask="** ** ** ** **" CharacterPattern="[0-9]" Placeholder="00 00 00 00 00" />
                            </ChildContent>
                            @* <Helper><RadzenText TextStyle="TextStyle.Caption">Nombre de Pila</RadzenText></Helper> *@
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuNoCelularNuevo)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="CURP" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="document_scanner" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox id="curp_alumno" @bind-Value="@oUsuario.UsuCurp" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="18"
                                               @oninput="@((e) => oUsuario.UsuCurp = e.Value.ToString().ToUpper())"
                                               onkeypress="return /^[A-Za-z0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));" />
                            </ChildContent>
                            <Helper>
                                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" TextAlign="TextAlign.Justify">
                                    <a href="@oLinkCURP.Data.LinkEnlace" target="_blank" class="icon-link icon-link-hover">
                                        ¿Olvidaste tu <strong>CURP</strong>?
                                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" class="bi bi-box-arrow-up-right" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z" />
                                            <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z" />
                                        </svg>
                                    </a>
                                </RadzenText>
                            </Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuCurp)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Archivo del CURP" AllowFloatingLabel="false" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="picture_as_pdf" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent> @* image/*, .pdf, .doc, .docx *@
                                <RadzenUpload @ref="oUploadFile_CURP" Url="" Accept=".pdf"
                                              Icon="upload" ChooseText="Examinar Archivo" Auto="false" Multiple="false"
                                              Change=@(args => OnChangeFiles(args, CURP))
                                              Error=@(args => OnErrorFiles(args, "FileInput"))
                                              InputAttributes="@(new Dictionary<string,object>(){{ "cursor", "pointer" }})"
                                              Progress="@(args => OnProgressFiles(args, "Manual Upload"))"
                                              Complete="@(args => OnCompleteFiles(args))" />
                            </ChildContent>
                            @* <Helper></Helper> *@
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuFileNameCurp)" />
                        <ValidationMessage For="@(() => oUsuario.UsuFileSizeCurp)" />
                    </div>
                </div>
            </ChildContent>
            <SummaryTemplate>
                <ValidationSummary />
            </SummaryTemplate>
        </RadzenFieldset>

        <!-- ******************************************************************* CARD DATOS ACADÉMICOS ******************************************************************* -->
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Datos Académicos" CollapseTitle="Datos Académicos" ExpandAriaLabel="" CollapseAriaLabel="" Class="rz-border-base-500 rz-border-radius-1 rz-shadow-3 mt-3">
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="school" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Datos Académicos</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <div class="row">

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Boleta" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="dialpad" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenMask id="boleta_alumno" @bind-Value="@oUsuario.UsuBoletaAlumno" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="15"
                                            Mask="**********" CharacterPattern="[A-Z0-9]" Placeholder="****60****" />
                            </ChildContent>
                            @* <Helper><RadzenText TextStyle="TextStyle.Caption">Nombre de Pila</RadzenText></Helper> *@
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuBoletaAlumno)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Carrera" AllowFloatingLabel="false" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="school" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenDropDown id="college_career_alumno" @bind-Value="@oUsuario.UsuIdCarrera"
                                                TValue="int?"
                                                ValueProperty="IdCarrera"
                                                TextProperty="CarrNombre"
                                                Data="@oCarreras.Data"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                FilterOperator="StringFilterOperator.Contains"
                                                AllowVirtualization="true"
                                                Placeholder="Selecciona una opción"
                                                FilterPlaceholder="Buscar..."
                                                Multiple="false"
                                                Chips="true"
                                                InputAttributes="@(new Dictionary<string,object>(){{ "font-family", "Arial" }})"
                                                style="border-bottom: 3px solid red;" />
                            </ChildContent>
                            @* <Helper><RadzenText TextStyle="TextStyle.Caption">Nombre de Pila</RadzenText></Helper> *@
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuIdCarrera)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Semestre" AllowFloatingLabel="false" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="tag" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenDropDown id="semester_alumno" @bind-Value="@oUsuario.UsuSemestre"
                                                TValue="string?"
                                                ValueProperty="Key"
                                                TextProperty="Value"
                                                Data="@oSemestres"
                                                AllowClear="true"
                                                AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                FilterOperator="StringFilterOperator.Contains"
                                                AllowVirtualization="true"
                                                Placeholder="Selecciona una opción"
                                                FilterPlaceholder="Buscar..."
                                                Multiple="false"
                                                Chips="true"
                                                InputAttributes="@(new Dictionary<string,object>(){{ "font-family", "Arial" }})"
                                                style="border-bottom: 3px solid red;" />
                            </ChildContent>
                            @* <Helper><RadzenText TextStyle="TextStyle.Caption">Nombre de Pila</RadzenText></Helper> *@
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuSemestre)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Archivo del Comprobante de Inscripción" AllowFloatingLabel="false" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="picture_as_pdf" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent> @* image/*, .pdf, .doc, .docx *@
                                <RadzenUpload @ref="oUploadFile_ComprobanteInscripción" Url="" Accept=".pdf"
                                              Icon="upload" ChooseText="Examinar Archivo" Auto="false" Multiple="false"
                                              Change=@(args => OnChangeFiles(args, Comprobante_Inscripción))
                                              Error=@(args => OnErrorFiles(args, "FileInput"))
                                              InputAttributes="@(new Dictionary<string,object>(){{ "cursor", "pointer" }})"
                                              Progress="@(args => OnProgressFiles(args, "Manual Upload"))"
                                              Complete="@(args => OnCompleteFiles(args))" />
                            </ChildContent>
                            <Helper>
                                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" TextAlign="TextAlign.Left">
                                    <a href="@oLinkSAES.Data.LinkEnlace" target="_blank" class="icon-link icon-link-hover">
                                        Consulta tu <strong>Comprobante de Inscripción</strong>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-up-right" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z" />
                                            <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z" />
                                        </svg>
                                    </a>
                                </RadzenText>
                            </Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuFileNameComprobanteInscripcion)" />
                        <ValidationMessage For="@(() => oUsuario.UsuFileSizeComprobanteInscripcion)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="¿Eres Egresado?" AllowFloatingLabel="false" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <div class="rz-text-align-center">
                                <RadzenSelectBar @bind-Value="@flagEsEgresado" TValue="bool" ValueProperty="" TextProperty="" Size="ButtonSize.Medium" Multiple="false" class="rz-m-4">
                                    <Items>
                                        <RadzenSelectBarItem Value="true" Text="Sí" Icon="check_circle" IconColor="@Colors.SuccessDarker" />
                                        <RadzenSelectBarItem Value="false" Text="No" Icon="cancel" IconColor="@Colors.DangerDarker" />
                                    </Items>
                                </RadzenSelectBar>
                            </div>
                        </RadzenFormField>
                    </div>

                    @if (flagEsEgresado)
                    {
                        oUsuario.UsuIdTipoPersonal = 2;
                        var placeholder = $@"1950-{year}";

                        <div class="col-md-4 col-lg-4">
                            <RadzenFormField Text="Año de Egreso" AllowFloatingLabel="false" Variant="Variant.Outlined" class="w-100 mt-3" Disabled="false">
                                <Start><RadzenIcon Icon="dialpad" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                                <ChildContent>
                                    <RadzenNumeric id="año_egreso_alumno" TValue="int" @bind-Value="@oUsuario.UsuAñoEgreso" Change=@(args => oUsuario.UsuAñoEgreso = args)
                                                   AutoComplete="true" Placeholder="@placeholder"
                                                   TextAlign="TextAlign.Center" Min="1950" Max="@year" ShowUpDown="true" Step="1" Format="" />
                                </ChildContent>
                                @* <Helper><RadzenText TextStyle="TextStyle.Caption">Nombre de Pila</RadzenText></Helper> *@
                            </RadzenFormField>
                            <ValidationMessage For="@(() => oUsuario.UsuAñoEgreso)" />
                        </div>
                    }
                    else
                    {
                        oUsuario.UsuIdTipoPersonal = 1;
                        oUsuario.UsuAñoEgreso = 1950;
                    }

                </div>
            </ChildContent>
            <SummaryTemplate>
                <ValidationSummary />
            </SummaryTemplate>
        </RadzenFieldset>
        
        <!-- ******************************************************************* CARD DATOS DE LA CUENTA ******************************************************************* -->
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Datos de la Cuenta" CollapseTitle="Datos de la Cuenta" ExpandAriaLabel="" CollapseAriaLabel="" Class="rz-border-base-500 rz-border-radius-1 rz-shadow-3 mt-3">
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="account_circle" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Datos de la Cuenta</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <div class="row">

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Correo Electrónico Personal" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="email" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox id="email_personal_alumno" @bind-Value="@oUsuario.UsuCorreoPersonalCuentaNueva" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="100" />
                            </ChildContent>
                            @* <Helper><RadzenText TextStyle="TextStyle.Caption">Nombre de Pila</RadzenText></Helper> *@
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuCorreoPersonalCuentaNueva)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Contraseña" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="password" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox id="contraseña_alumno" @bind-Value="@oUsuario.UsuContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                               Visible="@(!VisibleContraseña)" />
                                <RadzenPassword id="contraseña_visible_alumno" @bind-Value="@oUsuario.UsuContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                                Visible="@VisibleContraseña" />
                            </ChildContent>
                            <End>
                                <RadzenButton Icon="@(VisibleContraseña ? "visibility" : "visibility_off")"
                                              Click="@ToggleContraseña"
                                              Variant="Variant.Text"
                                              Size="ButtonSize.Small"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Shade="Shade.Dark" />
                            </End>
                            @* <Helper><RadzenText TextStyle="TextStyle.Caption">Nombre de Pila</RadzenText></Helper> *@
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuContraseña)" />
                    </div>

                    <div class="col-md-4 col-lg-4">
                        <RadzenFormField Text="Confirmar Contraseña" AllowFloatingLabel="false" Placeholder="" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="password" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox id="confirmar_contraseña_alumno" @bind-Value="@UsuConfirmarContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20"
                                               @oninput="(e => UsuConfirmarContraseña = e.Value.ToString())"
                                               @onkeyup="@CompararContraseñas"
                                               Visible="@(!VisibleConfirmarContraseña)" />
                                <RadzenPassword id="confirmar_contraseña_visible_alumno" @bind-Value="@UsuConfirmarContraseña" style="border-bottom: 3px solid red;" MinLength="0" MaxLength="20" aria-label="enter password"
                                                @oninput="(e => UsuConfirmarContraseña = e.Value.ToString())"
                                                @onkeyup="@CompararContraseñas"
                                                Visible="@VisibleConfirmarContraseña" />
                            </ChildContent>
                            <End>
                                <RadzenButton Icon="@(VisibleConfirmarContraseña ? "visibility" : "visibility_off")"
                                              Click="ToggleConfirmarContraseña"
                                              Variant="Variant.Text"
                                              Size="ButtonSize.Small"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Shade="Shade.Dark" />
                            </End>
                            @* <Helper><RadzenText TextStyle="TextStyle.Caption">Nombre de Pila</RadzenText></Helper> *@
                        </RadzenFormField>
                        <RadzenAlert Title="Error" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker" ShowIcon="true" AllowClose="false"
                                     @bind-Visible="flagErrorPasswords">
                                     Las contraseñas no coinciden, <strong>verifíquelas.</strong>
                        </RadzenAlert>
                    </div>                                                           
                </div>
            </ChildContent>
            <SummaryTemplate>
                <ValidationSummary />
            </SummaryTemplate>
        </RadzenFieldset>
        
        <!-- ******************************************************************* CARD DATOS CORREO INSTITUCIONAL ******************************************************************* -->
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Correo Electrónico Institucional" CollapseTitle="Correo Electrónico Institucional" ExpandAriaLabel="" CollapseAriaLabel="" Class="rz-border-base-500 rz-border-radius-1 rz-shadow-3 mt-3">
            <HeaderTemplate>
                <span class="d-inline-flex align-items-center align-middle">
                    <RadzenIcon Icon="account_box" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Correo Electrónico Institucional</b>
                </span>
            </HeaderTemplate>
            <ChildContent>
                <div class="row">
                    <div class="col-md-4 col-lg-4 offset-md-4 offset-lg-4">
                        <RadzenFormField Text="Correo Electrónico Institucional" AllowFloatingLabel="false" AllowClear="true" Variant="Variant.Outlined" Class="w-100 mt-3" Disabled="false">
                            <Start><RadzenIcon Icon="mail_outline" IconColor="@Colors.Base400" IconStyle="IconStyle.Secondary" /></Start>
                            <ChildContent>
                                <RadzenTextBox id="email_institucional_alumno" @bind-Value="@oUsuario.UsuCorreoInstitucionalCuenta" MinLength="0" MaxLength="100" />
                            </ChildContent>
                            <Helper>
                                <RadzenText TextStyle="TextStyle.Caption">
                                    Campo Opcional (en caso de contar con un Correo Institucional).
                                </RadzenText>
                            </Helper>
                        </RadzenFormField>
                        <ValidationMessage For="@(() => oUsuario.UsuCorreoInstitucionalCuenta)" />
                    </div>
                </div>
            </ChildContent>
        </RadzenFieldset>

        <!-- ******************************************************************* Avisos ******************************************************************* -->
        <RadzenAlert Title="" AlertStyle="AlertStyle.Info" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker" ShowIcon="true" AllowClose="false">
            <b>NOTA:</b> La creación de los Correos Institucionales de los alumnos de nuevo ingreso tendrá un <strong>tiempo de espera de hasta 2 meses.</strong>
        </RadzenAlert>

        <RadzenAlert Title="" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker" ShowIcon="true" AllowClose="false">
            <b>NOTA:</b> Los campos subrayados de rojo son <strong>obligatorios.</strong>
        </RadzenAlert>

        <!-- ******************************************************************* CARD RECAPTCHA ******************************************************************* -->
        <div class="row">
            <div class="col-md-4 offset-md-4 rz-mt-3">
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.Wrap" Gap="10px" Class="">
                    <ReCAPTCHA @ref="oReCAPTCHAComponent" SiteKey="6LeMdxkpAAAAABQkCp77LSx1K8tDRlmSAYXIU6AL" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                    <RadzenButton Text="Enviar Registro"
                                  BusyText="Enviando Registro ..."
                                  ButtonStyle="ButtonStyle.Success"
                                  ButtonType="ButtonType.Submit"
                                  IsBusy="@busyLoading"
                                  Icon="send"
                                  Class="w-100 mt-3"
                                  Shade="Shade.Darker"
                                  Disabled="@DisablePostButton" />
                </RadzenStack>
            </div>
        </div>
    </EditForm>
}
else
{
    <LoadingComponent />
}

@code
{
    @*///////////////////////////////////////////////  INICIALIZAR OBJETO DEL USUARIO  ///////////////////////////////////////////////*@
    public RequestDTO_Usuario? oUsuario = new()
    {
        // DATOS ID DEL USUARIO
        IdUsuario = 0,
        UsuIdRol = 2,                           // FK ID del Rol (1 - Administrador, 2 - Usuario Solicitante)
        UsuIdTipoPersonal = 1,                  // FK ID del Tipo de Personal ([1 - Alumno Inscrito], [2 - Alumno Egresado], [3 - Maestria], [4 - Administrativo], [5 - Docente])
        // DATOS PERSONALES
        UsuNombre = "",                         // Nombre del Usuario Solicitante o Administrador
        UsuPrimerApellido = "",                 // Primer Apellido del Usuario Solicitante o Administrador
        UsuSegundoApellido = "",                // Segundo Apellido del Usuario Solicitante o Administrador
        UsuCurp = "",                           // CURP con 18 caracteres como mínimo
        UsuFileNameCurp = "",                   // Nombre del Archivo y extensión .pdf del CURP
        UsuFileSizeCurp = 0l,                   // Tamaño del Archivo .pdf del CURP
        UsuNoCelularAnterior = "00 00 00 00 00",// Número de Celular Anterior si llega a cambiar por uno nuevo
        UsuNoCelularNuevo = "",                 // Número de Celular Nuevo que sería el número de celular actual
        // DATOS ACADÉMICOS
        UsuBoletaAlumno = "",                   // Número de Boleta del Usuario (Alumno Inscrito o Egresado)
        UsuBoletaMaestria = "B000000",          // Número de Boleta del Usuario (Alumno de Maestria)
        // UsuIdCarrera = 1,                    // FK ID de la Carrera del Alumno
        UsuSemestre = "",                       // Semestre que cursa el Alumno Inscrito o de Maestria
        UsuAñoEgreso = 1950,                    // Año de Egreso en dado caso
        UsuFileNameComprobanteInscripcion = "", // Nombre del Archivo en .pdf del Comprobante de Inscripcion (Tira de Materias)
        UsuFileSizeComprobanteInscripcion = 0l, // Tamaño del Archivo en .pdf del Comprobante de Inscripcion (Tira de Materias)
        // DATOS LABORALES
        UsuNumeroEmpleado = "0",                // Número del Empleado del Usuario (Administrador o Docente)
        UsuIdAreaDepto = 1,                     // FK ID del Área/Departamento del Usuario Empleado
        UsuNoExtension = "0",                   // Número de Extensión del Empleado
        // DATOS DE LAS CREDENCIALES DE LA CUENTA EN LA APP
        UsuCorreoPersonalCuentaAnterior = null, // Correo Personal de la Cuenta Anterior
        UsuCorreoPersonalCuentaNueva = "",      // Correo Personal de la Cuenta Nueva o Actual
        UsuContraseña = "",                     // Contraseña en la PLataforma del Usuario Solicitante o Administrador
        UsuRecuperarContraseña = false,         // Contraseña Temporal que se le proporciona al Usuario Solicitante
        // DATOS DEL CORREO INSTITUCIONAL
        UsuCorreoInstitucionalCuenta = "",      // Cuenta Correo Institucional IPN generada por DCyC
        UsuCorreoInstitucionalContraseña = "",  // Contraseña del Correo Institucional IPN Generada por DCyC
        // OTROS DATOS
        // UsuFechaHoraAlta = DateTime.Parse(DateTime.Now.ToString()).Year; // Fecha y Hora de Alta del Usuario
        UsuStatus = true,                       // Usuario (1 - Activo / 0 - Inactivo)
        // DATOS FK NAVIGATION
        UsuIdAreaDeptoNavigation = null,
        UsuIdCarreraNavigation = null,
        UsuIdRolNavigation = null,
        UsuIdTipoPersonalNavigation = null
    };

    @*///////////////////////////////////////////////  INICIALIZAR OBJETOS Y OBTENER DATA ASYNC  ///////////////////////////////////////////////*@
    public Response<RequestDTO_Usuario>? oResponse = new();
    public Response<object>? oRespuesta = new();
    public Response<RequestViewModel_Link>? oLinkCURP = new();
    public Response<RequestViewModel_Link>? oLinkSAES = new();
    public Response<List<RequestViewModel_Carrera>>? oCarreras = new();

    protected override async Task OnInitializedAsync()
    {
        oLinkCURP = await servicioLink.GetDataByNameAsync("CURP");
        oLinkSAES = await servicioLink.GetDataByNameAsync("SAES UPIICSA");
        oCarreras = await servicioCarrera.GetAllDataAsync(true);
    }

    @*///////////////////////////////////////////////  INICIALIZAR LISTA DE SEMESTRES  ///////////////////////////////////////////////*@
    public class Semestres
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    private List<Semestres> oSemestres = new List<Semestres>
    {
        new Semestres() { Value = "1ro semestre", Key = "1" },
        new Semestres() { Value = "2do semestre", Key = "2" },
        new Semestres() { Value = "3ro semestre", Key = "3" },
        new Semestres() { Value = "4to semestre", Key = "4" },
        new Semestres() { Value = "5to semestre", Key = "5" },
        new Semestres() { Value = "6to semestre", Key = "6" },
        new Semestres() { Value = "7mo semestre", Key = "7" },
        new Semestres() { Value = "8vo semestre", Key = "8" },
        new Semestres() { Value = "9no semestre", Key = "9" },
        new Semestres() { Value = "10mo semestre", Key = "10" },
    };

    @*///////////////////////////////////////////////  Egresado  //////////////////////////////////////////////////////////////////////*@
    private bool flagEsEgresado;
    @*///////////////////////////////////////////////  Año actual  //////////////////////////////////////////////////////////////////////*@
    public int year = DateTime.Parse(DateTime.Now.ToString()).Year;

    @*///////////////////////////////////////////////  VALIDAR CAMPOS CONTRASEÑA Y CONFIRMAR CONTRASEÑA  ///////////////////////////////////////////////*@
    // Hacer visible las Contraseñas con el ícono eye
    private bool VisibleContraseña = true;
    private bool VisibleConfirmarContraseña = true;
    private void ToggleContraseña() => VisibleContraseña = !VisibleContraseña;
    private void ToggleConfirmarContraseña() => VisibleConfirmarContraseña = !VisibleConfirmarContraseña;

    // Comparar las Contraseñas
    public bool flagErrorPasswords = false;
    private string UsuConfirmarContraseña = string.Empty;
    private void CompararContraseñas() => flagErrorPasswords = !string.Equals(oUsuario.UsuContraseña, UsuConfirmarContraseña, StringComparison.Ordinal) ? true : false;

    @*///////////////////////////////////////////////  VALIDAR ReCAPTCHA  ////////////////////////////////////////////////////////////////////////*@
    private ReCAPTCHA oReCAPTCHAComponent;
    private bool ValidReCAPTCHA = false;
    private bool ServerVerificatiing = false;
    private void OnSuccess() => ValidReCAPTCHA = true;
    private void OnExpired() => ValidReCAPTCHA = false;

    @*///////////////////////////////////////////////  VALIDAR CAMPOS DEL FORMULARIO CON DATA_NOTATIONS  ///////////////////////////////////////////////*@
    private async Task OnInvalidHandled_ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('names_alumn').select()");
    }

    @*///////////////////////////////////////////////  VALIDAR CAMPOS DEL FORMULARIO ARCHIVOS PARA SUBIR  ///////////////////////////////////////////////*@
    // Subida de archivo
    private RadzenUpload oUploadFile_CURP = new();
    private RadzenUpload oUploadFile_ComprobanteInscripción = new();

    void OnChangeFiles(UploadChangeEventArgs args, string name)
    {
        foreach (var file in args.Files)
        {
            if (name == CURP)
            {
                oUsuario.UsuFileNameCurp = $"{name}_{oGuid}{Path.GetExtension(file.Name).ToLower()}";
                oUsuario.UsuFileSizeCurp = file.Size;
                // Console.WriteLine($"File: {oUsuario.UsuFileNameCurp} / ({oUsuario.UsuFileSizeCurp} bytes)");
            }
            else if (name == Comprobante_Inscripción)
            {
                oUsuario.UsuFileNameComprobanteInscripcion = $"{name}_{oGuid}{Path.GetExtension(file.Name).ToLower()}";
                oUsuario.UsuFileSizeComprobanteInscripcion = file.Size;
                // Console.WriteLine($"File: {oUsuario.UsuFileNameComprobanteInscripcion} / ({oUsuario.UsuFileSizeComprobanteInscripcion} bytes)");
            }
        }
    }

    void OnErrorFiles(UploadErrorEventArgs args, string name) => Console.WriteLine($"{args.Message}");

    void OnProgressFiles(UploadProgressArgs args, string name)
    {
        // Console.WriteLine($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                // Console.WriteLine($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

    void OnCompleteFiles(UploadCompleteEventArgs args) => Console.WriteLine($"Server response: {args.RawResponse}");

    @*///////////////////////////////////////////////  REGISTRAR USUARIO  //////////////////////////////////////////////////////////////////////*@
    private bool busyLoading = false;
    private bool DisablePostButton => !ValidReCAPTCHA || flagErrorPasswords;
    private string folder = "Usuarios";
    private string CURP = "CURP";
    private string Comprobante_Inscripción = "Comprobante-Inscripción";
    private int idResponse;
    private Guid oGuid = Guid.NewGuid();

    public async Task OnValidHandled_Registrar()
    {
        try
        {
            busyLoading = true;
            var verificacion = await servicioUsuario.ValidateByEmailCURP(oUsuario.UsuCorreoPersonalCuentaNueva, oUsuario.UsuCurp);

            if (ValidReCAPTCHA && verificacion?.Success == 1)
            {
                // Console.WriteLine("UsuNoCelularNuevo: " + oUsuario.UsuNoCelularNuevo);
                // Console.WriteLine("UsuBoletaAlumno: " + oUsuario.UsuBoletaAlumno);
                // Console.WriteLine("UsuBoletaMaestria: " + oUsuario.UsuBoletaMaestria);
                // Console.WriteLine("UsuIdCarrera: " + oUsuario.UsuIdCarrera);
                // Console.WriteLine("UsuSemestre: " + oUsuario.UsuSemestre);
                // Console.WriteLine("UsuAñoEgreso: " + oUsuario.UsuAñoEgreso);
                // Console.WriteLine("UsuFileNameComprobanteInscripcion: " + oUsuario.UsuFileNameComprobanteInscripcion);
                // Console.WriteLine("UsuNumeroEmpleado: " + oUsuario.UsuNumeroEmpleado);
                // Console.WriteLine("UsuIdAreaDepto: " + oUsuario.UsuIdAreaDepto);
                // Console.WriteLine("UsuNoExtension: " + oUsuario.UsuNoExtension);
                // Console.WriteLine("UsuCorreoPersonalCuentaAnterior: " + oUsuario.UsuCorreoPersonalCuentaAnterior);
                // Console.WriteLine("UsuCorreoPersonalCuentaNueva: " + oUsuario.UsuCorreoPersonalCuentaNueva);
                // Console.WriteLine("UsuContraseña: " + oUsuario.UsuContraseña);
                // Console.WriteLine("UsuRecuperarContraseña: " + oUsuario.UsuRecuperarContraseña);
                // Console.WriteLine("UsuCorreoInstitucionalCuenta: " + oUsuario.UsuCorreoInstitucionalCuenta);
                // Console.WriteLine("UsuCorreoInstitucionalContraseña: " + oUsuario.UsuCorreoInstitucionalContraseña);
                // Console.WriteLine("UsuFechaHoraAlta: " + oUsuario.UsuFechaHoraAlta);
                // Console.WriteLine("UsuStatus: " + oUsuario.UsuStatus);

                var respuesta = await servicioUsuario.AddDataAsync(oUsuario);
                oRespuesta = respuesta.Content.ReadFromJsonAsync<Response<object>>().Result;

                if (oRespuesta.Success == 1)
                {
                    @*//  ENVÍO DE CORREO ELECTRÓNICO PARA AVISO DE REGISTRO EXITOSO  //*@
                    await servicioSendEmail.SendEmailAsync(new RequestDTO_SendEmail()
                        {
                            EmailTo = oUsuario.UsuCorreoPersonalCuentaNueva,
                            Subject = "REGISTRO EN PLATAFORMA SACI",
                            Body = $@"<header>
		                                <div align='center'>
			                                <p class='fw-bolder text-center fs-3'> Sistema de Ayuda para Correos Institucionales</p>
		                                </div>
	                                </header>
	                                <main class='container-fluid'><!-- style='display:grid; place-items:center;'-->
		                                <section >
			                                <article class='p-2 rounded' style='background-color: rgb(255, 255, 255);'>
				                                <p class='text-start' style='font-size:calc(10px + 0.290625vw);'>	Estimad@: <br><b>{oUsuario.UsuNombre} {oUsuario.UsuPrimerApellido} {oUsuario.UsuSegundoApellido}</b><br><br>
				                                Se le informa que su registro fué exitoso en la Plataforma <b>SACI (Sistema de Ayuda para Correos Institucionales)</b>
				                                de la Unidad Académica (nombre de la escuela), por este medio se le hace entrega de sus <b>credenciales de acceso:</b><br>
				                                </p>
			                                </article>

			                                <article class='p-2 rounded container-fluid' style='background-color: rgb(244,244,244); width:90vw'>
				                                <div align='center'>
						                                <table class='table table-striped table-bordered border-black p-2' style='width:80vw; ><!-- style='width:50vw; '-->
							                                <thead>
								                                <tr>
									                                <th scope='col' colspan='2' style='font-size:calc(12px + 0.290625vw);'>Credenciales de Acceso</th>
								                                </tr>
							                                </thead>
							                                <tbody>
								                                <tr>
									                                <td style='font-size:calc(10px + 0.290625vw);'>Usuario:</td>
									                                <td style='font-size:calc(10px + 0.290625vw);'><b>{oUsuario.UsuCorreoPersonalCuentaNueva}</b></td>
								                                </tr>
								                                <tr>
									                                <td style='font-size:calc(10px + 0.290625vw);'>Contraseña:</td>
									                                <td style='font-size:calc(10px + 0.290625vw);'><b>{oUsuario.UsuContraseña}</b></td>
								                                </tr>

							                                </tbody>
						                                </table>
				                                </div>
			                                </article>

			                                <div align='center'>
				                                <article class='p-2 rounded' style='background-color: rgb(255, 255, 255); width:90vw; '>
					                                <p class='text-start' style='font-size:calc(10px + 0.290625vw);'><!---->
						                                Sus datos son los siguientes:<br>

						                                <table class='table table-striped table-bordered border-black' style='width:80vw; '>
							                                <thead>
								                                <tr>
									                                <th scope='col' colspan='2' style='font-size:calc(12px + 0.290625vw);'>Datos personales</th>
								                                </tr>
							                                </thead>
							                                <tbody>
								                                <tr>
									                                <td style='font-size:calc(10px + 0.290625vw);'>Rol</td>
									                                <td style='font-size:calc(10px + 0.290625vw);'>{oUsuario.UsuIdRol}</td>
								                                </tr>
								                                <tr>
									                                <td style='font-size:calc(10px + 0.290625vw);'>Tipo de personal</td>
									                                <td style='font-size:calc(10px + 0.290625vw);'>Usuario</td>
								                                </tr>
								                                <tr>
									                                <td style='font-size:calc(10px + 0.290625vw);'>Nombre</td>
									                                <td style='font-size:calc(10px + 0.290625vw);'>{oUsuario.UsuNombre}</td>
								                                </tr>
								                                <tr>
									                                <td style='font-size:calc(10px + 0.290625vw);'>Primer Apellido</td>
									                                <td style='font-size:calc(10px + 0.290625vw);'>{oUsuario.UsuPrimerApellido}</td>
								                                </tr>
								                                <tr>
									                                <td style='font-size:calc(10px + 0.290625vw);'>Segundo Apellido</td>
									                                <td style='font-size:calc(10px + 0.290625vw);'>{oUsuario.UsuPrimerApellido}</td>
								                                </tr>
								                                <tr>
									                                <td style='font-size:calc(10px + 0.290625vw);'>CURP</td>
									                                <td style='font-size:calc(10px + 0.290625vw);'>{oUsuario.UsuCurp}</td>
								                                </tr>
								                                <tr>
									                                <td style='font-size:calc(10px + 0.290625vw);'>Celular</td>
									                                <td style='font-size:calc(10px + 0.290625vw);'>{oUsuario.UsuNoCelularAnterior}</td>
								                                </tr>
							                                </tbody>
						                                </table>
					                                </p>
				                                </article>
			                                </div>
			                                <footer><p class='text-start' style='font-size:calc(10px + 0.290625vw);'>Que tenga un excelente día.<br>NUESTRO MAYOR COMPROMISO ES BRINDARLE CON EFICIENCIA Y CALIDAD EL SERVICIO.</p></footer>
		                                </section>
	                                </main>

	                                <footer>
		                                <div align='center'>
			                                <img src='LOGOSACI.PNG' width='100' height='100' alt='...'></img>
		                                </div>
	                                </footer>"
                        });

                    @*//  UPLOAD FILES  //*@
                    idResponse = int.Parse(oRespuesta.Message);

                    oUsuario.UsuFileNameCurp = $"{CURP}{Path.GetExtension(oUsuario.UsuFileNameCurp).ToLower()}";
                    oUsuario.UsuFileNameComprobanteInscripcion = $"{Comprobante_Inscripción}{Path.GetExtension(oUsuario.UsuFileNameComprobanteInscripcion).ToLower()}";

                    oUploadFile_CURP.Url = $@"api/RepositoryFiles/UploadSingleFile/{folder}/{idResponse}/{oUsuario.UsuFileNameCurp}/{oGuid}";
                    oUploadFile_ComprobanteInscripción.Url = $@"api/RepositoryFiles/UploadSingleFile/{folder}/{idResponse}/{oUsuario.UsuFileNameComprobanteInscripcion}/{oGuid}";

                    await oUploadFile_CURP.Upload();
                    await oUploadFile_ComprobanteInscripción.Upload();

                    @*//  DIALOG MESSAGE REGISTRO EXITOSO  //*@
                    await DialogModalService.OpenAsync("Mensaje", ds =>
                        @<div>
                            <table class="Table text-center">
                                <tbody style="line-height: 2.0;">
                                    <tr>
                                        <td class="data">
                                            <span class="circle-border">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-check-lg" viewBox="0 0 16 16" style="color: green; font-weight: bold;">
                                                    <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z" />
                                                </svg>
                                            </span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="data text-success" style="font-size: 25px;">
                                            <b style="font-weight: 500 !important;">¡Registro de<br />Usuari@@ Exitoso!</b>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="data">
                                            <b>@oUsuario.UsuNombre @oUsuario.UsuPrimerApellido @oUsuario.UsuSegundoApellido</b>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>,
                        new DialogOptions()
                        {
                            CloseDialogOnOverlayClick = false,
                            CloseDialogOnEsc = false,
                            Width = "Auto",
                            Height = "Auto",
                            Resizable = true,
                            ShowTitle = true,
                            ShowClose = true,
                            Draggable = true,
                            CssClass = "custom-dialog-class",
                            WrapperCssClass = "custom-dialog-wrapper-class"
                        });
                }
                else
                {
                    await servicioSendEmail.SendEmailAsync(new RequestDTO_SendEmail()
                        {
                            EmailTo = oUsuario.UsuCorreoPersonalCuentaNueva,
                            Subject = "ERROR DE REGISTRO EN SACI",
                            Body = "Estimad@: " + oUsuario.UsuNombre + " " + oUsuario.UsuPrimerApellido + " " + oUsuario.UsuSegundoApellido + "<br><br>" +
                            "Registro NO exitoso en el <b>Sistema para Atención de Correos Institucionales IPN (SACI)</b><br>"
                        });
                }
            }
            else
            {
                await DialogModalService.OpenAsync("Validación de Datos", ds =>
                    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="">
                        <RadzenAlert Title="Error" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Size="AlertSize.Small" Shade="Shade.Darker" ShowIcon="true" AllowClose="true"
                                     Visible="true" Class="rz-border-radius-1">
                                     El Correo Electrónico Personal y/o CURP ya están registrados por lo que NO puede volverse a registrar con estos datos.
                        </RadzenAlert>
                    </RadzenStack>,
                    new DialogOptions()
                    {
                        CloseDialogOnOverlayClick = true,
                        CloseDialogOnEsc = true,
                        Width = "500px",
                        Height = "Auto",
                        Resizable = true,
                        ShowTitle = true,
                        ShowClose = true,
                        Draggable = true,
                        CssClass = "custom-dialog-class",
                        WrapperCssClass = "custom-dialog-wrapper-class"
                    });
            }
        }
        catch (HttpRequestException e)
        {
            await JSRuntime.InvokeAsync<object>("alert", e.Message);
        }
        finally
        {
            busyLoading = false;
        }
    }
}

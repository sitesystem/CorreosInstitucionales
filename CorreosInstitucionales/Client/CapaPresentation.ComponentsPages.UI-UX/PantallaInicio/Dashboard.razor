@using CorreosInstitucionales.Shared

@inject REstadisticasService estadisticas

@if ((!cargado))
{
    <div class="col text-center">
        <img src="logo_saci.png" class="loading_img" />
        <br />
        Cargando...
    </div>

}

<RadzenCard>
    <RadzenFieldset Visible="cargado" AllowCollapse="false" ExpandTitle="Seguimiento de Solicitud" CollapseTitle="Seguimiento de Solicitud" ExpandAriaLabel="" CollapseAriaLabel="" class="rz-border-base-500 rz-border-radius-1 rz-shadow-3 ">
        <HeaderTemplate>
            <RadzenIcon Icon="query_stats" IconColor="@Colors.Secondary" />&ensp;<b style="font-variant: small-caps;">Estádisticas</b>
        </HeaderTemplate>

        <ChildContent>
            <div class="row my-3">
                <div class="col-3">
                    <div class="alert alert-info">
                        La selección de fechas todavía no funciona :3
                    </div>
                </div>

                <div class="col-3">
                    <strong>Inicio</strong>
                    <InputDate @bind-Value="@inicio" @onchange="OnValidar" class="form-control" />
                </div>

                <div class="col-3">
                    <strong>Fin</strong>
                    <InputDate @bind-Value="@fin" @onchange="OnValidar" class="form-control" />
                </div>

                <div class="col-3">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" Class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);">
                        <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                        <RadzenLabel Text="Show Data Labels" Component="dataLabels" />
                    </RadzenStack>
                </div>
            </div>

            <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Normal" Wrap="FlexWrap.NoWrap">
                <RadzenCard class="p-1 rz-background-color-base-200 rz-color-black rz-text-align-center">
                    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                        
                        <h5 class="pt-1">Ciclo de vida de tickets por mes</h5>

                        <RadzenChart>
                            <RadzenDonutSeries Data="@estado_solicitudes" CategoryProperty="Text" ValueProperty="Value" Title="Total" TotalAngle="360" StartAngle="180">
                                <ChildContent>
                                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                </ChildContent>

                                <TitleTemplate>
                                    <div class="rz-donut-content">
                                        Estados
                                    </div>
                                </TitleTemplate>

                            </RadzenDonutSeries>
                        </RadzenChart>


                    </RadzenRow>
                </RadzenCard>

                <RadzenCard class="p-1 rz-background-color-base-200 rz-color-black rz-text-align-center">
                    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                        
                        <h5 class="pt-1">Número de tickets por día</h5>
                        <RadzenChart>

                            <RadzenColumnSeries Data="@solicitudes_diarias" CategoryProperty="Text" Title="Solicitudes" ValueProperty="Value">
                                <RadzenSeriesDataLabels Visible="@showDataLabels" />
                            </RadzenColumnSeries>
                            
                            <RadzenColumnOptions Radius="2" />
                            
                            <RadzenValueAxis>
                                <RadzenGridLines Visible="true" />
                                <RadzenAxisTitle Text="Solicitudes" />
                            </RadzenValueAxis>
                        </RadzenChart>
                    </RadzenRow>
                </RadzenCard>


                <RadzenCard>
                    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" style="height: 30vh; width: 25vw;">
                        
                        <h5 class="pt-1">Encuestas de satisfacción</h5>
                        <RadzenChart>
                            <RadzenPieSeries Data="@encuesta_calidad" Title="Total" CategoryProperty="Text" ValueProperty="Value">
                                <RadzenSeriesDataLabels Visible="@showDataLabels" />
                            </RadzenPieSeries>
                        </RadzenChart>

                    </RadzenRow>
                </RadzenCard>
            </RadzenStack>
            <br />
            <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Normal" Wrap="FlexWrap.NoWrap">
                <RadzenCard class="p-1 rz-background-color-base-200 rz-color-black rz-text-align-center" style="height: 60vh; width: 70vw;">
                    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" style="height: 60vh; width: 70vw;">
                        <div Class="rz-p-0 rz-p-md-12">
                            
                            <h4>Volumen de tickets atendidos y pendientes</h4>
                            <RadzenChart Style="width: 65vw; height:vh;">
                                
                                <RadzenStackedColumnSeries Data="@volumen_pendientes" CategoryProperty="Text" Title="Pendientes" ValueProperty="Value" RenderingOrder="1">
                                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                </RadzenStackedColumnSeries>

                                <RadzenStackedColumnSeries Data="@volumen_proceso" CategoryProperty="Text" Title="En Proceso" LineType="LineType.Dashed" ValueProperty="Value">
                                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                </RadzenStackedColumnSeries>


                                <RadzenStackedColumnSeries Data="@volumen_atendidos" CategoryProperty="Text" Title="Atendidas" LineType="LineType.Dashed" ValueProperty="Value">
                                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                </RadzenStackedColumnSeries>

                                <RadzenStackedColumnSeries Data="@volumen_cancelados" CategoryProperty="Text" Title="Canceladas" LineType="LineType.Dashed" ValueProperty="Value">
                                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                </RadzenStackedColumnSeries>

                                <RadzenCategoryAxis Padding="20"/>
                                <RadzenValueAxis>
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="Tickets" />
                                </RadzenValueAxis>
                            </RadzenChart>
                        </div>
                    </RadzenRow>
                </RadzenCard>
            </RadzenStack>
        </ChildContent>
    </RadzenFieldset>
</RadzenCard>


@code
{
    //Gráfica de area
    bool showDataLabels = true;
    bool cargado = false;


    DateTime inicio = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime fin    = DateTime.Now;

    List<IntDataItem> estado_solicitudes = new();
    List<IntDataItem> solicitudes_diarias = new();
    List<IntDataItem> encuesta_calidad = new();

    List<IntDataItem> volumen_pendientes = new();
    List<IntDataItem> volumen_proceso = new();
    List<IntDataItem> volumen_atendidos = new();
    List<IntDataItem> volumen_cancelados = new();


    public async Task CargarEstadisticas()
    {
        Response<List<IntDataItem>>? response = await estadisticas.GetStatByName("progreso", inicio, fin);

        if (response is not null && response.Data is not null)
        {
            estado_solicitudes = response.Data;
        }

        response = await estadisticas.GetStatByName("diarias", inicio, fin);

        if (response is not null && response.Data is not null)
        {
            solicitudes_diarias = response.Data;
        }

        response = await estadisticas.GetStatByName("calidad", inicio, fin);

        if (response is not null && response.Data is not null)
        {
            encuesta_calidad = response.Data;
        }

        Response<Dictionary<string, List<IntDataItem>>>? volumen_req = await estadisticas.GetDictionaryStatsByName("volumen", inicio, fin);

        if (volumen_req is not null && volumen_req.Data is not null)
        {
            volumen_pendientes  = volumen_req.Data["pendientes"];
            volumen_proceso     = volumen_req.Data["proceso"];
            volumen_atendidos   = volumen_req.Data["atendidos"];
            volumen_cancelados  = volumen_req.Data["cancelados"];
        }

        cargado = true;
        StateHasChanged();
    }

    protected async Task OnValidar()
    {
        if(fin<=inicio)
        {
            fin = inicio.AddMonths(-1);
        }

        await CargarEstadisticas();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarEstadisticas();
        }
    }
}

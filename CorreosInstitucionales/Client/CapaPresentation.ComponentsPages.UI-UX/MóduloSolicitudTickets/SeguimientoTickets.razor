@page "/SeguimientoSolicitudesTickets"

@attribute [Authorize(Policy = "[Rol] Usuario Solicitante")]

<PageTitle>SACI | Seguimiento de Solicitudes-Tickets</PageTitle>

<style type="text/css">
    .circle-border {
        align-items: center;
        justify-content: center;
        display: flex;
        color: green;
        width: 60px;
        height: 60px;
        border: 5px solid rgb(215,215,215);
        border-radius: 50%;
    }
</style>

<RadzenCard Variant="Variant.Filled" Class="mb-3">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Start" Wrap="FlexWrap.NoWrap" Gap="20px" class="">
        <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-hourglass-split" viewBox="0 0 16 16">
            <path d="M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2h-7zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48V8.35zm1 0v3.17c2.134.181 3 1.48 3 1.48a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351z" />
        </svg>
        <RadzenText TextStyle="TextStyle.H3" class="rz-color-base-800">Seguimiento de Ticket's</RadzenText>
    </RadzenStack>
</RadzenCard>

@if (oSolicitudesTickets is not null && oSolicitudesTickets.Data != null)
{
    <AuthorizeView>
        <Authorized>
            @* <p>Autorizado</p> *@
            <RadzenDataGrid @ref="oSolicitudesTicketsRef" Data="@oSolicitudesTickets.Data" @bind-Value="@selectedItems" TItem="RequestDTO_Solicitud" Density="@Density"
                            AllowFiltering="true" AllowColumnResize="true" AllowColumnReorder="true" AllowAlternatingRows="true" AllowSorting="true" AllowColumnPicking="true"
                            AllowPaging="true" PageSize="10" PagerPosition="PagerPosition.TopAndBottom" PagerHorizontalAlign="HorizontalAlign.Justify" PagerAlwaysVisible="true"
                            PageSizeOptions="@pageSizeOptions" ShowPagingSummary="true" PagingSummaryFormat="Displaying page {0} of {1} <b>(total {2} records)</b>" Page="@OnPage"
                            AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true" AllowVirtualization="true"
                            FilterMode="FilterMode.Advanced" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                            ColumnWidth="200px" SelectionMode="DataGridSelectionMode.Single">
                <HeaderTemplate>
                    <RadzenSelectBar @bind-Value="@Density" TextProperty="Text" ValueProperty="Value"
                                     Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="# TICKET" Property="IdSolicitudTicket"
                                          Filterable="true" Frozen="true" Reorderable="true" Resizable="false" Sortable="true" TextAlign="TextAlign.Center" Width="60px" />
                    <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Motivo / Incidencia de la Solicitud" Property="SolIdTipoSolicitudNavigation.TiposolDescripcion"
                                          Filterable="true" Frozen="true" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Left" Width="150px" />
                    <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Observaciones" Property="SolObservacionesSolicitud"
                                          Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Left" Width="150px" />
                    <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Validación de Datos" Property="SolValidacionDatos"
                                          Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="80px">
                        <Template Context="data">
                            @* <RadzenImage Path="@data.Photo" class="rz-gravatar" AlternateText="@(data.FirstName + " " + data.LastName)" /> *@
                            <RadzenCheckBox Value="@(data.SolValidacionDatos)" Name="dataValid" TriState="false" Disabled="false" ReadOnly="true" />
                            <RadzenLabel Text="@($@"{(data.SolValidacionDatos ? "Válidos" : "Sin Validar")}")" Component="dataValid" Style="margin-left: 5px; vertical-align: middle;" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Estado" Property="SolIdEstadoSolicitudNavigation.EdosolNombreEstado"
                                          Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" Width="80px">
                        <Template Context="data">
                            <RadzenBadge BadgeStyle="BadgeStyle.Info" IsPill="false" Shade="Shade.Light" Variant="Variant.Filled">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem" Style="padding: 0 0.25rem 0 0; text-transform: none;">
                                    <RadzenIcon Icon="check" /> @data.SolIdEstadoSolicitudNavigation?.EdosolNombreEstado
                                </RadzenStack>
                            </RadzenBadge>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Fecha / Hora de Creación" Property="SolFechaHoraCreacion"
                                          Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Center" FormatString="{0:d}" Width="100px" />
                    <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Encuesta de Calidad" Property="SolEncuestaCalidadCalificacion"
                                          Filterable="true" Frozen="false" Reorderable="true" Resizable="true" Sortable="true" TextAlign="TextAlign.Justify" Width="100px">
                        <Template Context="data">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="mb-0">@data.SolEncuestaCalidadComentarios</RadzenText>
                            <RadzenText TextStyle="TextStyle.Caption">@data.SolFechaHoraEncuesta</RadzenText>
                        </Template>
                    </RadzenDataGridColumn>
                    @* <td>@item.SolEncuestaCalidadCalificacion</td> *@
                </Columns>
            </RadzenDataGrid>
        </Authorized>
        <NotAuthorized>
            <p>No Autorizado</p>
        </NotAuthorized>
        <Authorizing>
            <p>Autorizando..</p>
        </Authorizing>
    </AuthorizeView>
}
else
{
    <LoadingComponent />
}

@code
{
    @*///////////////////////////////////////////////  INICIALIZAR OBJETOS Y OBTENER DATA ASYNC  ///////////////////////////////////////////////*@
    private Response<List<RequestDTO_Solicitud>>? oSolicitudesTickets = new();
    private RadzenDataGrid<RequestDTO_Solicitud>? oSolicitudesTicketsRef = new();
    IList<RequestDTO_Solicitud> selectedItems;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };
    Density Density = Density.Default;

    protected override async Task OnInitializedAsync()
    {
        var authState = await servicioAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            int idUsuario = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == "ID")?.Value);

            oSolicitudesTickets = await servicioSolicitud.GetDataByIdUsuarioAsync(idUsuario);
            selectedItems = new List<RequestDTO_Solicitud>() { oSolicitudesTickets.Data.FirstOrDefault() };
        }
    }

    async Task OnPage(PagerEventArgs args)
    {
        //
    }
}

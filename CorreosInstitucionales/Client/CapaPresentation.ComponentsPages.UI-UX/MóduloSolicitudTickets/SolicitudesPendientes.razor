@page "/SolicitudesPendientes"
@attribute [Authorize(Policy = "[Rol] Administrador")]
@inject IJSRuntime JsRuntime

<PageTitle>@Title</PageTitle>
<script src="js/descargar.js?v=1.0.0.7"></script>

<div class="p-4 rounded-1 bg-white shadow">
    <h1>@Title</h1>

    <div class="row my-4">
        <div class="offset-10 col-2">
            @if(selectedItems.Count>0)
            {
                <button class="btn btn-primary form-control mb-3" @onclick="Descargar">
                    <RadzenIcon Icon="get_app"></RadzenIcon>
                    Exportar
                </button>
                <div>
                    <InputCheckbox @bind-Value="exportar_zip"></InputCheckbox> Generar Archivo Zip
                </div>
            }
            
            @if(!string.IsNullOrEmpty(link))
            {
                <br/>
                <a href="@link">Archivo de Exportación</a>
            }
        </div>
    </div>

    @if (!cargado)
    {
        <div class="row my-4">
            <div class="col text-center">
                <img src="logo_saci.png" class="loading_img" />
                <br />
                Trabajando...
            </div>
        </div>
    }

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@items" TItem="RequestDTO_Solicitud"
                    Visible=@cargado
                    SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@selectedItems>
        <Columns>
            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Property="IdSolicitudTicket" Filterable="true" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Tipo" Filterable="true" TextAlign="TextAlign.Start">
                <Template Context="item">
                    @item.SolIdTipoSolicitudNavigation!.TiposolDescripcion
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Solicitante" Filterable="false" TextAlign="TextAlign.Start">
                <Template Context="item">
                    @if (item.SolIdEstadoSolicitud != 6)
                    {
                        <text>
                            @item.SolIdUsuarioNavigation!.UsuPrimerApellido
                            @item.SolIdUsuarioNavigation!.UsuSegundoApellido
                            @item.SolIdUsuarioNavigation!.UsuNombre
                        </text>
                    }
                    else
                    {
                        <del>
                            @item.SolIdUsuarioNavigation!.UsuPrimerApellido
                            @item.SolIdUsuarioNavigation!.UsuSegundoApellido
                            @item.SolIdUsuarioNavigation!.UsuNombre
                        </del>
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestDTO_Solicitud" Title="Adjuntos" Filterable="false" TextAlign="TextAlign.Start">
                <Template Context="item">
                    <ul>
                        @if (!string.IsNullOrEmpty(item.SolCapturaCuentaBloqueada))
                        {
                            <li>
                                Captura de pantalla de Cuenta Bloqueada
                                <a  href="@GenerarURLAdjunto(item, item.SolCapturaCuentaBloqueada)"
                                   download="@GenerarNombreAdjunto(item, item.SolCapturaCuentaBloqueada, "CAPTURA_CUENTA_BLOQUEADA")">
                                    Descargar
                                </a>
                            </li>
                        }

                        @if(!string.IsNullOrEmpty(item.SolCapturaError ))
                        {
                            <li>
                                Captura de pantalla de Error
                                <a href="@GenerarURLAdjunto(item, item.SolCapturaError)"
                                   download="@GenerarNombreAdjunto(item, item.SolCapturaError, "CAPTURA_ERROR")">
                                    Descargar
                                </a>
                            </li>
                        }

                        @if (!string.IsNullOrEmpty(item.SolCapturaEscaneoAntivirus))
                        {
                            <li>
                                Captura de pantalla de Escaneo de Antivirus
                                <a href="@GenerarURLAdjunto(item, item.SolCapturaEscaneoAntivirus)"
                                   download="@GenerarNombreAdjunto(item, item.SolCapturaEscaneoAntivirus, "CAPTURA_ESCANEO_ANTIVIRUS")">
                                    Descargar
                                </a>
                            </li>
                        }
                    </ul>
                    
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
</div>

<pre>@debug</pre>

@code{
    private string Title = "Solicitudes Pendientes";

    private bool cargado { get; set; } = false;
    private bool generando = false;
    private bool exportar_zip = false;

    private string link = string.Empty;

    private List<RequestDTO_Solicitud> items = new List<RequestDTO_Solicitud>();
    private IList<RequestDTO_Solicitud> selectedItems = new List<RequestDTO_Solicitud>();

    private string debug = string.Empty;

    private string GenerarURLAdjunto(RequestDTO_Solicitud solicitud, string archivo)
    {
        return $"Repositorio/Solicitudes-Tickets/{solicitud.IdSolicitudTicket}/{solicitud.IdSolicitudTicket}_{archivo}";
    }

    private string GenerarNombreAdjunto(RequestDTO_Solicitud solicitud, string archivo, string tipo ="ARCHIVO")
    {
        return $"{solicitud.SolIdUsuarioNavigation!.UsuCurp}_{tipo}{Path.GetExtension(archivo)}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarLista();

            cargado = true;
            StateHasChanged();
        }
    }

    private async Task CargarLista(int? selecccionar_id = null)
    {
        Response<List<RequestDTO_Solicitud>>? request = await servicioSolicitud.GetAllDataByProgressAsync(1);

        if(request is not null && request.Data is not null)
        {
            items = request.Data;
        }

        if (selecccionar_id is not null)
        {
            selectedItems = items.Where(i => (i.IdSolicitudTicket == selecccionar_id)).ToList();
        }
    }

    private async void Descargar()
    {
        cargado = false;
        //StateHasChanged();

        List<int> selected_ids = selectedItems.Select(st => st.IdSolicitudTicket).ToList();

        Response<List<string>>? oResponse = await servicioArchivos.NewFileFromSelection(exportar_zip?"zip":"xlsx", "pendientes", selected_ids);

        if(oResponse is not null && oResponse.Data is not null)
        {
            foreach(string url in oResponse.Data)
            {
                await JSRuntime.InvokeVoidAsync("Descargar", url);
            }
        }
        
        cargado = true;
        StateHasChanged();
    }
}
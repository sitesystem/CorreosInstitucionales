@page "/catalogos/debug"
@using System.Reflection
@using System.ComponentModel.DataAnnotations

<h3>DebugCatalogos</h3>
<pre>
    @foreach (PropertyInfo prop in dummy.GetType().GetProperties())
    {
        @Render(prop)
    }
</pre>

@code 
{
    RequestDTO_Usuario dummy = new RequestDTO_Usuario();

    public string Render(PropertyInfo p)
    {
        return (new UIControl(p)).ToString();
    }

    private enum ControlType: int
    {
        DISCARD = 0,
        BOOL,
        DATE,
        STRING,
        NUMBER
    }

    private class UIControl
    {
        public ControlType  Control     { get; private set; }
        public string       Name        { get; private set; }
        public bool         IsNullable  { get; private set; }
        public bool         IsRequired  { get; private set; }
        public bool         IsKey       { get; private set; }

        public UIControl(PropertyInfo p)
        {
            Type? ttype = Nullable.GetUnderlyingType(p.PropertyType);
            Type rtype  = ttype ?? p.PropertyType;

            this.Control    = ControlType.DISCARD;
            this.Name       = p.Name;
            this.IsNullable = ttype is not null;
            this.IsRequired = p.GetCustomAttribute<RequiredAttribute>() is not null;
            this.IsKey      = p.GetCustomAttribute<KeyAttribute>() is not null;

            Dictionary<Type, ControlType> mappings = new Dictionary<Type, ControlType>()
            {
                {typeof(bool)       ,ControlType.BOOL   },
                {typeof(DateTime)   ,ControlType.DATE   },
                {typeof(string)     ,ControlType.STRING },
                {typeof(Int16)      ,ControlType.NUMBER },
                {typeof(Int32)      ,ControlType.NUMBER },
                {typeof(Int64)      ,ControlType.NUMBER },
                {typeof(UInt16)     ,ControlType.NUMBER },
                {typeof(UInt32)     ,ControlType.NUMBER },
                {typeof(UInt64)     ,ControlType.NUMBER },
                {typeof(UInt128)    ,ControlType.NUMBER }
            };

            if (mappings.ContainsKey(rtype))
            {
                this.Control = mappings[rtype];
            }
        }

        public override string ToString()
        {
            if(this.Control == ControlType.DISCARD)
            {
                return string.Empty;
            }

            string tpl_content = @"<div class=""col-6 mb-2"">
                <span class=""fw-bold"">{0}{1}</span>
                {2}
                <ValidationMessage For=""()=>registro.{0}""></ValidationMessage>
            </div>"+Environment.NewLine;

            if(this.IsKey || this.IsNullable)
            {
                return string.Format(tpl_content, this.Name, string.Empty, this.IsNullable ? "-NULLABLE" : "-KEY(ID) ATTR-");
            }

            string tpl_input = @"<{0} {1} class=""form-control{2}""/>";


            string tag = "InputText";
            string css = string.Empty;
            string required = string.Empty;

            string code_bind = @"@bind-Value=""@registro.{0}""";

            if (this.IsRequired)
            {
                required = "<strong class=\"red\" title=\"requerido\">*</strong>";
                css = " required";
            }

            switch (this.Control)
            {
                case ControlType.BOOL:  tag = "InputCheckbox";  break;
                case ControlType.DATE:  tag = "InputDate";      break;
                case ControlType.NUMBER:tag = "InputNumber";    break;
            }

            /*
            if(this.IsNullable)
            {
                code_bind = @"@bind-Value:get=""@registro.{0}"" @bind-Value:set=""(value) => {{ @registro.{0} = value; }}""";
            }
            */

            code_bind = string.Format(code_bind, this.Name);
            
            string code_input = string.Format(tpl_input, tag, code_bind, css);

            return string.Format(tpl_content, this.Name, required, code_input);
        }
    }
}

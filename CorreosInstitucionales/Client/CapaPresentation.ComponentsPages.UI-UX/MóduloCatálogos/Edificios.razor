@page "/catalogo/edificios"

@attribute [Authorize(Policy = "[Rol] Ambos")]

@inject DialogService DialogService

<PageTitle>@Title</PageTitle>

    <div class="p-4 rounded-1 bg-white shadow">
        <h1>@Title</h1>

    <div class="row my-3">
        @if (cargado && puede_agregar)
        {

            <div class="offset-10 col-2">
                <button type="button" class="btn btn-primary form-control" @onclick="Agregar">
                    Agregar...
                </button>
            </div>
        }

        @if ((!cargado))
        {
            <div class="col text-center">
                <img src="logo_saci.png" class="loading_img" />
                <br />
                Cargando...
            </div>

        }
    </div>

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@items" TItem="RequestViewModel_Edificio" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedItems
                    Visible=@cargado>
        <Columns>
            <RadzenDataGridColumn TItem="RequestViewModel_Edificio" Property="IdEdificio" Title="ID" Filterable="false" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />

            <RadzenDataGridColumn TItem="RequestViewModel_Edificio" Title="Nombre" Filterable="false" TextAlign="TextAlign.Start">
                <Template Context="item">
                    @if (item.EdiStatus)
                    {
                        <text>
                            @item.EdiNombreAlias
                            (@item.EdiNombreOficial)
                        </text>
                    }
                    else
                    {
                        <del>
                            @item.EdiNombreAlias
                            (@item.EdiNombreOficial)
                        </del>
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RequestViewModel_Edificio" Context="item" 
                Filterable="false" Sortable="false"
                TextAlign="TextAlign.Right"
                Visible=@puede_editar
            >
                <Template Context="item">
                    <RadzenButton title="Editar..."
                                  Icon="edit"
                                  ButtonStyle="ButtonStyle.Info"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Click="@(async ()=> await Editar(item))" @onclick:stopPropagation="true">
                    </RadzenButton>

                    <RadzenButton title="Deshabilitar"
                                  Icon="delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Visible="item.EdiStatus.Equals(true)"
                                  Click="@(async ()=> await CambiarStatus(item, false))" @onclick:stopPropagation="true">
                    </RadzenButton>

                    <RadzenButton title="Habilitar"
                                  ButtonStyle="ButtonStyle.Success"
                                  Icon="autorenew"
                                  Variant="Variant.Filled"
                                  Size="ButtonSize.Medium"
                                  Visible="item.EdiStatus.Equals(false)"
                                  Click="@(async ()=> await CambiarStatus(item, true))" @onclick:stopPropagation="true">
                    </RadzenButton>

                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

</div>

@code
{
    private string Title = "Catálogo de Edificios";
    private bool cargado { get; set; } = false;

    private bool puede_editar { get; set; } = true;
    private bool puede_agregar { get; set; } = false;

    private List<RequestViewModel_Edificio> items = new List<RequestViewModel_Edificio>();
    private IList<RequestViewModel_Edificio> selectedItems = new List<RequestViewModel_Edificio>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarLista();

            cargado = true;
            StateHasChanged();
        }
    }

    private async Task CargarLista(int? selecccionar_id = null)
    {
        items = await WebUtils.ListByStatusAsync(servicioEdificio, false);

        if (selecccionar_id is not null)
        {
            selectedItems = items.Where(i => (i.IdEdificio == selecccionar_id)).ToList();
        }
    }

    private async Task<RequestViewModel_Edificio?> MostrarFormulario(RequestViewModel_Edificio registro)
    {
        return await DialogService.OpenAsync<EdificioEditor>
                (
                    "Actualizar Datos",
                    new Dictionary<string, object>()
                        {
                        {"registro", registro}
                        },
                    new DialogOptions()
                        {
                            ShowClose = false,
                            Width = "50%",
                            CssClass = "dialog_simple"
                        }
                );
    }

    private void MensajeCarga()
    {
        DialogService.OpenAsync<Carga>(
                "Cargando...",
                new Dictionary<string, object>(),
                new DialogOptions() { ShowClose = false, Width = "64px" }
            );
    }

    private async Task Agregar()
    {
        RequestViewModel_Edificio registro = new();

        RequestViewModel_Edificio? result = await MostrarFormulario(registro);

        if (result is not null)
        {
            MensajeCarga();

            HttpResponseMessage response = await servicioEdificio.AddDataAsync(registro);
            if (response.IsSuccessStatusCode)
            {
                await CargarLista(result.IdEdificio);
            }

            DialogService.Close();
        }
    }// AGREGAR

    private async Task Editar(RequestViewModel_Edificio item)
    {
        string json = JsonSerializer.Serialize(item);
        RequestViewModel_Edificio? registro = JsonSerializer.Deserialize<RequestViewModel_Edificio>(json);

        if (registro is not null)
        {
            RequestViewModel_Edificio? result = await MostrarFormulario(registro);

            if (result is not null)
            {
                HttpResponseMessage response = await servicioEdificio.EditDataAsync(registro);
                if (response.IsSuccessStatusCode)
                {
                    await CargarLista(item.IdEdificio);
                }
            }
        }
    }//EDITAR

    private async Task CambiarStatus(RequestViewModel_Edificio item, bool status)
    {
        string des = status ? "" : "des";

        bool result = await DialogService.OpenAsync<ConfirmarDlg>
            (
                "Confirmar",
                new Dictionary<string, object>()
                            {
                    {"mensaje" , $"¿Desea {des}habilitar el registro de {item.EdiNombreAlias} ({item.EdiNombreOficial})?" }
                            },
                new DialogOptions() { ShowClose = false }
            );

        if (result)
        {
            HttpResponseMessage response = await servicioUsuario.EnableDisableDataByIdAsync(item.IdEdificio, status);
            if (response.IsSuccessStatusCode)
            {
                await CargarLista(item.IdEdificio);
            }
        }
    }//CAMBIAR STATUS
}

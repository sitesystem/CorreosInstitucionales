@page "/"
@* @page "/{ErrorMessage}" *@

@attribute [AllowAnonymous]

<PageTitle>SACI | Inicio de Sesión</PageTitle>

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims;

@using CorreosInstitucionales.Client.CapaPresentation.ComponentsPages.UI_UX.Login
@using CorreosInstitucionales.Shared.CapaEntities.Request
@using CorreosInstitucionales.Shared.CapaEntities.Response
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.tbUsuarios
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.toolSendEmail

@layout LoginLayout

@inject ILoginServices loginService
@inject IUsuarioService servicioUsuario

<RadzenComponents />

<AuthorizeView>
    <Authorized>
        @{
            if (context.User.Identity?.IsAuthenticated == true)
                navigationManager.NavigateTo("/Index");
        }
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

<style type="text/css">
    .e-alert-dialog .e-footer-content {
        display: flex;
        justify-content: center;
    }

    #predefinedDialogCustomization {
        margin: 25px 0 0 15px;
    }

        #predefinedDialogCustomization .status {
            margin-top: 20px;
            font-size: 16px;
            display: block;
        }

        #predefinedDialogCustomization .e-btn {
            margin-right: 5px;
        }

    .e-dlg-content .Table {
        width: 100%;
        height: 100%;
    }

    .fileEdit {
        display: flex;
        justify-content: space-evenly;
        padding: 20px 0 0 50px;
    }

    .circle-border {
        align-items: center;
        justify-content: center;
        display: flex;
        color: green;
        width: 60px;
        height: 60px;
        border: 5px solid rgb(215,215,215);
        border-radius: 50%;
    }

    .data {
        display: flex;
        justify-content: center;
        /*padding-left: 32px;*/
    }

    .confirm {
        display: flex;
        justify-content: center;
        padding-left: 55px;
        padding-right: 20px;
    }

    button.e-btn.dlgbtn {
        margin-top: 10px;
    }
</style>

<!-- Encabezado de Página (Header Fixed-Top) -->
<nav class="navbar bg-dark bg-body-tertiary fixed-top" style="border-bottom: 10px solid #3d0000;" data-bs-theme="dark">
    <div class="container">
        <img src="/ipn.png" alt="Logo" width="30" height="24" class="d-inline-block align-text-top">
        <a class="navbar-brand text-white text-wrap" style="font-variant: small-caps; text-decoration:none; font-size:2vw;">
            SACI (Sistema para Atención de Correos Institucionales IPN)
        </a>
        <img src="/ipn.png" alt="Logo" width="30" height="24" class="rounded float-end">
    </div>
</nav>
<hr class="d-block d-sm-block d-md-none d-lg-none d-xl-none d-xxl-none rz-m-10" />
<!-- Contenido Principal -->
<div class="container">
    <div class="row align-items-center min-vh-100 gap-0">

        <!-- Formulario de login -->
        <div class="col-md-6 order-1">
            <div class="card col-md-8 offset-md-2 mb-2">
                <div class="card-header pb-0">
                    <h5 style="font-variant: small-caps;">¡Bienvenid@@!</h5>
                </div>
                <div class="card-body">

                    <RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client" @bind-SelectedIndex="@selectedIndex" Change=@(args => OnChange(args))>
                        <Tabs>
                            <RadzenTabsItem Text="Iniciar Sesión" Icon="person" IconColor="@Colors.Base900">
                                <EditForm Model="@login" OnValidSubmit="@IniciarSesion" OnInvalidSubmit="@OnInvalidSubmit">

                                    <DataAnnotationsValidator />

                                    <RadzenFormField Text="Correo Electrónico Personal"
                                                     Placeholder="Email"
                                                     AllowClear="true"
                                                     Variant="Variant.Outlined"
                                                     Class="w-100 mt-3"
                                                     MaxLength="100"
                                                     Disabled="false">
                                        <Start>
                                            <RadzenIcon Icon="email" />
                                        </Start>
                                        <ChildContent>
                                            <RadzenTextBox @bind-Value="@login.UsuCorreoPersonal" />
                                        </ChildContent>
                                        <Helper>
                                            @* <RadzenText TextStyle="Radzen.Blazor.TextStyle.Caption">* required</RadzenText> *@
                                        </Helper>
                                    </RadzenFormField>
                                    <ValidationMessage For="@(() => login.UsuCorreoPersonal)" />

                                    <RadzenFormField Text="Contraseña"
                                                     Placeholder="Password"
                                                     AllowClear="true"
                                                     Variant="Variant.Outlined"
                                                     Class="w-100 mt-5"
                                                     MaxLength="50"
                                                     Disabled="false">
                                        <Start>
                                            <RadzenIcon Icon="vpn_key" />
                                        </Start>
                                        <ChildContent>
                                            <RadzenTextBox @bind-Value="@login.UsuContraseña" Visible="@(!password)" />
                                            <RadzenPassword @bind-Value="@login.UsuContraseña" Visible="@password" />
                                        </ChildContent>
                                        <End>
                                            <RadzenButton Icon="@(password ? "visibility" : "visibility_off")"
                                                          Click="TogglePassword"
                                                          Variant="Variant.Text"
                                                          Size="ButtonSize.Small"
                                                          ButtonStyle="Radzen.ButtonStyle.Secondary"
                                                          Shade="Shade.Dark" />
                                        </End>
                                        <Helper>
                                            @* <RadzenText TextStyle="Radzen.Blazor.TextStyle.Caption">* required</RadzenText> *@
                                        </Helper>
                                    </RadzenFormField>
                                    <ValidationMessage For="@(() => login.UsuContraseña)" />

                                    @*
                                    <SfTextBox ID="email"
                                               Placeholder="Correo Electrónico Personal"
                                               @bind-Value="@login.UsuCorreoPersonal"
                                               CssClass="mi-sf-textbox mt-5"
                                               Enabled="true"
                                               EnableRtl="false"
                                               FloatLabelType="@FloatLabelType.Auto"
                                               HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "100" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                                               Multiline="false"
                                               Readonly="false"
                                               ShowClearButton="true"
                                               Type="Syncfusion.Blazor.Inputs.InputType.Text"
                                               ValidateOnInput="true" />
                                    <ValidationMessage For="@(() => login.UsuCorreoPersonal)" />

                                    <SfTextBox ID="password"
                                               Placeholder="Contraseña"
                                               @bind-Value="@login.UsuContraseña"
                                               CssClass="mi-sf-textbox mt-5"
                                               Enabled="true"
                                               EnableRtl="false"
                                               FloatLabelType="@FloatLabelType.Auto"
                                               HtmlAttributes="@(new Dictionary<string, object> { { "maxlength", "50" }, { "minlength", "0" }, { "rows", false ? 3 : 1 } } )"
                                               Multiline="false"
                                               Readonly="false"
                                               ShowClearButton="true"
                                               Type="Syncfusion.Blazor.Inputs.InputType.Password"
                                               ValidateOnInput="true" />
                                    <ValidationMessage For="@(() => login.UsuContraseña)" />
                                    *@

                                    <RadzenButton Text="Iniciar Sesión"
                                                  BusyText="Iniciando Sesión ..."
                                                  ButtonStyle="Radzen.ButtonStyle.Secondary"
                                                  ButtonType="Radzen.ButtonType.Submit"
                                                  IsBusy="@busy"
                                                  Icon="login"
                                                  Class="w-100 mt-5 mb-3"
                                                  Shade="Shade.Darker" />
                                </EditForm>
                            </RadzenTabsItem>
                            <RadzenTabsItem Text="Recuperar Contraseña" Icon="lock_reset" IconColor="@Colors.Base900">
                                <EditForm Model="@oRecuperarContraseñaCorreo" OnValidSubmit="@RecuperarContraseña" OnInvalidSubmit="@OnInvalidSubmit">

                                    <DataAnnotationsValidator />

                                    <RadzenFormField Text="Correo Electrónico Personal"
                                                     Placeholder="Email"
                                                     AllowClear="true"
                                                     Variant="Variant.Outlined"
                                                     Class="w-100 mt-3"
                                                     MaxLength="100"
                                                     MinLength="0"
                                                     Disabled="false">
                                        <Start>
                                            <RadzenIcon Icon="email" />
                                        </Start>
                                        <ChildContent>
                                            <RadzenTextBox @bind-Value="@oRecuperarContraseñaCorreo.CorreoElectronicoPersonal" />
                                        </ChildContent>
                                        <Helper>
                                            @* <RadzenText TextStyle="Radzen.Blazor.TextStyle.Caption">* required</RadzenText> *@
                                        </Helper>
                                    </RadzenFormField>

                                    <div class="row">
                                        <div class="col-md-12 mt-5">
                                            <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6LeMdxkpAAAAABQkCp77LSx1K8tDRlmSAYXIU6AL" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                                        </div>
                                        <div class="col-md-12 d-grid gap-2 text-center">
                                            <button type="submit" class="btn btn-success mt-5 mb-3" disabled="@DisablePostButton">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-send-plus-fill" viewBox="0 0 16 16">
                                                    <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 1.59 2.498C8 14 8 13 8 12.5a4.5 4.5 0 0 1 5.026-4.47L15.964.686Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z" />
                                                    <path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0m-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 0 0 1 0v-1h1a.5.5 0 0 0 0-1h-1v-1a.5.5 0 0 0-.5-.5" />
                                                </svg>&nbsp;
                                                <span role="status">@contentRecuperarContraseñaBtn</span>
                                                <span class="spinner-border spinner-border-sm" aria-hidden="true" hidden="@isSpinningHidden"></span>
                                            </button>
                                        </div>
                                    </div>
                                </EditForm>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>

                    <RadzenAlert Variant="Variant.Filled"
                                 AlertStyle="AlertStyle.Danger"
                                 Size="AlertSize.Small"
                                 Shade="Shade.Darker"
                                 ShowIcon="true"
                                 AllowClose="false"
                                 @bind-Visible="@errorMsgVisible"
                                 Title="Error"
                                 class="text-center">
                                 @contentErrorMsg
                    </RadzenAlert>
                </div>
            </div>

            <div class="card col-md-8 offset-md-2 mb-2 pt-3 pb-3">
                <div class="container">
                    <div class="row text-center">
                        <div class="col-md-12">
                            ¿No tienes una cuenta?&nbsp;
                            <button class="btn btn-success btn-sm" @onclick='(() => navigationManager.NavigateTo("/RegistroIndex"))'>
                                Regístrate 
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-up-right" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z" />
                                    <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Carrusel -->
        <div class="col-md-6 order-2">

            <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel" data-bs-touch="true">
                <div class="carousel-indicators">
                    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
                    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
                    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
                    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="3" aria-label="Slide 4"></button>
                </div>
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img src="https://live.staticflickr.com/4016/4533682406_36c07f363d_c.jpg" class="d-block w-100" alt="...">
                        <div class="carousel-caption">
                            <h5>First slide label</h5>
                            <p>Some representative placeholder content for the first slide.</p>
                        </div>
                    </div>
                    <div class="carousel-item">
                        <img src="https://pbs.twimg.com/media/D2Wz_3lX4AAP02j.jpg" class="d-block w-100" alt="...">
                        <div class="carousel-caption">
                            <h5>Second slide label</h5>
                            <p>Some representative placeholder content for the second slide.</p>
                        </div>

                    </div>
                    <div class="carousel-item">
                        <img src="https://s3.amazonaws.com/rytvmx/wpmedia/2022/10/10201207/clases-822x547.jpg" class="d-block w-100" alt="...">
                        <div class="carousel-caption">
                            <h5>Third slide label</h5>
                            <p>Some representative placeholder content for the third slide.</p>
                        </div>

                    </div>
                    <div class="carousel-item">
                        <img src="https://ntcd.mx/uploads/2017/03/21/nota-tecnologia-supera-ipn-expectativas-de-estudiantes-colombianas-del-programa-de-movilidad201721325.jpg" class="d-block w-100" alt="...">
                        <div class="carousel-caption">
                            <h5>Third slide label</h5>
                            <p>Some representative placeholder content for the third slide.</p>
                        </div>
                    </div>
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        </div>
    </div>
</div>
<hr class="d-block d-sm-block d-md-none d-lg-none d-xl-none d-xxl-none rz-m-10" />
<!-- Pie de Página (Footer Fixed-Bottom) -->
<nav class="navbar bg-body-tertiary bg-dark fixed-bottom" data-bs-theme="dark">
    <div class="container text-center">
        <a class="navbar-brand" style="text-decoration:none; font-size:calc(10px + 0.390625vw); color:white;">
            UPIICSA (Desarrollo de Sistemas de Información)
        </a>
        <a class="navbar-brand" style="text-decoration:none; font-size:calc(10px + 0.390625vw); color:white;">
            &copy; 2023 SACI vα 1.0 &ensp;| &nbsp;
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pc-display" viewBox="0 0 16 16">
                <path d="M8 1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1zm1 13.5a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0m2 0a.5.5 0 1 0 1 0 .5.5 0 0 0-1 0M9.5 1a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1zM9 3.5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 0-1h-5a.5.5 0 0 0-.5.5M1.5 2A1.5 1.5 0 0 0 0 3.5v7A1.5 1.5 0 0 0 1.5 12H6v2h-.5a.5.5 0 0 0 0 1H7v-4H1.5a.5.5 0 0 1-.5-.5v-7a.5.5 0 0 1 .5-.5H7V2z" />
            </svg>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-laptop" viewBox="0 0 16 16">
                <path d="M13.5 3a.5.5 0 0 1 .5.5V11H2V3.5a.5.5 0 0 1 .5-.5zm-11-1A1.5 1.5 0 0 0 1 3.5V12h14V3.5A1.5 1.5 0 0 0 13.5 2zM0 12.5h16a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5" />
            </svg>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-tablet" viewBox="0 0 16 16">
                <path d="M12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
            </svg>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-phone" viewBox="0 0 16 16">
                <path d="M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
            </svg>
        </a>
    </div>
</nav>

@code
{
    private RequestDTO_LoginAuth login = new();
    private bool busy;
    public string contentLoginBtn = "Iniciar Sesión";
    private bool errorMsgVisible = false;
    public string contentErrorMsg = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('email').focus()");
    }

    private async Task IniciarSesion()
    {
        try
        {
            busy = true;
            HttpResponseMessage loginResponse = await httpClient.PostAsJsonAsync<RequestDTO_LoginAuth>("/api/LoginAuth/login", login);

            if (loginResponse.IsSuccessStatusCode)
            {
                errorMsgVisible = false;

                await loginService.Login(loginResponse.Content.ReadAsStringAsync().Result);

                navigationManager.NavigateTo("/Index");
            }
            else
            {
                errorMsgVisible = true;
                contentErrorMsg = "Correo y/o Contraseña no son correctos.";
            }
        }
        catch(Exception ex)
        {
            contentErrorMsg = ex.Message;
        }
        finally
        {
            busy = false;
        }
    }

    private void OnInvalidSubmit()
    {
        errorMsgVisible = true;
        contentErrorMsg = "Correo y/o Contraseña no válidos.";
    }

    string passwordValue = "password";
    bool password = true;

    void TogglePassword()
    {
        password = !password;
    }

    public int selectedIndex = 0;

    void OnChange(int index)
    {
        errorMsgVisible = false;
        contentErrorMsg = "";
        ValidReCAPTCHA = false;
        oRecuperarContraseñaCorreo.CorreoElectronicoPersonal = "";
        login.UsuCorreoPersonal = "";
        login.UsuContraseña = "";
    }

    // Captcha
    private ReCAPTCHA reCAPTCHAComponent;
    private bool ValidReCAPTCHA = false;
    // private bool ServerVerificatiing = false;
    private bool DisablePostButton => !ValidReCAPTCHA || string.IsNullOrEmpty(oRecuperarContraseñaCorreo.CorreoElectronicoPersonal) || !isSpinningHidden;

    private void OnSuccess() => ValidReCAPTCHA = true;

    private void OnExpired() => ValidReCAPTCHA = false;

    // Envio de mensaje
    public RecuperarContraseñaCorreo oRecuperarContraseñaCorreo = new();
    public Response<RequestDTO_Usuario>? oRespuesta = new();
    public string contentRecuperarContraseñaBtn = "Recuperar Contraseña";
    public bool isSpinningHidden = true;

    public class RecuperarContraseñaCorreo
    {
        [Required(AllowEmptyStrings = false, ErrorMessage = "Campo requerido.")]
        public string CorreoElectronicoPersonal { get; set; } = null!;
    }

    public async Task RecuperarContraseña()
    {
        if (ValidReCAPTCHA)
        {
            // var response = await reCAPTCHAComponent.GetResponseAsync();

            try
            {
                contentRecuperarContraseñaBtn = "Recuperando Contraseña...";
                isSpinningHidden = false;

                var respuesta = await servicioUsuario.ResetPassword(oRecuperarContraseñaCorreo.CorreoElectronicoPersonal);
                oRespuesta = respuesta.Content.ReadFromJsonAsync<Response<RequestDTO_Usuario>>().Result;

                errorMsgVisible = false;

                if (oRespuesta.Success == 1)
                {
                    await servicioSendEmail.SendEmailAsync(new RequestDTO_SendEmail()
                        {
                            EmailTo = oRecuperarContraseñaCorreo.CorreoElectronicoPersonal,
                            Subject = "SACI RECUPERACIÓN DE CONTRASEÑA",
                            Body = "Estimad@: <b>" + oRespuesta.Data.UsuNombre + " " + oRespuesta.Data.UsuPrimerApellido + " " + oRespuesta.Data.UsuSegundoApellido + "</b><br><br>" +
                                   oRespuesta.Message + "<br><br>" +
                                   "Se le ha asignado Contraseña Temporal para el acceso a SACI que tendrá que cambiar al entrar al sistema." + "<br><br>" +
                                   "Por favor resguarde sus credenciales adecuadamente." + "<br><br>" +
                                   "<b>SACI (Sistema para Atención de Correos Institucionales IPN)</b>"
                        });

                    await DialogModalService.OpenAsync("Alerta", ds =>
                            @<div>
                                <table class="Table text-center">
                                    <tbody style="line-height: 2.0;">
                                        <tr>
                                            <td class="data">
                                                <span class="circle-border"><span class="e-icons e-check" style="font-size: 30px; color: green; font-weight:700;"></span></span>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="data text-success" style="font-size: 25px;">
                                                <b style="font-weight: 500 !important;">¡Recuperación de<br />Contraseña Exitosa!</b>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="data">
                                                <b>@oRespuesta.Data.UsuNombre @oRespuesta.Data.UsuPrimerApellido @oRespuesta.Data.UsuSegundoApellido</b>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="data">
                                                Se generó una Contraseña Temporal enviada a su correo personal.
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>, new Radzen.DialogOptions() {
                                  CloseDialogOnOverlayClick = true,
                                  Width = "Auto", Height = "Auto",
                                  Resizable = true, Draggable = true,
                                  CssClass = "custom-dialog-class",
                                  WrapperCssClass = "custom-dialog-wrapper-class"
                              });

                    OnChange(1);
                }
                else
                {
                    errorMsgVisible = true;
                    contentErrorMsg = oRespuesta.Message;
                }
            }
            catch (HttpRequestException e)
            {
                await JSRuntime.InvokeAsync<object>("alert", e.Message);
                // ServerVerificatiing = false;
                // StateHasChanged();
            }
            finally
            {
                contentRecuperarContraseñaBtn = "Recuperar Contraseña";
                isSpinningHidden = true;
            }
        }
    }

    async Task ShowDialogWithCustomCssClasses()
    {
        await DialogModalService.OpenAsync("Dialog with custom CSS classes", ds =>
            @<div>
                This dialog has custom CSS classes.
            </div>, new Radzen.DialogOptions()
                  {
                      CssClass = "custom-dialog-class",
                      WrapperCssClass = "custom-dialog-wrapper-class"
                  });
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        Console.WriteLine($"{message.Severity} notification");
    }
}

@page "/Registro"

@attribute [AllowAnonymous]

@using CorreosInstitucionales.Shared.CapaEntities.Request
@using CorreosInstitucionales.Shared.CapaEntities.Response
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.catLinks
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.tbUsuarios
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.toolSendEmail

@inject IUsuarioService servicioUsuario
@inject ILinkService servicioLink
@inject ISendEmailService servicioSendEmail

@inject IJSRuntime JSRuntime

<h3 style="margin-top:20px">
    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-briefcase" viewBox="0 0 18 18" style="margin-left: 20px">
        <path d="M6.5 1A1.5 1.5 0 0 0 5 2.5V3H1.5A1.5 1.5 0 0 0 0 4.5v8A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-8A1.5 1.5 0 0 0 14.5 3H11v-.5A1.5 1.5 0 0 0 9.5 1zm0 1h3a.5.5 0 0 1 .5.5V3H6v-.5a.5.5 0 0 1 .5-.5m1.886 6.914L15 7.151V12.5a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5V7.15l6.614 1.764a1.5 1.5 0 0 0 .772 0M1.5 4h13a.5.5 0 0 1 .5.5v1.616L8.129 7.948a.5.5 0 0 1-.258 0L1 6.116V4.5a.5.5 0 0 1 .5-.5" />
    </svg> Registro
</h3>

<EditForm Model="@oUsuario" OnValidSubmit="@Registrar" OnInvalidSubmit="@ScrollToTop">
    <DataAnnotationsValidator/>
    <div class="card border-dark mb-3" style="margin-top:20px">
        <b class="card-header" size="20px">Datos Personales</b>
        <div class="card-body">
            <div class="row">
                <div class="col-xs-4 col-lg-4 col-md-4">
                    <RadzenCard>
                        <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle2">Nombre</RadzenText>
                        <RadzenTextBox @bind-Value="@oUsuario.UsuNombre" class="w-100" aria-label="Default TextBox" />
                    </RadzenCard>
                </div>
                <div class="col-xs-4 col-lg-4 col-md-4">
                    <RadzenCard>
                        <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle2">Primer Apellido</RadzenText>
                        <RadzenTextBox @bind-Value="@oUsuario.UsuPrimerApellido" class="w-100" aria-label="Default TextBox" />
                    </RadzenCard>
                </div>
                <div class="col-xs-4 col-lg-4 col-md-4">
                    <RadzenCard>
                        <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle2">Segundo Apellido</RadzenText>
                        <RadzenTextBox @bind-Value="@oUsuario.UsuSegundoApellido" class="w-100" aria-label="Default TextBox" />
                    </RadzenCard>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <RadzenCard>
                        <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle2">Segundo Apellido</RadzenText>
                        <RadzenTextBox @bind-Value="@oUsuario.UsuNoCelularAnterior" class="w-100" aria-label="Default TextBox" />
                    </RadzenCard>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    <RadzenCard>
                        <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle2">CURP</RadzenText>
                        <RadzenTextBox @bind-Value="@oUsuario.UsuCurp" class="w-100" aria-label="Default TextBox" />
                    </RadzenCard>
                </div>
            </div>
            <div class="row gy-3">
                <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
                    
                </div>
            </div>
            <div></div>
        </div>
    </div>

    <div class="card border-dark mb-3" style="margin-top:20px">
        <b class="card-header" size="20px">Datos laborales</b>
        <div class="card-body">
            <div class="row gy-3">
                <div class="col-xs-4 col-lg-4 col-md-4">
                    <RadzenCard>
                        @* <RadzenNumeric 
                                        TValue="int?"
                                        Min="1936"
                                        Max="@year"
                                        Step="1"
                                        Placeholder="Año de egreso"
                                        Format="####" @bind-Value="@oUsuario.UsuAñoEgreso"
                                        onkeypress="return /^[0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));"
                                        ShowUpDown="false"/>
                        <ValidationMessage For="@(() => oUsuario.UsuAñoEgreso)" /> *@
                            <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle2">Número de empleado</RadzenText>
                        <RadzenTextBox @bind-Value="@oUsuario.UsuNumeroEmpleado" onkeypress="return /^[0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));" class="w-100" aria-label="Default TextBox" />
                          
                    </RadzenCard>
                </div>
                <div class="col-xs-4 col-lg-4 col-md-4">
                    <RadzenCard>
                        <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle2">Número de la extensión del departamento</RadzenText>
                        <RadzenTextBox @bind-Value="@oUsuario.UsuNoExtension" onkeypress="return /^[0-9]+$/.test(String.fromCharCode(event.keyCode || event.which));" class="w-100" aria-label="Default TextBox" />
                    </RadzenCard>
                </div>                    
                <div class="col-xs-4 col-lg-4 col-md-4">
                    <RadzenCard>
                        <RadzenText TextStyle="Radzen.Blazor.TextStyle.Subtitle2">Número de área de departamento</RadzenText>
                        <RadzenNumeric 
                                    TValue="int?"                                    
                                    Placeholder="Número de área"                                    
                                    ShowUpDown="false"
                                    style="width:100%;"/>                        
                    </RadzenCard>
                </div>               
            </div>
        </div>
    </div>


</EditForm>

@code {
    public int year = DateTime.Parse(DateTime.Now.ToString()).Year;
    public Response<object>? oRespuesta = new();
    public RequestDTO_Usuario? oUsuario = new()
        {
            // DATOS ID DEL USUARIO
            IdUsuario = 0,
            UsuIdRol = 2,                           // FK ID del Rol (1 - Administrador, 2 - Usuario Solicitante)
            UsuIdTipoPersonal = 4,                  // FK ID del Tipo de Personal ([1 - Alumno Inscrito], [2 - Alumno Egresado], [3 - Maestria], [4 - Administrativo], [5 - Docente])
            // DATOS PERSONALES
            UsuNombre = "",                         // Nombre del Usuario Solicitante o Administrador
            UsuPrimerApellido = "",                 // Primer Apellido del Usuario Solicitante o Administrador
            UsuSegundoApellido = "",                // Segundo Apellido del Usuario Solicitante o Administrador
            UsuCurp = "",                           // CURP con 18 caracteres como mínimo
            UsuFileNameCurp = "",                   // Nombre del Archivo y extensión .pdf del CURP
            UsuNoCelularAnterior = "0000000000",    // Número de Celular Anterior si llega a cambiar por uno nuevo
            // UsuNoCelularNuevo = "0000000000",       // Número de Celular Nuevo que sería el número de celular actual
            // DATOS ACADÉMICOS
            UsuBoletaAlumno = "0000600000",         // Número de Boleta del Usuario (Alumno Inscrito o Egresado)
            UsuBoletaMaestria = "B000000",          // Número de Boleta del Usuario (Alumno de Maestria)
            UsuIdCarrera = 1,                       // FK ID de la Carrera del Alumno
            UsuSemestre = "1",                      // Semestre que cursa el Alumno Inscrito o de Maestria
            UsuAñoEgreso = 0,                       // Año de Egreso en dado caso
            UsuFileNameComprobanteInscripcion = "", // Nombre del Archivo en .pdf del Comprobante de Inscripcion (Tira de Materias)
            // DATOS LABORALES
            //UsuNumeroEmpleado = "0",                // Número del Empleado del Usuario (Administrador o Docente)
           // UsuIdAreaDepto = 1,                     // FK ID del Área/Departamento del Usuario Empleado
            //UsuNoExtension = "0",                   // Número de Extensión del Empleado
            // DATOS DE LAS CREDENCIALES DE LA CUENTA EN LA APP
            UsuCorreoPersonalCuentaAnterior = "",   // Correo Personal de la Cuenta Anterior
            UsuCorreoPersonalCuentaNueva = "",      // Correo Personal de la Cuenta Nueva o Actual
            UsuContraseña = "",                     // Contraseña en la PLataforma del Usuario Solicitante o Administrador
            UsuRecuperarContraseña = false,         // Contraseña Temporal que se le proporciona al Usuario Solicitante
            // DATOS DEL CORREO INSTITUCIONAL
            UsuCorreoInstitucionalCuenta = "",      // Cuenta Correo Institucional IPN generada por DCyC
            UsuCorreoInstitucionalContraseña = "",  // Contraseña del Correo Institucional IPN Generada por DCyC
            // OTROS DATOS
            // UsuFechaHoraAlta = DateTime.Parse(DateTime.Now.ToString()).Year; // Fecha y Hora de Alta del Usuario
            UsuStatus = true,                       // Usuario (1 - Activo / 0 - Inactivo)
            // DATOS FK NAVIGATION
            UsuIdAreaDeptoNavigation = null,
            UsuIdCarreraNavigation = null,
            UsuIdRolNavigation = null,
            UsuIdTipoPersonalNavigation = null
    };

    public bool BanderaCompararContraseña = true;
    private string contra2 = string.Empty;

    private void CompararCadenas()
    {
        if (string.Equals(oUsuario.UsuContraseña, contra2, StringComparison.Ordinal))
            BanderaCompararContraseña = false;
        else
            BanderaCompararContraseña = true;
    }
    public string Content = "Enviar Registro";
    public bool isSpinningHidden = true;
    private ReCAPTCHA reCAPTCHAComponent;
    private bool ValidReCAPTCHA = false;
    private bool ServerVerificatiing = false;
    private bool DisablePostButton => !ValidReCAPTCHA || BanderaCompararContraseña || !isSpinningHidden;
    private void OnSuccess() => ValidReCAPTCHA = true;
    private void OnExpired() => ValidReCAPTCHA = false;

    public async Task Registrar()
    {
        if (ValidReCAPTCHA)
        {
            try
            {
                Content = "Enviando Registro...";
                isSpinningHidden = false;

                var respuesta = await servicioUsuario.AddDataAsync(oUsuario);
                oRespuesta = respuesta.Content.ReadFromJsonAsync<Response<object>>().Result;
                Console.WriteLine("Estatus    " + oRespuesta.Success + "\n");
                Console.WriteLine("Mensaje    " + oRespuesta.Message + "\n");
                Console.WriteLine("Datos    " + oRespuesta.Data + "\n");
                if (oRespuesta.Success == 1)
                    await servicioSendEmail.SendEmailAsync(new RequestDTO_SendEmail()
                        {
                            EmailTo = oUsuario.UsuCorreoPersonalCuentaNueva,
                            Subject = "REGISTRO EN SACI",
                            Body = "Estimad@: " + oUsuario.UsuNombre + " " + oUsuario.UsuPrimerApellido + " " + oUsuario.UsuSegundoApellido + "<br><br>" +
                                               "Registro exitoso en el <b>Sistema para Atención de Correos Institucionales IPN (SACI)</b><br>"
                        });
                else
                    await servicioSendEmail.SendEmailAsync(new RequestDTO_SendEmail()
                        {
                            EmailTo = oUsuario.UsuCorreoPersonalCuentaNueva,
                            Subject = "ERROR DE REGISTRO EN SACI",
                            Body = "Estimad@: " + oUsuario.UsuNombre + " " + oUsuario.UsuPrimerApellido + " " + oUsuario.UsuSegundoApellido + "<br><br>" +
                                                 "Registro NO exitoso en el <b>Sistema para Atención de Correos Institucionales IPN (SACI)</b><br>"
                        });
            }
            catch (HttpRequestException e)
            {
                await JSRuntime.InvokeAsync<object>("alert", e.Message);
            }
            finally
            {
                Content = "Enviar Registro";
                isSpinningHidden = true;
            }
        }
    }
    bool dialogVisible { get; set; } = false;

    private async Task ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('name').focus()");
        this.dialogVisible = true;
    }

    // public Response<RequestViewModel_Link>? oLinkCURP = new();
    // public RequestViewModel_Link? linkCURP = new();

    // protected override async Task OnInitializedAsync()
    // {
    //     oLinkCURP = await servicioLink.GetDataByNombreAsync("CURP");
    //     linkCURP = oLinkCURP.Data;
    // }
}

@page "/RegistroEmpleado"

@using CorreosInstitucionales.Shared.CapaEntities.ViewModels.Request;
@using CorreosInstitucionales.Shared.CapaEntities.ViewModels.Response;
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.tbUsuariosService;


@inject IUsuario servicioUsuario;

<style>
    <!-- estilos de insert -->
    .content-wrapper {
        width: 90%;
        margin: 0 auto;
        min-width: 85px;
    }

    b.example-label {
        font-size: 14px;
    }

    .content-wrapper div.row {
        padding: 15px 0px;
    }

    .small-textbox {
        padding-top: 5px;
    }

    .tailwind .small-textbox,
    .tailwind-dark .small-textbox {
        padding-top: 3px;
    }

    .e-bigger .small-textbox {
        padding-top: 10px;
    }

    .tailwind .e-bigger .small-textbox,
    .tailwind-dark .e-bigger .small-textbox {
        padding-top: 1px;
    }

    @@media only screen and (max-width: 480px) {
        .content-wrapper {
            width: 92%;
        }

        .col-xs-6,
        .col-xs-4,
        .col-xs-12 {
            padding: 10px 5px;
            width: 100%;
        }

        .content-wrapper div.row {
            padding: 0px;
        }
    }

    .fabric .row.material,
    .bootstrap .row.material,
    .bootstrap4 .row.material,
    .bootstrap5 .row.material,
    .highcontrast .row.material,
    .tailwind .row.material,
    .fluent .row.material,
    .fabric-dark .row.material,
    .bootstrap-dark .row.material,
    .bootstrap5-dark .row.material,
    .tailwind-dark .row.material,
    .fluent-dark .row.material {
        display: none;
    }
    <!-- * rojo
    .is-required:after {
        content: '*';
        margin-left: 3px;
        color: red;
        font-weight: bold;
        font-size: 20px;
    }
    -->
    <!-- dropdownlist filtering -->
    .control-wrapper {
        width: 250px;
        margin: auto;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }
    <!-- estilo bonton-->
    #button-control {
        width: 100%;
        margin: 8% 0;
        text-align: center;
    }

    #button-control .e-btn {
        float: left;
    }

    @@media only screen and (max-width: 500px) {
        #button-control{
            margin-left: -3%;
        }
    }

    .button-section {
        width: 80%;
        margin: auto;
    }

    #button-control .col-xs-12 {
        margin: 15px 0;
    }

    <!--sombra-->
    .mi-sf-textbox{
        position:relative;
        
    }
    .mi-sf-textbox::after{
        content:' ';
        position:absolute;
        left:0;
        bottom: -3px;
        width: 315px;
        height: 2px;
        background-color:red;
    }
</style> 

<h3>Resgistro Empleado</h3>

<EditForm Model="oUsuario" OnValidSubmit="RegistrarEmpleado">

    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
            <b class="example-label" size="20px">Datos personales</b>
        </div>
    </div>
    <!-- Etiqueta flotante -->
    <div class="row">
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4" >
            <br />
            <SfTextBox Placeholder="Nombre(s)" Type="Syncfusion.Blazor.Inputs.InputType.Text" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuNombre" IsRequired="true" CssClass="mi-sf-textbox">
            </SfTextBox>
            <ValidationMessage For="@(() => oUsuario.UsuNombre)" />
        </div>
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
            <br />
            <SfTextBox Placeholder="Primer Apellido" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuPrimerApellido" CssClass="mi-sf-textbox"></SfTextBox>
            <ValidationMessage For="@(() => oUsuario.UsuPrimerApellido)" />
        </div>
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
            <br />
            <SfTextBox Placeholder="Segundo Apellido" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuSegundoApellido"></SfTextBox>
        </div>
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
            <br />
            <SfTextBox Placeholder="No. Celular" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuNoCelularNuevo" CssClass="mi-sf-textbox"></SfTextBox>
            <ValidationMessage For="@(() => oUsuario.UsuNoCelularNuevo)" />
        </div>
    </div>

    <div class="row">
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
            <br />
            <SfTextBox Placeholder="CURP" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuCurp" CssClass="mi-sf-textbox"></SfTextBox>
            <ValidationMessage For="@(() => oUsuario.UsuCurp)" />
        </div>
        <div class="control-wrapper-upload">
            <br />

            <p>Adjunte el CURP en formato PDF</p>
            <SfUploader @ref="UploadObj" AllowedExtensions=".pdf" MinFileSize=1 MaxFileSize=2000000>
                <UploaderEvents OnRemove="OnFileRemove"></UploaderEvents>
                <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Save" RemoveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Remove"></UploaderAsyncSettings>
            </SfUploader>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
            <SfTextBox Placeholder="Num Empleado" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuNumeroEmpleado" CssClass="mi-sf-textbox"></SfTextBox>
            <ValidationMessage For="@(() => oUsuario.UsuNumeroEmpleado)" />
        </div>
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
            <SfTextBox Placeholder="Extensión" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuExtension" CssClass="mi-sf-textbox"></SfTextBox>
            <ValidationMessage For="@(() => oUsuario.UsuExtension)" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
            <b class="example-label">Datos de la cuenta</b>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
            <SfTextBox Placeholder="Correo Personal" Type="Syncfusion.Blazor.Inputs.InputType.Email" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuCorreoPersonal" CssClass="mi-sf-textbox"></SfTextBox>
            <ValidationMessage For="@(() => oUsuario.UsuCorreoPersonal)" />
        </div>
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
            <SfTextBox Placeholder="Contraseña" Type="Syncfusion.Blazor.Inputs.InputType.Password" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuContraseña"></SfTextBox>
            <ValidationMessage For="@(() => oUsuario.UsuContraseña)" />
        </div>
        <div class="col-xs-4 col-sm-4 col-lg-4 col-md-4">
            <SfTextBox Placeholder="Confirmar contraseña" Type="Syncfusion.Blazor.Inputs.InputType.Password" FloatLabelType="@FloatLabelType.Auto" CssClass="mi-sf-textbox"></SfTextBox>
        </div>
    </div>
    <div class="row">
        <br />
        <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
            <SfTextBox Placeholder="Correo institucional (en caso de tenerlo)" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@oUsuario.UsuCorreroInstitucional"></SfTextBox>
        </div>
    </div>
    <!-- bton -->

    <div class="control-section">
        <div class="button-section">
            <div id="button-control">
                <div class="row">
                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                        <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                            <button type="submit" class="btn btn-outline-primary">Enviar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    private UsuarioViewModel? oUsuario = new UsuarioViewModel();
    SfUploader UploadObj;

    public async Task RegistrarEmpleado()
    {
        try{
            await servicioUsuario.AddDataAsync(oUsuario);
        }
        catch(Exception ex)
        {
            Console.WriteLine("Error al registrar empleado: {ex.Message}");
        }

    }
    //await servicioUsuario.AddDataAsync(oUsuario);

    public void OnFileRemove(RemovingEventArgs args)
    {
        args.PostRawFile = false;
    }
}
@page "/Extensiones"

@attribute [Authorize]

@using CorreosInstitucionales.Shared.CapaEntities.ViewModels.Request
@using CorreosInstitucionales.Shared.CapaEntities.ViewModels.Response
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.catAreasDeptosService
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.catEdificiosService
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.catExtensionService
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.catPisosService

@inject IExtension servicioExtension
@inject IAreaDepto servicioAreaDepto
@inject IEdificio servicioEdificio
@inject IPiso servicioPisoNivel

<PageTitle>Catálogo de Extensiones</PageTitle>

<SfBreadcrumb EnableActiveItemNavigation="true" EnableNavigation="false">
    <BreadcrumbItems>
        <BreadcrumbItem Text="Módulo de Catálogos" IconCss="e-icons e-settings" Disabled="true" />
        <BreadcrumbItem Text="Catálogo de Extensiones" IconCss="e-icons export-pdf" Disabled="true" />
    </BreadcrumbItems>
</SfBreadcrumb>

<h3 style="font-variant: small-caps;">
    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-telephone-fill" viewBox="0 0 18 18">
        <path fill-rule="evenodd" d="M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z" />
    </svg>  Catálogo de Extensiones
</h3>

<style type="text/css">
</style>

@if (oResponse != null && oResponse.Data != null)
{
    <div class="container-fluid">
        <div class="row align-items-center">
            @* <div class="col-md-6">
                <SfMessage ShowIcon="true"
                           ShowCloseIcon="true"
                           Severity="MessageSeverity.Info"
                           Variant="MessageVariant.Filled"
                           Visible="@(!string.IsNullOrEmpty(eActivos))"
                           ContentAlignment="HorizontalAlign.Center"
                           CssClass="square">
                    No. de Extensión Activos: @eActivos
                </SfMessage>
            </div>
            <div class="col-md-6">
                <SfMessage ShowIcon="true"
                           ShowCloseIcon="true"
                           Severity="MessageSeverity.Error"
                           Variant="MessageVariant.Filled"
                           Visible="@(!string.IsNullOrEmpty(eInactivos))"
                           ContentAlignment="HorizontalAlign.Center"
                           CssClass="square">
                    No. de Extensión Inactivos: @eInactivos
                </SfMessage>
            </div> *@
            <div class="col-md-12">
                @* <span>RowIndex: @SelectedValue</span> *@
                @* RowRenderingMode="RowDirection.Vertical" EnableAdaptiveUI="true"*@
                <SfGrid ID="Grid" @ref="Grid" EnablePersistence="false" TValue="ExtensionViewModel" DataSource="@oResponse.Data" GridLines="Syncfusion.Blazor.Grids.GridLine.Both"
                        AllowSorting="true" AllowFiltering="true" AllowTextWrap="true"
                        AllowResizing="true" AllowPaging="true" AllowSelection="true"
                        AllowGrouping="true" AllowReordering="true"
                        AllowExcelExport="true" AllowPdfExport="true"
                        ShowColumnChooser="true" EnableHover="true"
                        SelectedRowIndex="0" ShowColumnMenu="true"
                        Height="100%" Width="auto"
                        RowHeight="@GridRowHeight" EnableStickyHeader="true"
                        Toolbar="@(new List<object>() { new ItemModel() { Id = "Grid_add", Text = "Agregar", TooltipText = "Agregar", PrefixIcon = "e-add", CssClass = "e-txt-casing" },
                                                        new ItemModel() { Id = "Grid_edit", Text = "Editar", TooltipText = "Editar", PrefixIcon = "e-edit", CssClass = "e-txt-casing" },
                                                        new ItemModel() { Id = "Grid_cancel", Text = "Cancelar", TooltipText = "Cancelar", PrefixIcon = "e-cancel" },
                                                        new ItemModel() { Id = "Grid_update", Text = "Guardar", TooltipText = "Actualizar", PrefixIcon = "e-update" },
                                                        new ItemModel() { Id = "", Text = "|", TooltipText = "", PrefixIcon = "" },
                                                        new ItemModel() { Id = "Grid_enable", Text = "Habilitar", TooltipText = "Activar", PrefixIcon = "e-check-box", CssClass = "e-success" },
                                                        new ItemModel() { Id = "Grid_disable", Text = "Deshabilitar", TooltipText = "Desactivar", PrefixIcon = "e-trash", CssClass = "e-danger" },
                                                        new ItemModel() { Id = "", Text = "|", TooltipText = "", PrefixIcon = "" },
                                                        new ItemModel() { Id = "Grid_excelexport", Text = "Excel", TooltipText = "Exportar a Excel", PrefixIcon = "e-excelexport" },
                                                        // new ItemModel() { Id = "Grid_csvexport", Text = "CSV", TooltipText = "Exportar a CSV", PrefixIcon = "e-csvexport" },
                                                        new ItemModel() { Id = "Grid_pdfexport", Text = "PDF", TooltipText = "Exportar a PDF", PrefixIcon = "e-pdfexport" },
                                                        new ItemModel() { Id = "copyheader", Text = "Copiar con Encabezado", TooltipText = "Copiar con Encabezado", PrefixIcon = "e-copy" },
                                                        new ItemModel { Id = "small", PrefixIcon = "e-line-very-small", Align = ItemAlign.Right, TooltipText="20px" },
                                                        new ItemModel { Id = "medium", PrefixIcon = "e-line-small", Align = ItemAlign.Right, TooltipText="40px" },
                                                        new ItemModel { Id = "big", PrefixIcon = "e-line-normal", Align = ItemAlign.Right, TooltipText="60px" },
                                                        "ColumnChooser",
                                                        "Search" })"
                        ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending",
                                                                 "Copy",
                                                                 "Edit", "Delete", "Save", "Cancel",
                                                                 "PdfExport", "ExcelExport", "CsvExport",
                                                                 "FirstPage", "PrevPage","LastPage", "NextPage"})">
                    @*<SfToolbar OverflowMode="OverflowMode.Scrollable">
                <ToolbarItems>
                <ToolbarItem Type="ItemType.Button" Text="Dehabilitar" TooltipText="Inactivar"
                PrefixIcon="e-icons e-trash" TabIndex="0" Align="@ItemAlign.Left"
                CssClass="e-danger" OnClick="(() => EnableDisableByMultiSelect(false))" />
                <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                </ToolbarItems>
                </SfToolbar>*@
                    <GridSearchSettings Operator="Syncfusion.Blazor.Operator.Contains" IgnoreAccent="true" IgnoreCase="true" />
                    <GridGroupSettings ShowGroupedColumn="true" ShowDropArea="true" />
                    <GridEvents ExcelQueryCellInfoEvent="ExcelQueryCellInfoHandler"
                                PdfQueryCellInfoEvent="PdfQueryCellInfoHandler"
                                ExportComplete="ExportCompleteHandler"
                                OnToolbarClick="ToolbarClick"
                                TValue="ExtensionViewModel"
                                OnActionBegin="OnActionBeginHandler"
                                OnActionComplete="OnActionCompleteHandler"
                                RowSelected="GetSelectedRecords"
                                RowDeselected="GetDeselectedRecords"
                                CommandClicked="OnCommandClicked" />
                    <GridFilterSettings Type="@Syncfusion.Blazor.Grids.FilterType.Excel" />
                    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"
                                           PersistSelection="true"
                                           Mode="Syncfusion.Blazor.Grids.SelectionMode.Both"
                                           CheckboxMode="CheckboxSelectionType.ResetOnRowClick"
                                           CheckboxOnly="false"
                                           EnableToggle="false"
                                           EnableSimpleMultiRowSelection="true" />
                    <GridTextWrapSettings WrapMode="Syncfusion.Blazor.Grids.WrapMode.Both" />
                    <GridPageSettings PageCount="5" PageSize="10" PageSizes="@(new object[] { 5, 10, 25, 50, 100, "All" })" />
                    @if (!EditModeSelection)
                    {
                        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"
                                          Mode="Syncfusion.Blazor.Grids.EditMode.Dialog"
                                          ShowDeleteConfirmDialog="false">
                            <Validator>
                                <DataAnnotationsValidator />
                            </Validator>
                        </GridEditSettings>
                    }
                    else
                    {
                        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"
                                          Mode="Syncfusion.Blazor.Grids.EditMode.Normal"
                                          ShowDeleteConfirmDialog="false">
                            <Validator>
                                <DataAnnotationsValidator />
                            </Validator>
                        </GridEditSettings>
                    }
                    <GridColumns>
                        <GridColumn Type="Syncfusion.Blazor.Grids.ColumnType.CheckBox"
                                    HeaderTextAlign="@Syncfusion.Blazor.Grids.TextAlign.Center"
                                    TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"
                                    Width="30">
                        </GridColumn>

                        <GridColumn Field=@nameof(ExtensionViewModel.IdExtension)
                                    HeaderText="ID"
                                    HeaderTextAlign="@Syncfusion.Blazor.Grids.TextAlign.Center"
                                    TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"
                                    IsPrimaryKey="true"
                                    IsIdentity="true"
                                    Visible="false"
                                    Width="50">
                            <HeaderTemplate>
                                <div>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-key" viewBox="0 0 16 16">
                                        <path d="M0 8a4 4 0 0 1 7.465-2H14a.5.5 0 0 1 .354.146l1.5 1.5a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0L13 9.207l-.646.647a.5.5 0 0 1-.708 0L11 9.207l-.646.647a.5.5 0 0 1-.708 0L9 9.207l-.646.647A.5.5 0 0 1 8 10h-.535A4 4 0 0 1 0 8zm4-3a3 3 0 1 0 2.712 4.285A.5.5 0 0 1 7.163 9h.63l.853-.854a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.793-.793-1-1h-6.63a.5.5 0 0 1-.451-.285A3 3 0 0 0 4 5z" />
                                        <path d="M4 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0z" />
                                    </svg> ID
                                </div>
                            </HeaderTemplate>
                        </GridColumn>



                        <GridColumn Field=@nameof(ExtensionViewModel.ExtNoExtension)
                                    HeaderText="Numero de extension"
                                    HeaderTextAlign="@Syncfusion.Blazor.Grids.TextAlign.Center"
                                    TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left"
                                    EditType="EditType.DefaultEdit"
                                    EditorSettings="@CustomerEditParams"
                                    ValidationRules="@(new Syncfusion.Blazor.Grids.ValidationRules{ Required = true })"
                                    Width="150">
                            <HeaderTemplate>
                                <div>                                   
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-telephone-fill" viewBox="0 0 16 16">
                                      <path fill-rule="evenodd" d="M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z"/>
                                    </svg>  Número Extensión
                                </div>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var extension = (context as ExtensionViewModel).ExtNoExtension;
                                }
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-telephone" viewBox="0 0 16 16">
                                    <path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z" />
                                </svg>  @extension
                            </Template>
                            <EditTemplate>
                                @{
                                    var extension = (context as ExtensionViewModel);
                                    //onkeypress = "return /^[a-zA-Z.áéíóúÁÉÍÓÚ ]+$/.test(String.fromCharCode(event.keyCode || event.which));"

                                    <SfAutoComplete ID="Data___NoExtension"
                                                    TValue="string"
                                                    TItem="ExtensionViewModel"
                                                    Placeholder="Numero Extension"
                                                    FloatLabelType="FloatLabelType.Always"
                                                    ShowClearButton="true"
                                                    ShowPopupButton="true"
                                                    AllowFiltering="true"
                                                    EnableVirtualization="false"
                                                    IgnoreCase="true"
                                                    Highlight="true"
                                                    Autofill="true"
                                                    MinLength="1"
                                                    IgnoreAccent="true"
                                                    SortOrder="Syncfusion.Blazor.DropDowns.SortOrder.Ascending"
                                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                                    SuggestionCount="1000"
                                                    @bind-Value="@(extension.ExtNoExtension)"
                                                    DataSource="@oResponse.Data"
                                                    OnInput="@((e) => extension.ExtNoExtension = e.Value.ToString())"
                                                    ValidateOnInput="false"
                                                    PopupHeight="500px" PopupWidth="300px"
                                                    CssClass="mi-sf-textbox">
                                        <AutoCompleteFieldSettings Text="ExtNoExtension" Value="ExtNoExtension" />
                                    </SfAutoComplete>
                                    <ValidationMessage For="() => (extension.ExtNoExtension)" />
                                }
                            </EditTemplate>
                        </GridColumn>
                        <!-- empieza columna de llave foranea-->
                        <GridForeignColumn Field=@nameof(ExtensionViewModel.ExtIdAreaDepto)
                                           TValue="AreaDeptoViewModel"
                                           HeaderText="Area del departamento"
                                           HeaderTextAlign="@Syncfusion.Blazor.Grids.TextAlign.Center"
                                           ForeignDataSource="@oAreaDepto.Data"
                                           ForeignKeyField="IdAreaDepto"
                                           ForeignKeyValue="AreNombre"
                                           TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"
                                           ValidationRules="@(new Syncfusion.Blazor.Grids.ValidationRules { Required = true } )"
                                           EditType="EditType.DropDownEdit"
                                           AllowFiltering="true"
                                           Width="100px">
                            <HeaderTemplate>
                                <div>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-building-fill" viewBox="0 0 16 16">
                                        <path d="M3 0a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h3v-3.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5V16h3a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1H3Zm1 2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3.5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5ZM4 5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1ZM7.5 5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5Zm2.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1ZM4.5 8h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5Zm2.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3.5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5Z" />
                                    </svg> Area Departamento
                                </div>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var foreignKey = (context as ExtensionViewModel)?.ExtIdAreaDeptoNavigation;
                                    var areNombre = "";
                                    var areTitular = "";

                                    if (foreignKey != null)
                                    {
                                        areNombre = foreignKey.AreNombre;
                                        areTitular = " (" + foreignKey.AreTitular + ")";
                                    }
                                }
                                <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" fill="currentColor" class="bi bi-building" viewBox="0 0 16 16">
                                    <path d="M4 2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1ZM4 5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1ZM7.5 5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1ZM4.5 8a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Zm2.5.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1Zm3.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1Z" />
                                    <path d="M2 1a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V1Zm11 0H3v14h3v-2.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5V15h3V1Z" />
                                </svg> @areNombre<br />@areTitular
                            </Template>

                            <EditTemplate>
                                @{
                                    var areadepto = (context as ExtensionViewModel);
                                    <SfDropDownList ID="Data___AreExtensionNavigation"
                                                    TValue="int"
                                                    TItem="AreaDeptoViewModel"
                                                    Placeholder="Area Departamento"
                                                    FloatLabelType="FloatLabelType.Always"
                                                    ShowClearButton="true"
                                                    EnableVirtualization="false"
                                                    IgnoreCase="true"
                                                    @bind-Value="@areadepto.ExtIdAreaDepto"
                                                    DataSource="@oAreaDepto.Data"
                                                    Enabled="true"
                                                    Readonly="false"
                                                    CssClass="e-multi-column"
                                                    AllowFiltering="true"
                                                    FilterBarPlaceholder="Selecciona una opción (Buscar por Nombre de area del departamento)"
                                                    IgnoreAccent="true"
                                                    FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                                    SortOrder="Syncfusion.Blazor.DropDowns.SortOrder.None"
                                                    PopupHeight="300" PopupWidth="600">
                                        <DropDownListFieldSettings Value="IdAreaDepto" Text="AreNombre" />
                                        <DropDownListTemplates TItem="AreaDeptoViewModel">
                                            <HeaderTemplate>
                                                <table>
                                                    <thead class="m-0">
                                                        <tr>
                                                            <th>Nombre del area</th>
                                                            <th>Nombre del titular</th>
                                                        </tr>
                                                    </thead>
                                                </table>
                                            </HeaderTemplate>
                                            <ItemTemplate Context="itemContext">
                                                <div class="table-responsive">
                                                    <table class="table table-bordered align-middle text-wrap text-center m-0" style="line-height: 1.5;">
                                                        <tbody>
                                                            <tr class="align-middle m-0">
                                                                <td class="m-0">
                                                                    @((itemContext as AreaDeptoViewModel).AreNombre)
                                                                </td>
                                                                <td class="m-0">
                                                                    @((itemContext as AreaDeptoViewModel).AreTitular)
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </ItemTemplate>
                                        </DropDownListTemplates>
                                    </SfDropDownList>
                                    <ValidationMessage For="@(() => areadepto.ExtIdAreaDepto)" />
                                }
                            </EditTemplate>
                        </GridForeignColumn>
                        <!-- termina columna de llave foranea-->
                        <GridColumn Field=@nameof(ExtensionViewModel.ExtStatus)
                                    HeaderText="Estatus"
                                    HeaderTextAlign="@Syncfusion.Blazor.Grids.TextAlign.Center"
                                    TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"
                                    EditType="EditType.BooleanEdit"
                                    DisplayAsCheckBox="true"
                                    EditorSettings="@(EditModeSelection == true ? VerifiedEditParams : VerifiedAddParams)"
                                    DefaultValue="true"
                                    Type="Syncfusion.Blazor.Grids.ColumnType.Boolean"
                                    Width="50">
                            <HeaderTemplate>
                                <div>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-flag-fill" viewBox="0 0 16 16">
                                        <path d="M14.778.085A.5.5 0 0 1 15 .5V8a.5.5 0 0 1-.314.464L14.5 8l.186.464-.003.001-.006.003-.023.009a12.435 12.435 0 0 1-.397.15c-.264.095-.631.223-1.047.35-.816.252-1.879.523-2.71.523-.847 0-1.548-.28-2.158-.525l-.028-.01C7.68 8.71 7.14 8.5 6.5 8.5c-.7 0-1.638.23-2.437.477A19.626 19.626 0 0 0 3 9.342V15.5a.5.5 0 0 1-1 0V.5a.5.5 0 0 1 1 0v.282c.226-.079.496-.17.79-.26C4.606.272 5.67 0 6.5 0c.84 0 1.524.277 2.121.519l.043.018C9.286.788 9.828 1 10.5 1c.7 0 1.638-.23 2.437-.477a19.587 19.587 0 0 0 1.349-.476l.019-.007.004-.002h.001" />
                                    </svg> Estatus
                                </div>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var ExtensionViewModel = context as ExtensionViewModel;
                                }
                                <SfCheckBox Label="@(ExtensionViewModel.ExtStatus == true ? "Activo" : "Inactivo")" CssClass="e-success"
                                            @bind-Checked="@ExtensionViewModel.ExtStatus"
                                            @onchange="@(() => EnableDisableByCheckBox(ExtensionViewModel.IdExtension, ExtensionViewModel.ExtStatus))" /><!--pisoNivelViewModel.PisoStatus.Value-->
                            </Template>
                        </GridColumn>

                        <GridColumn HeaderText="Acciones" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" AutoFit="false" Width="50px">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-primary e-round", IsPrimary=true })" />
                                @*<GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-danger e-round" })" /> *@
                                <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-success" })" />
                                <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-warning" })" />
                                @* <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-eye", CssClass="e-info" })" Title="Ver detalles" /> *@
                            </GridCommandColumns>
                        </GridColumn>

                    </GridColumns>
                    <GridAggregates>
                        <GridAggregate>
                            <GridAggregateColumns>
                                @*<GridAggregateColumn Field="Freight" Type="AggregateType.Sum" Format="C2">
                            <FooterTemplate>
                            @{
                            var aggregate = (context as AggregateTemplateContext);
                            <div>
                            <p>Sum: @aggregate.Sum</p>
                            </div>
                            }
                            </FooterTemplate>
                            </GridAggregateColumn>*@
                                <GridAggregateColumn Field="@nameof(ExtensionViewModel.ExtStatus)" Type="AggregateType.TrueCount">
                                    <FooterTemplate>
                                        @{
                                            var aggregate = (context as AggregateTemplateContext);
                                            <div>
                                                <b>Habilitados: @aggregate.TrueCount</b>
                                            </div>
                                        }
                                    </FooterTemplate>
                                </GridAggregateColumn>
                            </GridAggregateColumns>
                        </GridAggregate>
                        <GridAggregate>
                            <GridAggregateColumns>
                                @*<GridAggregateColumn Field="Freight" Type="AggregateType.Average" Format="C2">
                            <FooterTemplate>
                            @{
                            var aggregate = (context as AggregateTemplateContext);
                            <div>
                            <p>Average: @aggregate.Average</p>
                            </div>
                            }
                            </FooterTemplate>
                            </GridAggregateColumn>*@
                                <GridAggregateColumn Field="@nameof(ExtensionViewModel.ExtStatus)" Type="AggregateType.FalseCount">
                                    <FooterTemplate>
                                        @{
                                            var aggregate = (context as AggregateTemplateContext);
                                            <div>
                                                <b>Deshabilitados: @aggregate.FalseCount</b>
                                            </div>
                                        }
                                    </FooterTemplate>
                                </GridAggregateColumn>
                            </GridAggregateColumns>
                        </GridAggregate>
                    </GridAggregates>
                </SfGrid>
            </div>
        </div>
    </div>

    <SfToast @ref="@ToastObj" />
}
else
{
    <SfSpinner Type="SpinnerType.Tailwind" Size="50" Label="Cargando..." Visible="true" CssClass="e-spin-overlay" />
}


@code {
    // public Response<List<ExtensionViewModel>>? oResponse = new();

    // protected override async Task OnInitializedAsync()
    // {
    //     oResponse = await servicioExtension.GetAllDataAsync(false);
    // }
    public Response<List<ExtensionViewModel>>? oResponse = new();
    public Response<List<AreaDeptoViewModel>>? oAreaDepto = new();
    SfGrid<ExtensionViewModel> Grid = new();
    Response<object>? oRespuesta = new();
    SfToast ToastObj = new();

    public bool EditModeSelection { get; set; }
    public int GridRowHeight = 40;

    public List<ExtensionViewModel>? MultiSelect { get; set; }
    public List<int>? SelectedRowIndexes { get; set; }
    public int[]? TotalValue { get; set; }
    public string? SelectedValue;

    public IEditorSettings CustomerEditParams = new StringEditCellParams { Params = new TextBoxModel() { EnableRtl = false, Readonly = false, ShowClearButton = true, Multiline = true } };
    public IEditorSettings VerifiedAddParams = new BooleanEditCellParams { Params = new CheckBoxModel<bool>() { Label = "Estatus (Habilitado/Deshabilitado)", Disabled = true, LabelPosition = Syncfusion.Blazor.Buttons.LabelPosition.After } };
    public IEditorSettings VerifiedEditParams = new BooleanEditCellParams { Params = new CheckBoxModel<bool>() { Label = "Estatus (Habilitado/Deshabilitado)", Disabled = false, LabelPosition = Syncfusion.Blazor.Buttons.LabelPosition.After } };

    protected override async Task OnInitializedAsync() {
        oResponse = await servicioExtension.GetAllDataAsync(false);
        oAreaDepto = await servicioAreaDepto.GetAllDataAsync(false);
    }

    public async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        //if (args.Item.Id == "Grid_add")
        //{
        //    var response = await servicioExtension.EnableDisableDataById(MultiSelect.Last().IdPisoNivel, false);
        //    oRespuesta = response.Content.ReadFromJsonAsync<Response<object>>().Result;
        //}
        //else if (args.Item.Id == "Grid_edit")
        //{
        //    EditModeSelection = false;
        //}
        if (args.Item.Id == "Grid_enable")
        {
            await EnableDisableByMultiSelect(true);
        }
        else if (args.Item.Id == "Grid_disable")
        {
            await EnableDisableByMultiSelect(false);
        }
        else if (args.Item.Id == "Grid_pdfexport")
        {
            PdfExportProperties ExportProperties = new PdfExportProperties();
            ExportProperties.FileName = "Extensiones.pdf";
            ExportProperties.PageSize = PdfPageSize.Letter;
            ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.AllPages;
            ExportProperties.PageOrientation = Syncfusion.Blazor.Grids.PageOrientation.Portrait;
            ExportProperties.IsRepeatHeader = true;
            ExportProperties.DisableAutoFitWidth = false;
            ExportProperties.IncludeHiddenColumn = false;
            ExportProperties.IncludeTemplateColumn = true;
            await this.Grid.ExportToPdfAsync(ExportProperties);
        }
        else if (args.Item.Id == "Grid_excelexport")
        {
            ExcelExportProperties ExportProperties = new ExcelExportProperties();
            ExportProperties.FileName = "Extensiones.xlsx";
            ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.AllPages;
            ExportProperties.IncludeHiddenColumn = true;
            ExportProperties.IncludeTemplateColumn = true;
            await this.Grid.ExportToExcelAsync(ExportProperties);
        }
        else if (args.Item.Id == "Grid_csvexport")
        {
            await this.Grid.ExportToCsvAsync();
        }
        else if (args.Item.Id == "small")
        {
            GridRowHeight = 20;
        }
        else if (args.Item.Id == "medium")
        {
            GridRowHeight = 40;
        }
        else if (args.Item.Id == "big")
        {
            GridRowHeight = 60;
        }
    }

    public void ExcelQueryCellInfoHandler(ExcelQueryCellInfoEventArgs<ExtensionViewModel> args)
    {
        if (args.Column.Field == "ExtStatus")
            args.Cell.Value = args.Data.ExtStatus == true ? "Habilitado" : "Deshabilitado";
    }

    public void PdfQueryCellInfoHandler(PdfQueryCellInfoEventArgs<ExtensionViewModel> args)
    {
        if (args.Column.Field == "ExtStatus")
            args.Cell.Value = args.Data.ExtStatus == true ? "Habilitado" : "Deshabilitado";
    }

    public void ExportCompleteHandler(object args)
    {
        ToastObj.ShowAsync(
            new ToastModel
                {
                    Title = "Exportación exitosa",
                    Content = "Se exportó el archivo correctamente.",
                    CssClass = "e-toast-success",
                    Icon = "e-success e-check-box", // e-meeting
                    Animation = new ToastAnimationSettings { ShowSettings = new ToastShowAnimationSettings { Effect = ToastEffect.FadeOut } },
                    Timeout = 3000,
                    ShowCloseButton = true,
                    ProgressDirection = ProgressDirection.LTR,
                    ShowProgressBar = true,
                    NewestOnTop = true,
                    Position = new ToastPosition { X = "Right", Y = "Top" }
                });
    }

    private async Task OnActionBeginHandler(Syncfusion.Blazor.Grids.ActionEventArgs<ExtensionViewModel> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            // Triggers before editing operation starts
            EditModeSelection = true;
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            // Triggers before add operation starts
            EditModeSelection = false;
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {
            // Triggers before cancel operation starts
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            // Triggers before save operation starts
            if (args.Action == "Add")
            {
                var response = await servicioExtension.AddDataAsync(args.Data);
                oRespuesta = response.Content.ReadFromJsonAsync<Response<object>>().Result;
                await ToastObj.ShowAsync(
                    new ToastModel
                        {
                            Title = "Registro Agregado",
                            Content = args.Data.ExtNoExtension,
                            CssClass = "e-toast-success",
                            Icon = "e-success e-check-box", // e-meeting
                            Animation = new ToastAnimationSettings { ShowSettings = new ToastShowAnimationSettings { Effect = ToastEffect.FadeOut } },
                            Timeout = 3000,
                            ShowCloseButton = true,
                            ProgressDirection = ProgressDirection.LTR,
                            ShowProgressBar = true,
                            NewestOnTop = true,
                            Position = new ToastPosition { X = "Right", Y = "Top" }
                        });
            }
            else if (args.Action == "Edit")
            {
                var response = await servicioExtension.EditDataAsync(args.Data);
                oRespuesta = response.Content.ReadFromJsonAsync<Response<object>>().Result;
                await ToastObj.ShowAsync(
                    new ToastModel
                        {
                            Title = "Registro Editado",
                            Content = args.Data.ExtNoExtension,
                            CssClass = "e-toast-success",
                            Icon = "e-annotation-edit", // e-meeting
                            Animation = new ToastAnimationSettings { ShowSettings = new ToastShowAnimationSettings { Effect = ToastEffect.FadeIn } },
                            Timeout = 3000,
                            ShowCloseButton = true,
                            ProgressDirection = ProgressDirection.LTR,
                            ShowProgressBar = true,
                            NewestOnTop = true,
                            Position = new ToastPosition { X = "Right", Y = "Top" }
                        });
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            // Triggers before delete operation starts
            var response = await servicioExtension.EnableDisableDataByIdAsync(args.RowData.IdExtension, false);
            oRespuesta = response.Content.ReadFromJsonAsync<Response<object>>().Result;
            await ToastObj.ShowAsync(
                new ToastModel
                    {
                        Title = "Registro Deshabilitado",
                        Content = args.Data.ExtNoExtension,
                        CssClass = "e-toast-danger",
                        Icon = "e-circle-remove", // e-meeting
                        Animation = new ToastAnimationSettings { ShowSettings = new ToastShowAnimationSettings { Effect = ToastEffect.FadeZoomIn } },
                        Timeout = 3000,
                        ShowCloseButton = true,
                        ProgressDirection = ProgressDirection.LTR,
                        ShowProgressBar = true,
                        NewestOnTop = true,
                        Position = new ToastPosition { X = "Right", Y = "Top" }
                    });
        }
    }

    private async Task OnActionCompleteHandler(Syncfusion.Blazor.Grids.ActionEventArgs<ExtensionViewModel> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            // Triggers once editing operation completes
            args.PreventRender = false;
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            // Triggers once add operation completes
            args.PreventRender = false;
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {
            // Triggers once cancel operation completes
            oResponse = await servicioExtension.GetAllDataAsync(false); //to fetch the updated data from db to Grid
            await PersistSelection();
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            // Triggers once save operation completes
            if (args.Action == "Edit")
            {
            }

            oResponse = await servicioExtension.GetAllDataAsync(false);
            await PersistSelection();
            StateHasChanged();

            if (args.Action == "Add")
            {
                await (Grid.TotalItemCount % Grid.PageSettings.PageSize == 0 ?
                        Grid.GoToPageAsync(Grid.TotalItemCount / Grid.PageSettings.PageSize) :
                        Grid.GoToPageAsync((Grid.TotalItemCount / Grid.PageSettings.PageSize) + 1));

                await (Grid.TotalItemCount % Grid.PageSettings.PageSize == 0 ?
                        Grid.SelectRowAsync(Grid.PageSettings.PageSize - 1) :
                        Grid.SelectRowAsync((Grid.TotalItemCount % Grid.PageSettings.PageSize) - 1));
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            // Triggers once delete operation completes
            oResponse = await servicioExtension.GetAllDataAsync(false);
            await PersistSelection();
        }
    }

    private async Task EnableDisableByCheckBox(int id, bool isActivate)
    {
        try
        {
            var response = await servicioExtension.EnableDisableDataByIdAsync(id, isActivate);
            oRespuesta = response.Content.ReadFromJsonAsync<Response<object>>().Result;

            if (MultiSelect != null && isActivate)
                await ToastObj.ShowAsync(
                    new ToastModel
                        {
                            Title = "Registro Habilitado",
                            Content = MultiSelect.Last().ExtNoExtension,
                            CssClass = "e-toast-success",
                            Icon = "e-circle-check",
                            Animation = new ToastAnimationSettings { ShowSettings = new ToastShowAnimationSettings { Effect = ToastEffect.ZoomIn } },
                            Timeout = 3000,
                            ShowCloseButton = true,
                            ProgressDirection = ProgressDirection.LTR,
                            ShowProgressBar = true,
                            NewestOnTop = true,
                            Position = new ToastPosition { X = "Right", Y = "Top" }
                        });
            else if (MultiSelect != null && !isActivate)
                await ToastObj.ShowAsync(
                    new ToastModel
                        {
                            Title = "Registro Deshabilitado",
                            Content = MultiSelect.Last().ExtNoExtension,
                            CssClass = "e-toast-danger",
                            Icon = "e-circle-remove",
                            Animation = new ToastAnimationSettings { ShowSettings = new ToastShowAnimationSettings { Effect = ToastEffect.ZoomOut } },
                            Timeout = 3000,
                            ShowCloseButton = true,
                            ProgressDirection = ProgressDirection.LTR,
                            ShowProgressBar = true,
                            NewestOnTop = true,
                            Position = new ToastPosition { X = "Right", Y = "Top" }
                        });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            oResponse = await servicioExtension.GetAllDataAsync(false);
            await PersistSelection();
        }
    }

    public async Task EnableDisableByMultiSelect(bool isActivate)
    {
        try
        {
            string reg = string.Empty;

            if (MultiSelect != null)
                foreach (var item in MultiSelect)
                {
                    var response = await servicioExtension.EnableDisableDataByIdAsync(item.IdExtension, isActivate);
                    oRespuesta = response.Content.ReadFromJsonAsync<Response<object>>().Result;
                    reg += "<b>" + item.IdExtension + "</b> " + item.ExtIdAreaDepto + "<br>";
                }

            if (MultiSelect != null && isActivate)
                await ToastObj.ShowAsync(
                    new ToastModel
                        {
                            Title = "Registros Habilitados",
                            Content = reg,
                            CssClass = "e-toast-success",
                            Icon = "e-circle-check",
                            Animation = new ToastAnimationSettings { ShowSettings = new ToastShowAnimationSettings { Effect = ToastEffect.ZoomIn } },
                            Timeout = 3000,
                            ShowCloseButton = true,
                            ProgressDirection = ProgressDirection.LTR,
                            ShowProgressBar = true,
                            NewestOnTop = true,
                            Position = new ToastPosition { X = "Right", Y = "Top" }
                        });
            else if (MultiSelect != null && !isActivate)
                await ToastObj.ShowAsync(
                    new ToastModel
                        {
                            Title = "Registros Deshabilitados",
                            Content = reg,
                            CssClass = "e-toast-danger",
                            Icon = "e-circle-remove",
                            Animation = new ToastAnimationSettings { ShowSettings = new ToastShowAnimationSettings { Effect = ToastEffect.ZoomOut } },
                            Timeout = 3000,
                            ShowCloseButton = true,
                            ProgressDirection = ProgressDirection.LTR,
                            ShowProgressBar = true,
                            NewestOnTop = true,
                            Position = new ToastPosition { X = "Right", Y = "Top" }
                        });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            oResponse = await servicioExtension.GetAllDataAsync(false);
            await PersistSelection();
        }
    }

    public async Task PersistSelection() => await (TotalValue != null && TotalValue.Length > 0 ? Grid.SelectRowsAsync(TotalValue) : Grid.SelectRowAsync(0));

    public async Task GetSelectedRecords(RowSelectEventArgs<ExtensionViewModel> args)
    {
        //MultiSelect = null;

        MultiSelect = await this.Grid.GetSelectedRecordsAsync();

        SelectedRowIndexes = await this.Grid.GetSelectedRowIndexesAsync();
        TotalValue = SelectedRowIndexes.ToArray();
        SelectedValue = "";
        if (TotalValue.Length > 0 && SelectedRowIndexes.Count > 0)
            foreach (var data in TotalValue)
            {
                SelectedValue = SelectedValue + " " + data;
            }
    }

    public async Task GetDeselectedRecords(RowDeselectEventArgs<ExtensionViewModel> args)
    {
        MultiSelect = await this.Grid.GetSelectedRecordsAsync();

        SelectedRowIndexes = await this.Grid.GetSelectedRowIndexesAsync();
        TotalValue = SelectedRowIndexes.ToArray();
        SelectedValue = "";
        if (TotalValue.Length > 0 && SelectedRowIndexes.Count > 0)
            foreach (var data in TotalValue)
            {
                SelectedValue = SelectedValue + " " + data;
            }
    }

    public void OnCommandClicked(CommandClickEventArgs<ExtensionViewModel> args)
    {
        //if (args.CommandColumn.ButtonOption.Content == "Detalles")
        //    args.RowData;
        //Console.WriteLine(args.RowData.IdPisoNivel);
    }

}

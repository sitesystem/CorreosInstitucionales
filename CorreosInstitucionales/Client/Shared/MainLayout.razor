@using Radzen
@using Radzen.Blazor

@using CorreosInstitucionales.Client.CapaPresentation.ComponentsPages.UI_UX.Login
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.catTiposPersonal

@inherits LayoutComponentBase

@inject ILoginServices loginService
@inject ITipoPersonalService servicioTipoPersonal

<RadzenComponents />

<AuthorizeView>
    <Authorized>
    </Authorized>
    <NotAuthorized>
        @{
            if (context.User.Identity?.IsAuthenticated == true)
                navigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

<style>
    .control-container .e-appbar.custom-appbar {
        background: none;
        color: #fff;
        font-size: 16px;
    }

    .control-container .e-btn.e-inherit {
        margin: 0 3px;
    }

    .control-container .syncfusion-logo {
        background: url(https://cdn.syncfusion.com/blazor/images/demos/syncfusion-logo.svg);
        background-size: contain;
        background-repeat: no-repeat;
        height: 30px;
        width: 150px;
    }
</style>

@*
<div class="page">
    <div class="@sidebarCssClass">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 control-container" style="background-color:#3d0000; color:white;">
        </div>
    </main>
</div>
*@
<AuthorizeView>
    <Authorized>
        <RadzenLayout>
            <RadzenHeader class="rz-background-color-info-darker rz-border-radius-0 rz-py-0">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.Wrap" Gap="10px" Class="">
                    <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" Class="rz-m-0" />
                    <RadzenCard Variant="Variant.Filled" Class="rz-p-0">
                        <RadzenProfileMenu>
                            <Template>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="10px" Class="">
                                    <RadzenImage Path="./logo_saci.png" Style="height:30px;" AlternateText="logo saci" />
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Body1"><b>SACI</b></RadzenText>
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0" style="font-variant: small-caps;">
                                            Sistema para Atención de Correos Institucionales IPN
                                        </RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </Template>
                        </RadzenProfileMenu>
                    </RadzenCard>
                    @{
                        string? rol = context.User.Claims.FirstOrDefault(c => c.Type == "Rol")?.Value;
                        string? tipoPersonal = string.Empty;
                        if (oResponseTipoPersonal != null && oResponseTipoPersonal.Data != null)
                            tipoPersonal = oResponseTipoPersonal.Data.TipoperNombre;
                        string? name = context.User.Claims.FirstOrDefault(c => c.Type == "Name")?.Value;
                        string? email = context.User.Claims.FirstOrDefault(c => c.Type == "Email")?.Value;
                    }
                    <RadzenCard Variant="Variant.Filled" Class="rz-p-0 d-none d-sm-none d-md-block d-lg-block d-xl-block d-xxl-block">
                        <RadzenProfileMenu>
                            <Template>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="10px" Class="">
                                    <RadzenImage Path="./logo_ipn.png" Style="height: 30px;" />
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Personal:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@tipoPersonal</b></RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </Template>
                        </RadzenProfileMenu>
                    </RadzenCard>

                    <RadzenCard Variant="Variant.Filled" Class="rz-p-0 d-none d-sm-none d-md-block d-lg-block d-xl-block d-xxl-block">
                        <RadzenProfileMenu Class="">
                            <Template>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="10px" Class="">
                                    <RadzenGravatar Email="@email" />
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">Correo Electrónico Personal</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@email</b></RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </Template>
                            <ChildContent>
                                @* <RadzenProfileMenuItem Text="Perfil" Path="Pefil" Icon="person"></RadzenProfileMenuItem> *@
                                <RadzenButton Variant="Variant.Text" Click="@(() => navigationManager.NavigateTo("/PerfilUsuario"))" Text="Perfil" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Dark" Icon="account_circle" class="d-block text-start" style="width: 100%" />
                                <RadzenButton Variant="Variant.Text" Click="@LogOut" Text="Cerrar Sesión" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Dark" Icon="logout" class="d-block text-start" style="width: 100%" />
                            </ChildContent>
                        </RadzenProfileMenu>
                    </RadzenCard>
                </RadzenStack>
            </RadzenHeader>

            <!-- ... Contenido para pantallas pequeñas móviles -->
            <div class="d-block d-sm-block d-md-none d-lg-none d-xl-none d-xxl-none rz-background-color-base-900">
                <RadzenSidebar @bind-Expanded="@sidebarExpanded" Responsive="false" Style="width: max-content" class="rz-background-color-base-900 rz-border-base-900">
                    <RadzenPanelMenu Multiple="@(context.User.Claims.FirstOrDefault(c => c.Type == "Rol")?.Value == "2" ? true : false)" ShowArrow="true">
                        <NavMenu isExpanded="@(context.User.Claims.FirstOrDefault(c => c.Type == "Rol")?.Value == "2" ? true : false)" />
                    </RadzenPanelMenu>
                </RadzenSidebar>
            </div>

            <!-- ... Contenido para pantallas grandes ... -->
            <div class="d-none d-sm-none d-md-block d-lg-block d-xl-block d-xxl-block rz-background-color-base-900">
                <RadzenSidebar Responsive="false" Style="width: max-content" class="rz-background-color-base-900 rz-border-base-900">
                    <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)"
                                     Multiple="@(context.User.Claims.FirstOrDefault(c => c.Type == "Rol")?.Value == "2" ? true : false)" ShowArrow="true">
                        <NavMenu isExpanded="@(context.User.Claims.FirstOrDefault(c => c.Type == "Rol")?.Value == "2" ? true : false)" />
                    </RadzenPanelMenu>
                </RadzenSidebar>
            </div>

            <RadzenBody style="background: url('../fondo.jpg') repeat center center fixed;">
                <RadzenColumn Size="12">
                    <article class="content px-4" style="background: url('../fondo.jpg') repeat center center fixed;">
                        @Body
                    </article>
                </RadzenColumn>
            </RadzenBody>

            <RadzenFooter class="rz-background-color-base-900 rz-border-base-900">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceAround" Wrap="FlexWrap.Wrap" Gap="10px" Class="">
                    <RadzenText Text="UPIICSA (Desarrollo de Sistemas de Información)" TextStyle="Radzen.Blazor.TextStyle.Caption" style="color: var(--rz-text-disabled-color);" TagName="Radzen.Blazor.TagName.P" TextAlign="Radzen.TextAlign.Center" />
                    <RadzenText Text="Ⓒ 2023 SACI (Sistema para Atención de Correos Institucionales) vα 1.0" TextStyle="Radzen.Blazor.TextStyle.Caption" class="rz-mb-0" style="color: var(--rz-text-disabled-color);" TagName="Radzen.Blazor.TagName.P" TextAlign="Radzen.TextAlign.Center" />
                </RadzenStack>
            </RadzenFooter>
        </RadzenLayout>
    </Authorized>
    <NotAuthorized>
        <p>No Autorizado</p>
    </NotAuthorized>
    <Authorizing>
        <p>Autorizando...</p>
    </Authorizing>
</AuthorizeView>

@code
{
    private bool sidebarExpanded = true;

    void SidebarToggleClick() => sidebarExpanded = !sidebarExpanded;

    // void CerrarSesion()
    // {
    //     Console.WriteLine("Hola");
    // }

    // private string themeName = "fluent";

    // public class ThemeDetails
    // {
    //     public string? ID { get; set; }
    //     public string? Text { get; set; }
    // }

    // private List<ThemeDetails> Themes = new List<ThemeDetails>()
    // {
    //     new ThemeDetails(){ ID = "bootstrap5", Text = "Bootstrap 5" },
    //     new ThemeDetails(){ ID = "bootstrap5-dark", Text = "Bootstrap 5 Dark" },
    //     new ThemeDetails(){ ID = "bootstrap4", Text = "Bootstrap 4" },
    //     //new ThemeDetails(){ ID = "bootstrap4-dark", Text = "Bootstrap 4 Dark" },
    //     new ThemeDetails(){ ID = "bootstrap", Text = "Bootstrap 3" },
    //     new ThemeDetails(){ ID = "bootstrap-dark", Text = "Bootstrap 3 Dark" },
    //     new ThemeDetails(){ ID = "material", Text = "Material UI" },
    //     new ThemeDetails(){ ID = "material-dark", Text = "Material UI Dark" },
    //     new ThemeDetails(){ ID = "tailwind", Text = "TailWind CSS"},
    //     new ThemeDetails(){ ID = "tailwind-dark", Text = "TailWind CSS Dark" },
    //     new ThemeDetails(){ ID = "fabric", Text = "Fabric" },
    //     new ThemeDetails(){ ID = "fabric-dark", Text = "Fabric Dark" },
    //     new ThemeDetails(){ ID = "fluent", Text = "Fluent" },
    //     new ThemeDetails(){ ID = "fluent-dark", Text = "Fluent Dark" },
    //     new ThemeDetails(){ ID = "highcontrast", Text = "High Contrast" }
    // };

    // public void OnThemeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ThemeDetails> args)
    // {
    //     JSRuntime.InvokeAsync<object>("setTheme", args.ItemData.ID);
    // }

    private bool sidebarCollapse = true;

    private string? sidebarCssClass => sidebarCollapse ? "sidebar" : "sidebar collapse";

    private void CollapseSidebar()
    {
        sidebarCollapse = !sidebarCollapse;
    }

    public Response<RequestViewModel_TipoPersonal>? oResponseTipoPersonal = new();

    private string? authMessage;
    private List<Claim> claims = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await servicioAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Claims.FirstOrDefault(c => c.Type == "Name")?.Value} is authenticated.";
            claims = user.Claims.ToList();
            var tipoPersonal = user.Claims.FirstOrDefault(c => c.Type == "TipoPersonal")?.Value;
            oResponseTipoPersonal = await servicioTipoPersonal.GetDataByIdAsync(int.Parse(tipoPersonal));
        }
        else
            navigationManager.NavigateTo("/");
    }

    // private async Task DropDownSelect(MenuEventArgs args)
    // {
    //     if (args.Item.Id == "Perfil")
    //     {
    //         navigationManager.NavigateTo("/Perfil");
    //     }
    //     else if (args.Item.Id == "LogOut")
    //     {
    //         await loginService.Logout();
    //         navigationManager.NavigateTo("/");
    //     }
    // }

    private async Task LogOut()
    {
        await loginService.Logout();
        navigationManager.NavigateTo("/");
    }
}

@inherits LayoutComponentBase

@inject ILoginServices loginService

<RadzenComponents />

<style type="text/css">
</style>

<AuthorizeView>
    <Authorized>
        <RadzenLayout>
            <RadzenHeader class="rz-background-color-info-darker rz-border-radius-0 rz-py-0 rz-my-0" Style="border-bottom:0;">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.Wrap" Gap="10px">
                    
                    <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" class="rz-m-0" />

                    <RadzenCard Variant="Variant.Filled" Class="rz-p-2 rz-border-radius-0 d-none d-sm-none d-md-block d-lg-block d-xl-block d-xxl-block">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="10px" Class="">
                            <RadzenImage Path="./logo_saci.png" Style="height:30px;" AlternateText="logo saci" />
                            <RadzenStack Gap="0px">
                                <RadzenText TextStyle="TextStyle.Body1"><b>SACI</b></RadzenText>
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0" style="font-variant: small-caps;">
                                    Sistema para Atención de Correos Institucionales IPN
                                </RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                    @{
                        string? rol = context.User.Claims.FirstOrDefault(c => c.Type == "Rol")?.Value == "1" ? "Administrador" : "Usuario";
                        string? tipoPersonal = oResponseTipoPersonal?.Data?.TipoperNombre ?? null;
                        string? name = context.User.Claims.FirstOrDefault(c => c.Type == "Name")?.Value;
                        string? email = context.User.Claims.FirstOrDefault(c => c.Type == "Email")?.Value;
                    }
                    <RadzenCard Variant="Variant.Filled" Class="rz-p-3 d-none d-sm-none d-md-block d-lg-block d-xl-block d-xxl-block rz-border-radius-0">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="10px" Class="">
                            <RadzenImage Path="./logo_ipn.png" Style="height: 30px;" />
                            <RadzenStack Gap="0px">
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">@rol:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@tipoPersonal</b></RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>

                    <RadzenCard Variant="Variant.Filled" Class="rz-p-0 d-block d-sm-block rz-border-radius-0">
                        <RadzenProfileMenu Class="">
                            <Template>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Gap="10px" Class="">
                                    <RadzenGravatar Email="@email" />
                                    <RadzenStack Gap="0px">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-mb-0 rz-p-0">@name</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@email</b></RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </Template>
                            <ChildContent>
                                <RadzenButton Variant="Variant.Text" Click="@(() => navigationManager.NavigateTo("/PerfilUsuario"))" Text="Perfil" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Dark" Icon="account_circle" class="d-block text-start" style="width: 100%" />
                                <RadzenButton Variant="Variant.Text" Click="@LogOut" Text="Cerrar Sesión" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Dark" Icon="logout" class="d-block text-start" style="width: 100%" />
                            </ChildContent>
                        </RadzenProfileMenu>
                    </RadzenCard>
                </RadzenStack>
            </RadzenHeader>

            <!-- ... Contenido para pantallas pequeñas móviles -->
            <div class="d-block d-sm-block d-md-none d-lg-none d-xl-none d-xxl-none rz-background-color-base-900">
                <RadzenSidebar @bind-Expanded="@sidebarExpanded" Responsive="false" Style="width:max-content; font-family:var(--rz-text-font-family);" class="rz-background-color-base-900 rz-border-base-900">
                    <RadzenPanelMenu Multiple="@(context.User.Claims.FirstOrDefault(c => c.Type == "Rol")?.Value == "2" ? true : false)" ShowArrow="true">
                        <NavMenu isExpanded="@(context.User.Claims.FirstOrDefault(c => c.Type == "Rol")?.Value == "2" ? true : false)" />
                    </RadzenPanelMenu>
                </RadzenSidebar>
            </div>

            <!-- ... Contenido para pantallas grandes ... -->
            <div class="d-none d-sm-none d-md-block d-lg-block d-xl-block d-xxl-block rz-background-color-base-900">
                <RadzenSidebar Responsive="false" Style="width:max-content; font-family:var(--rz-text-font-family); border-top:0;" class="rz-background-color-base-900 rz-border-base-900">
                    <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)"
                                     Multiple="@(context.User.Claims.FirstOrDefault(c => c.Type == "Rol")?.Value == "2" ? true : false)" ShowArrow="true">
                        <NavMenu isExpanded="@(context.User.Claims.FirstOrDefault(c => c.Type == "Rol")?.Value == "2" ? true : false)" />
                    </RadzenPanelMenu>
                </RadzenSidebar>
            </div>

            <RadzenBody style="background: url('../fondo.jpg') repeat center center fixed;">
                <RadzenColumn Size="12">
                    <article class="content px-4" style="background: url('../fondo.jpg') repeat center center fixed;">
                        @Body
                    </article>
                </RadzenColumn>
            </RadzenBody>

            <RadzenFooter class="rz-background-color-base-900 rz-border-base-900">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.SpaceAround" Wrap="FlexWrap.Wrap" Gap="10px" Class="">
                    <RadzenText Text="UPIICSA (Desarrollo de Sistemas de Información)" TextStyle="Radzen.Blazor.TextStyle.Caption" style="color: var(--rz-text-disabled-color);" TagName="Radzen.Blazor.TagName.P" TextAlign="Radzen.TextAlign.Center" />
                    <RadzenText Text="Ⓒ 2023 SACI (Sistema para Atención de Correos Institucionales) vα 1.0" TextStyle="Radzen.Blazor.TextStyle.Caption" class="rz-mb-0" style="color: var(--rz-text-disabled-color);" TagName="Radzen.Blazor.TagName.P" TextAlign="Radzen.TextAlign.Center" />
                </RadzenStack>
            </RadzenFooter>
        </RadzenLayout>
    </Authorized>
    <NotAuthorized>
        <p>No Autorizado</p>
        @{
            if (context.User.Identity?.IsAuthenticated == true)
                navigationManager.NavigateTo("/");
        }
    </NotAuthorized>
    <Authorizing>
        <p>Autorizando...</p>
    </Authorizing>
</AuthorizeView>

@code
{
    private bool sidebarExpanded = true;

    private Response<RequestViewModel_TipoPersonal>? oResponseTipoPersonal = new();
    private Response<RequestDTO_Usuario>? oResponseUsuario = new();

    private string? authMessage;
    private List<Claim> claims = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await servicioAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Claims.FirstOrDefault(c => c.Type == "Name")?.Value} is authenticated.";
            claims = user.Claims.ToList();

            var tipoPersonal = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == "TipoPersonal")?.Value);
            oResponseTipoPersonal = await servicioTipoPersonal.GetDataByIdAsync(tipoPersonal);
            
            int id = Convert.ToInt32(user.Claims.FirstOrDefault(c => c.Type == "ID")?.Value);
            oResponseUsuario = await servicioUsuario.GetDataByIdAsync(id);
        }
        else
            navigationManager.NavigateTo("/");
    }

    private async Task LogOut()
    {
        await loginService.Logout();
        navigationManager.NavigateTo("/");
    }
}

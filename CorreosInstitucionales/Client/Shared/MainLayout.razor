@using CorreosInstitucionales.Client.CapaPresentation.ComponentsPages.UI_UX.Login
@using CorreosInstitucionales.Shared.CapaEntities.ViewModels.Request
@using CorreosInstitucionales.Shared.CapaEntities.ViewModels.Response
@using CorreosInstitucionales.Shared.CapaServices.BusinessLogic.catTiposPersonalService

@inherits LayoutComponentBase

@inject AuthenticationStateProvider servicioAuthenticationStateProvider
@inject NavigationManager navigationManager;
@inject ILoginServices loginService
@inject ITipoPersonal servicioTipoPersonal
@inject IJSRuntime JSRuntime;

<AuthorizeView>
    <Authorized>
    </Authorized>
    <NotAuthorized>
        @{
            if (context.User.Identity?.IsAuthenticated == true)
                navigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

<style>
    .control-container .e-appbar.custom-appbar {
        background: none;
        color: #fff;
        font-size: 16px;
    }

    .control-container .e-btn.e-inherit {
        margin: 0 3px;
    }

    .control-container .syncfusion-logo {
        background: url(https://cdn.syncfusion.com/blazor/images/demos/syncfusion-logo.svg);
        background-size: contain;
        background-repeat: no-repeat;
        height: 30px;
        width: 150px;
    }
</style>

<div class="page">
    <div class="@sidebarCssClass">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 control-container" style="background-color:#3d0000; color:white;">
            <SfAppBar IsSticky="true" ColorMode="AppBarColor.Primary" Mode="AppBarMode.Regular" CssClass="custom-appbar">

                <SfButton CssClass="e-inherit" IconCss="e-icons e-menu" OnClick="CollapseSidebar" />

                <a href="https:www.syncfusion.com/blazor-components" target="_blank" rel="noopener" role="link" aria-label="Syncfusion blazor components">
                    <div class="syncfusion-logo"></div>
                </a>
                <span style="font-variant: small-caps;">Sistema de Atención para Correos Institucionales IPN</span>

                <AppBarSpacer />

                <AuthorizeView>
                    <Authorized>

                        <AppBarSpacer /><AppBarSeparator /><AppBarSpacer />

                        <CultureSwitcher />
                        <div class="theme-switcher">
                            @* Theme switcher *@
                            <SfDropDownList TItem="ThemeDetails" TValue="string" @bind-Value="themeName" DataSource="@Themes" Placeholder="Selecciona el Tema" EnableRtl="false">
                                <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
                                <DropDownListEvents TItem="ThemeDetails" TValue="string" ValueChange="OnThemeChange"></DropDownListEvents>
                            </SfDropDownList>
                        </div>

                        @{
                            string? rol = context.User.Claims.FirstOrDefault(c => c.Type == "Rol")?.Value;
                            string? tipoPersonal = string.Empty;
                            if (oResponseTipoPersonal != null && oResponseTipoPersonal.Data != null)
                                tipoPersonal = oResponseTipoPersonal.Data.TipoperNombre;
                            string? name = context.User.Claims.FirstOrDefault(c => c.Type == "Name")?.Value;
                            string? email = context.User.Claims.FirstOrDefault(c => c.Type == "Email")?.Value;
                        }

                        <AppBarSpacer /><AppBarSeparator /><AppBarSpacer />

                        <span style="font-variant: small-caps;">@tipoPersonal</span>

                        <AppBarSpacer /><AppBarSeparator /><AppBarSpacer />

                        <span>@email</span>

                        <AppBarSpacer /><AppBarSeparator /><AppBarSpacer />

                        <SfDropDownButton Content="@name" IconCss="e-icons e-user" IconPosition="SplitButtonIconPosition.Left" EnableRtl="false">
                            <DropDownButtonEvents ItemSelected="DropDownSelect"></DropDownButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem Text="@tipoPersonal" IconCss="oi oi-badge" Disabled="true"></DropDownMenuItem>
                                <DropDownMenuItem Text="@email" IconCss="oi oi-envelope-open" Disabled="true"></DropDownMenuItem>
                                <DropDownMenuItem Id="Perfil" Text="Perfil" IconCss="oi oi-person"></DropDownMenuItem>
                                <DropDownMenuItem Separator=true></DropDownMenuItem>
                                <DropDownMenuItem Id="LogOut" Text="Cerrar Sesión" IconCss="oi oi-account-logout"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>

                    </Authorized>
                    <NotAuthorized>
                        <p>No Autorizado</p>
                    </NotAuthorized>
                    <Authorizing>
                        <p>Autorizando...</p>
                    </Authorizing>
                </AuthorizeView>

            </SfAppBar>
        </div>

        <article class="content px-4" style="background: url('../fondo.jpg') repeat center center fixed;">
            @Body
        </article>
    </main>
</div>

@code
{
    private string themeName = "fluent";

    public class ThemeDetails
    {
        public string? ID { get; set; }
        public string? Text { get; set; }
    }

    private List<ThemeDetails> Themes = new List<ThemeDetails>()
    {
        new ThemeDetails(){ ID = "bootstrap5", Text = "Bootstrap 5" },
        new ThemeDetails(){ ID = "bootstrap5-dark", Text = "Bootstrap 5 Dark" },
        new ThemeDetails(){ ID = "bootstrap4", Text = "Bootstrap 4" },
        //new ThemeDetails(){ ID = "bootstrap4-dark", Text = "Bootstrap 4 Dark" },
        new ThemeDetails(){ ID = "bootstrap", Text = "Bootstrap 3" },
        new ThemeDetails(){ ID = "bootstrap-dark", Text = "Bootstrap 3 Dark" },
        new ThemeDetails(){ ID = "material", Text = "Material UI" },
        new ThemeDetails(){ ID = "material-dark", Text = "Material UI Dark" },
        new ThemeDetails(){ ID = "tailwind", Text = "TailWind CSS"},
        new ThemeDetails(){ ID = "tailwind-dark", Text = "TailWind CSS Dark" },
        new ThemeDetails(){ ID = "fabric", Text = "Fabric" },
        new ThemeDetails(){ ID = "fabric-dark", Text = "Fabric Dark" },
        new ThemeDetails(){ ID = "fluent", Text = "Fluent" },
        new ThemeDetails(){ ID = "fluent-dark", Text = "Fluent Dark" },
        new ThemeDetails(){ ID = "highcontrast", Text = "High Contrast" }
    };

    public void OnThemeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ThemeDetails> args)
    {
        JSRuntime.InvokeAsync<object>("setTheme", args.ItemData.ID);
    }

    private bool sidebarCollapse = true;

    private string? sidebarCssClass => sidebarCollapse ? "sidebar" : "sidebar collapse";

    private void CollapseSidebar()
    {
        sidebarCollapse = !sidebarCollapse;
    }

    public Response<TipoPersonalViewModel>? oResponseTipoPersonal = new();

    private string? authMessage;
    private List<Claim> claims = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await servicioAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Claims.FirstOrDefault(c => c.Type == "Name")?.Value} is authenticated.";
            claims = user.Claims.ToList();
            var tipoPersonal = user.Claims.FirstOrDefault(c => c.Type == "TipoPersonal")?.Value;
            oResponseTipoPersonal = await servicioTipoPersonal.GetDataByIdAsync(int.Parse(tipoPersonal));
        }
        else
            navigationManager.NavigateTo("/");
    }

    private async Task DropDownSelect(MenuEventArgs args)
    {
        if (args.Item.Id == "Perfil")
        {
            navigationManager.NavigateTo("/Perfil");
        }
        else if (args.Item.Id == "LogOut")
        {
            await loginService.Logout();
            navigationManager.NavigateTo("/");
        }
    }
}
